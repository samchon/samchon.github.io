<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="d7/de5/classsamchon_1_1library_1_1SharedReadLock" kind="class" language="C++" prot="public">
    <compoundname>samchon::library::SharedReadLock</compoundname>
    <includes refid="d0/df1/SharedReadLock_8hpp" local="no">SharedReadLock.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1a55552a771c86054c6d748683b5ce5a10" prot="private" static="no" mutable="no">
        <type>const <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> *</type>
        <definition>const RWMutex* semaphore</definition>
        <argsstring></argsstring>
        <name>semaphore</name>
        <briefdescription>
<para>Managed <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.hpp" line="58" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1a2ba493096607c1b69a7c85acf8d8cabf" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; size_t &gt; *</type>
        <definition>std::atomic&lt;size_t&gt;* reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
<para>Referencing count sharing same <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.hpp" line="63" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1a67f9d594ad70244ea22af78439f83abf" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt; *</type>
        <definition>std::atomic&lt;bool&gt;* isLocked</definition>
        <argsstring></argsstring>
        <name>isLocked</name>
        <briefdescription>
<para>Whether the mutex was locked by <ref refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock" kindref="compound">SharedReadLock</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.hpp" line="68" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1a2b27fb1bf5d6c339d2b31abee9750dd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SharedReadLock</definition>
        <argsstring>(const RWMutex &amp;, bool=true)</argsstring>
        <name>SharedReadLock</name>
        <param>
          <type>const <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> &amp;</type>
          <defname>semaphore</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>doLock</defname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Construct from <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>semaphore</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> to manage </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>doLock</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to lock directly or not </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.hpp" line="80" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.cpp" bodystart="12" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1a9679185e491b9fa2f95b8caac1ee805b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SharedReadLock</definition>
        <argsstring>(const SharedReadLock &amp;)</argsstring>
        <name>SharedReadLock</name>
        <param>
          <type>const <ref refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock" kindref="compound">SharedReadLock</ref> &amp;</type>
          <defname>obj</defname>
        </param>
        <briefdescription>
<para>Copy Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.hpp" line="85" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.cpp" bodystart="22" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1a4e5f3955be08e962802e897f684fa1ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SharedReadLock</definition>
        <argsstring>(SharedReadLock &amp;&amp;)</argsstring>
        <name>SharedReadLock</name>
        <param>
          <type><ref refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock" kindref="compound">SharedReadLock</ref> &amp;&amp;</type>
          <defname>obj</defname>
        </param>
        <briefdescription>
<para>Move Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.hpp" line="90" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.cpp" bodystart="30" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1a53af62bbaad3403865c223da5c6b1992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~SharedReadLock</definition>
        <argsstring>()</argsstring>
        <name>~SharedReadLock</name>
        <briefdescription>
<para>Default Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.hpp" line="95" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.cpp" bodystart="43" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1adb935251a59a654ff19259005a8ed7f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lock</definition>
        <argsstring>() const </argsstring>
        <name>lock</name>
        <briefdescription>
<para>Lock on read. </para>        </briefdescription>
        <detaileddescription>
<para>Increases a reading count. </para><para>When write_lock is on a progress, wait until write_unlock to be called. </para><para><itemizedlist>
<listitem><para>Reading can be done by multiple sections. </para></listitem>
<listitem><para>Reading can&apos;t be done when writing.</para></listitem>
</itemizedlist>
<simplesect kind="warning"><para>You&apos;ve to call read_unlock when the reading work is terminated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.hpp" line="103" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.cpp" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1ab896fcbef7ce95ee1dc6a8c633240ee6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void unlock</definition>
        <argsstring>() const </argsstring>
        <name>unlock</name>
        <briefdescription>
<para>Unlock of read. </para>        </briefdescription>
        <detaileddescription>
<para>Decreases a reading count. </para><para>When write_lock had done after read_lock, it continues by read_unlock if the reading count was 1 (read_unlock makes the count to be zero). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.hpp" line="108" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.cpp" bodystart="66" bodyend="73"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Shared lock from a <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>A <ref refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock" kindref="compound">SharedReadLock</ref> is an object manages a <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> with shared ownership in both states. </para><para><itemizedlist>
<listitem><para>locked </para></listitem>
<listitem><para>unlocked</para></listitem>
</itemizedlist>
</para><para>On default construction, the object acquires a <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> object, for whose locking and unlocking operations becomes responsible. When copy constructions, responsibilities of locking and unlocking <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> are shared with copied with those <ref refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock" kindref="compound">SharedReadLock</ref> objects. </para><para>The class shared_lock is a general-purpose shared mutex ownership wrapper allowing deferred locking, timed locking and transfer of lock ownership. Locking a shared_lock locks the associated shared mutex in shared mode (to lock it in exclusive mode, std::unique_lock can be used) </para><para>This class guarantees a unlocked status on destruction of all shared objects (even if not called explicitly). Therefore it is especially useful as an object with automatic duration, as it guarantees the <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> object is properly unlocked in case an exception is thrown. </para><para>Referenced comments of std::unique_lock </para><para><itemizedlist>
<listitem><para><ulink url="http://www.cplusplus.com/reference/mutex/unique_lock/">http://www.cplusplus.com/reference/mutex/unique_lock/</ulink></para></listitem>
</itemizedlist>
<image type="html" name="library_critical_section.png"></image>
 <image type="latex" name="library_critical_section.png"></image>
</para><para><simplesect kind="note"><para></para></simplesect>
Though, that the <ref refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock" kindref="compound">SharedReadLock</ref> object does not manage the lifetime of the <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> object in any way: the duration of the <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> object shall extend at least until the destruction of the <ref refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock" kindref="compound">SharedReadLock</ref> that manages it. </para><para><simplesect kind="see"><para><ref refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire" kindref="compound">library::UniqueAcquire</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="2686">
        <label>SharedReadLock</label>
        <link refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock"/>
        <childnode refid="2687" relation="usage">
          <edgelabel>semaphore</edgelabel>
        </childnode>
      </node>
      <node id="2687">
        <label>RWMutex</label>
        <link refid="df/d85/classsamchon_1_1library_1_1RWMutex"/>
      </node>
    </collaborationgraph>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.hpp" line="53" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedReadLock.hpp" bodystart="52" bodyend="114"/>
    <listofallmembers>
      <member refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1a67f9d594ad70244ea22af78439f83abf" prot="private" virt="non-virtual"><scope>samchon::library::SharedReadLock</scope><name>isLocked</name></member>
      <member refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1adb935251a59a654ff19259005a8ed7f7" prot="public" virt="non-virtual"><scope>samchon::library::SharedReadLock</scope><name>lock</name></member>
      <member refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1a2ba493096607c1b69a7c85acf8d8cabf" prot="private" virt="non-virtual"><scope>samchon::library::SharedReadLock</scope><name>reference</name></member>
      <member refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1a55552a771c86054c6d748683b5ce5a10" prot="private" virt="non-virtual"><scope>samchon::library::SharedReadLock</scope><name>semaphore</name></member>
      <member refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1a2b27fb1bf5d6c339d2b31abee9750dd4" prot="public" virt="non-virtual"><scope>samchon::library::SharedReadLock</scope><name>SharedReadLock</name></member>
      <member refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1a9679185e491b9fa2f95b8caac1ee805b" prot="public" virt="non-virtual"><scope>samchon::library::SharedReadLock</scope><name>SharedReadLock</name></member>
      <member refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1a4e5f3955be08e962802e897f684fa1ec" prot="public" virt="non-virtual"><scope>samchon::library::SharedReadLock</scope><name>SharedReadLock</name></member>
      <member refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1ab896fcbef7ce95ee1dc6a8c633240ee6" prot="public" virt="non-virtual"><scope>samchon::library::SharedReadLock</scope><name>unlock</name></member>
      <member refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock_1a53af62bbaad3403865c223da5c6b1992" prot="public" virt="non-virtual"><scope>samchon::library::SharedReadLock</scope><name>~SharedReadLock</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
