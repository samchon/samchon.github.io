<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity" kind="class" language="C++" prot="public">
    <compoundname>samchon::protocol::ISQLEntity</compoundname>
    <includes refid="d3/d35/ISQLEntity_8hpp" local="no">ISQLEntity.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity_1a17581642f721818e4d16ff8edc597e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ISQLEntity</definition>
        <argsstring>()</argsstring>
        <name>ISQLEntity</name>
        <briefdescription>
<para>Default Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/ISQLEntity.hpp" line="38" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/ISQLEntity.cpp" bodystart="9" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity_1a83f4ba055ee9b6ed9009d9726ffd5c6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual ~ISQLEntity</definition>
        <argsstring>()=default</argsstring>
        <name>~ISQLEntity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/ISQLEntity.hpp" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity_1acaf35a8be33a8c581bcaef1347bdc531" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void load</definition>
        <argsstring>(std::shared_ptr&lt; library::SQLStatement &gt; stmt)</argsstring>
        <name>load</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/def/classsamchon_1_1library_1_1SQLStatement" kindref="compound">library::SQLStatement</ref> &gt;</type>
          <declname>stmt</declname>
        </param>
        <briefdescription>
<para>Load data of entity from DB. </para>        </briefdescription>
        <detaileddescription>
<para>Loads and constructs data of the entity from a SQLStatement. </para><para>If an entity implementing the <ref refid="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity" kindref="compound">ISQLEntity</ref> is a type of <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup" kindref="compound">EntityGroup</ref> and its children also implemented the <ref refid="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity" kindref="compound">ISQLEntity</ref>, you can realize construction chain by each child entity fetches data of their own by themselves. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stmt</parametername>
</parameternamelist>
<parameterdescription>
<para>SQLStatement storing data of the <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/ISQLEntity.hpp" line="53" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/ISQLEntity.cpp" bodystart="13" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity_1a968d53428a668e3d1e1c3fceee83a0e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void archive</definition>
        <argsstring>(std::shared_ptr&lt; library::SQLStatement &gt; stmt)</argsstring>
        <name>archive</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/def/classsamchon_1_1library_1_1SQLStatement" kindref="compound">library::SQLStatement</ref> &gt;</type>
          <declname>stmt</declname>
        </param>
        <briefdescription>
<para>Archive data of entity to DB. </para>        </briefdescription>
        <detaileddescription>
<para>Archives data of the entity to Database by a SQLStatement. </para><para>If an entity implementing the <ref refid="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity" kindref="compound">ISQLEntity</ref> is a type of <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup" kindref="compound">EntityGroup</ref> and its children also implemented the <ref refid="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity" kindref="compound">ISQLEntity</ref>, you can realize archiving chain by each child entity archives data of their own by themselves. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stmt</parametername>
</parameternamelist>
<parameterdescription>
<para>SQLStatement would store data of the <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/ISQLEntity.hpp" line="66" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/ISQLEntity.cpp" bodystart="16" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity_1a10199da9e0302eafc2ece201c78b1237" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>auto</type>
        <definition>auto toSQL</definition>
        <argsstring>() const  -&gt; std::string</argsstring>
        <name>toSQL</name>
        <briefdescription>
<para>Get a sql-statement string represents the entity. </para>        </briefdescription>
        <detaileddescription>
<para>ISQLEntity::toSL() is an abstract method returns a sql-statement string. </para><para>However, if there&apos;s some parameter in a sql-statement string from the toString() method, it is categorized in dynamic sql. In that case, do not access table directly but indirect from sql-procedure. Indirecting procedure is good for performance and security. </para><para><simplesect kind="return"><para>SQL storing record(s) to temporary table of a Procedure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/ISQLEntity.hpp" line="80" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/ISQLEntity.cpp" bodystart="20" bodyend="23"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An interface supporting DB-I/O. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity" kindref="compound">ISQLEntity</ref> is an interface for interacting with Database. By implementing <ref refid="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity_1acaf35a8be33a8c581bcaef1347bdc531" kindref="member">load()</ref> and <ref refid="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity_1a968d53428a668e3d1e1c3fceee83a0e4" kindref="member">archive()</ref> methods, you can make an entity to interact with a Database.</para><para>If an entity implementing the <ref refid="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity" kindref="compound">ISQLEntity</ref> is a type of <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup" kindref="compound">EntityGroup</ref> and its children also implemented the <ref refid="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity" kindref="compound">ISQLEntity</ref>, you can realize construction and archiving chain by each child entity to do their I/O procedures by their own. </para><para><image type="html" name="library_sql.png"></image>
 <image type="latex" name="library_sql.png"></image>
</para><para><simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/ISQLEntity.hpp" line="33" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/ISQLEntity.hpp" bodystart="32" bodyend="81"/>
    <listofallmembers>
      <member refid="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity_1a968d53428a668e3d1e1c3fceee83a0e4" prot="public" virt="virtual"><scope>samchon::protocol::ISQLEntity</scope><name>archive</name></member>
      <member refid="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity_1a17581642f721818e4d16ff8edc597e05" prot="public" virt="non-virtual"><scope>samchon::protocol::ISQLEntity</scope><name>ISQLEntity</name></member>
      <member refid="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity_1acaf35a8be33a8c581bcaef1347bdc531" prot="public" virt="virtual"><scope>samchon::protocol::ISQLEntity</scope><name>load</name></member>
      <member refid="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity_1a10199da9e0302eafc2ece201c78b1237" prot="public" virt="virtual"><scope>samchon::protocol::ISQLEntity</scope><name>toSQL</name></member>
      <member refid="d7/d56/classsamchon_1_1protocol_1_1ISQLEntity_1a83f4ba055ee9b6ed9009d9726ffd5c6f" prot="public" virt="virtual"><scope>samchon::protocol::ISQLEntity</scope><name>~ISQLEntity</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
