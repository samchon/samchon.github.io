<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="d7/d8e/classsamchon_1_1library_1_1SharedAcquire" kind="class" language="C++" prot="public">
    <compoundname>samchon::library::SharedAcquire</compoundname>
    <includes refid="d5/ddb/SharedAcquire_8hpp" local="no">SharedAcquire.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1a000bdc6218e92334abc77ee4d2111727" prot="private" static="no" mutable="no">
        <type><ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref> *</type>
        <definition>Semaphore* semaphore</definition>
        <argsstring></argsstring>
        <name>semaphore</name>
        <briefdescription>
<para>Managed <ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.hpp" line="58" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1a2ba493096607c1b69a7c85acf8d8cabf" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; size_t &gt; *</type>
        <definition>std::atomic&lt;size_t&gt;* reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
<para>Referencing count sharing same <ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.hpp" line="63" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1a67f9d594ad70244ea22af78439f83abf" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt; *</type>
        <definition>std::atomic&lt;bool&gt;* isLocked</definition>
        <argsstring></argsstring>
        <name>isLocked</name>
        <briefdescription>
<para>Whether the mutex was locked by <ref refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire" kindref="compound">SharedAcquire</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.hpp" line="68" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1a8b33a3fc15bddcca4e4135e45007b03e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SharedAcquire</definition>
        <argsstring>(Semaphore &amp;, bool=true)</argsstring>
        <name>SharedAcquire</name>
        <param>
          <type><ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref> &amp;</type>
          <defname>semaphore</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>doLock</defname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Construct from <ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>semaphore</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref> to manage </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>doLock</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to lock directly or not </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.hpp" line="80" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.cpp" bodystart="12" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1abaa22cc9347f7bf5869fa41e1364f572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SharedAcquire</definition>
        <argsstring>(const SharedAcquire &amp;)</argsstring>
        <name>SharedAcquire</name>
        <param>
          <type>const <ref refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire" kindref="compound">SharedAcquire</ref> &amp;</type>
          <defname>obj</defname>
        </param>
        <briefdescription>
<para>Copy Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.hpp" line="85" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.cpp" bodystart="22" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1ac048115237232f10e43843b5975c21f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SharedAcquire</definition>
        <argsstring>(SharedAcquire &amp;&amp;)</argsstring>
        <name>SharedAcquire</name>
        <param>
          <type><ref refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire" kindref="compound">SharedAcquire</ref> &amp;&amp;</type>
          <defname>obj</defname>
        </param>
        <briefdescription>
<para>Move Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.hpp" line="90" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.cpp" bodystart="30" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1a86162130dee39649daad42182e04587c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~SharedAcquire</definition>
        <argsstring>()</argsstring>
        <name>~SharedAcquire</name>
        <briefdescription>
<para>Default Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.hpp" line="95" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.cpp" bodystart="43" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1af9f5b35a212d21af601a8213ed325871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acquire</definition>
        <argsstring>()</argsstring>
        <name>acquire</name>
        <briefdescription>
<para>Acquire admission. </para>        </briefdescription>
        <detaileddescription>
<para>Acquires an admission and increases count of admission by 1. </para><para>If the count is over permitted size, wait until other admissions to be released. </para><para><itemizedlist>
<listitem><para>Lock on mutex </para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.hpp" line="103" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.cpp" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1a23b477d0e2d399f75d585d154c346591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void release</definition>
        <argsstring>()</argsstring>
        <name>release</name>
        <briefdescription>
<para>Release an admission. </para>        </briefdescription>
        <detaileddescription>
<para>Releases an admission what you&apos;ve acquired. If the admission count was over the limited size, unlock the mutex. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.hpp" line="108" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.cpp" bodystart="66" bodyend="73"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Shared acquire from a <ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>A <ref refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire" kindref="compound">SharedAcquire</ref> is an object manages a <ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref> with shared ownership in both states. </para><para><itemizedlist>
<listitem><para>acquired </para></listitem>
<listitem><para>released</para></listitem>
</itemizedlist>
</para><para>On default construction, the object acquires a <ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref> object, for whose acquiring and releasing operations becomes responsible. When copy constructions, responsibilities of acquiring and releasing <ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref> are shared with copied with those <ref refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire" kindref="compound">SharedAcquire</ref> objects. </para><para>The class shared_lock is a general-purpose shared mutex ownership wrapper allowing deferred locking, timed locking and transfer of lock ownership. Locking a shared_lock locks the associated shared mutex in shared mode (to lock it in exclusive mode, std::unique_lock can be used) </para><para>This class guarantees a released status on destruction of all shared objects (even if not called explicitly). Therefore it is especially useful as an object with automatic duration, as it guarantees the <ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref> object is properly released in case an exception is thrown. </para><para>Referenced comments of std::unique_lock </para><para><itemizedlist>
<listitem><para><ulink url="http://www.cplusplus.com/reference/mutex/unique_lock/">http://www.cplusplus.com/reference/mutex/unique_lock/</ulink></para></listitem>
</itemizedlist>
<image type="html" name="library_critical_section.png"></image>
 <image type="latex" name="library_critical_section.png"></image>
</para><para><simplesect kind="note"><para></para></simplesect>
Though, that the <ref refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire" kindref="compound">SharedAcquire</ref> object does not manage the lifetime of the <ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref> object in any way: the duration of the <ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref> object shall extend at least until the destruction of the <ref refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire" kindref="compound">SharedAcquire</ref> that manages it. </para><para><simplesect kind="see"><para><ref refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire" kindref="compound">library::UniqueAcquire</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="2684">
        <label>Semaphore</label>
        <link refid="d9/d88/classsamchon_1_1library_1_1Semaphore"/>
      </node>
      <node id="2683">
        <label>SharedAcquire</label>
        <link refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire"/>
        <childnode refid="2684" relation="usage">
          <edgelabel>semaphore</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.hpp" line="53" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/SharedAcquire.hpp" bodystart="52" bodyend="114"/>
    <listofallmembers>
      <member refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1af9f5b35a212d21af601a8213ed325871" prot="public" virt="non-virtual"><scope>samchon::library::SharedAcquire</scope><name>acquire</name></member>
      <member refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1a67f9d594ad70244ea22af78439f83abf" prot="private" virt="non-virtual"><scope>samchon::library::SharedAcquire</scope><name>isLocked</name></member>
      <member refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1a2ba493096607c1b69a7c85acf8d8cabf" prot="private" virt="non-virtual"><scope>samchon::library::SharedAcquire</scope><name>reference</name></member>
      <member refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1a23b477d0e2d399f75d585d154c346591" prot="public" virt="non-virtual"><scope>samchon::library::SharedAcquire</scope><name>release</name></member>
      <member refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1a000bdc6218e92334abc77ee4d2111727" prot="private" virt="non-virtual"><scope>samchon::library::SharedAcquire</scope><name>semaphore</name></member>
      <member refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1a8b33a3fc15bddcca4e4135e45007b03e" prot="public" virt="non-virtual"><scope>samchon::library::SharedAcquire</scope><name>SharedAcquire</name></member>
      <member refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1abaa22cc9347f7bf5869fa41e1364f572" prot="public" virt="non-virtual"><scope>samchon::library::SharedAcquire</scope><name>SharedAcquire</name></member>
      <member refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1ac048115237232f10e43843b5975c21f0" prot="public" virt="non-virtual"><scope>samchon::library::SharedAcquire</scope><name>SharedAcquire</name></member>
      <member refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire_1a86162130dee39649daad42182e04587c" prot="public" virt="non-virtual"><scope>samchon::library::SharedAcquire</scope><name>~SharedAcquire</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
