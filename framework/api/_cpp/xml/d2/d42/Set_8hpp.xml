<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="d2/d42/Set_8hpp" kind="file" language="C++">
    <compoundname>Set.hpp</compoundname>
    <includes local="no">set</includes>
    <includedby refid="d5/dd8/CriticalSet_8hpp" local="no">D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/CriticalSet.hpp</includedby>
    <includedby refid="d3/d60/EventDispatcher_8hpp" local="no">D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp</includedby>
    <incdepgraph>
      <node id="5532">
        <label>D:/OneDrive/Project/Samchon/framework/cpp/samchon/Set.hpp</label>
        <link refid="Set.hpp"/>
        <childnode refid="5533" relation="include">
        </childnode>
      </node>
      <node id="5533">
        <label>set</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5534">
        <label>D:/OneDrive/Project/Samchon/framework/cpp/samchon/Set.hpp</label>
        <link refid="Set.hpp"/>
        <childnode refid="5535" relation="include">
        </childnode>
        <childnode refid="5537" relation="include">
        </childnode>
      </node>
      <node id="5537">
        <label>D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp</label>
        <link refid="d3/d60/EventDispatcher_8hpp_source"/>
      </node>
      <node id="5535">
        <label>D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/CriticalSet.hpp</label>
        <link refid="d5/dd8/CriticalSet_8hpp_source"/>
        <childnode refid="5536" relation="include">
        </childnode>
      </node>
      <node id="5536">
        <label>D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/chat_service/ChatRoom.hpp</label>
        <link refid="d3/df4/ChatRoom_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="dc/d7a/classsamchon_1_1Set" prot="public">samchon::Set</innerclass>
    <innernamespace refid="db/df1/namespacesamchon">samchon</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="db/df1/namespacesamchon" kindref="compound">samchon</ref></highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>O<sp/>=<sp/>std::less&lt;K&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Alloc<sp/>=<sp/>std::allocator&lt;K&gt;&gt;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Set</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::set<sp/>&lt;<sp/>K,<sp/>O,<sp/>Alloc<sp/>&gt;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::set&lt;K,<sp/>O,<sp/>Alloc&gt;<sp/>super;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>super::set;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*explicit<sp/>Set(const<sp/>key_compare&amp;<sp/>comp<sp/>=<sp/>key_compare(),<sp/>const<sp/>allocator_type&amp;<sp/>alloc<sp/>=<sp/>allocator_type())</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>super(comp,<sp/>alloc)<sp/>{};</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>explicit<sp/>Set(const<sp/>allocator_type&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>super(alloc)<sp/>{};</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set(InputIterator<sp/>first,<sp/>InputIterator<sp/>last,<sp/>const<sp/>key_compare&amp;<sp/>comp<sp/>=<sp/>key_compare(),<sp/>const<sp/>allocator_type&amp;<sp/>=<sp/>allocator_type())</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>super(first,<sp/>last,<sp/>comp,<sp/>allocator_type)<sp/>{};</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set(const<sp/>set&amp;<sp/>x)</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>super(x)<sp/>{};</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set(const<sp/>set&amp;<sp/>x,<sp/>const<sp/>allocator_type&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>super(x,<sp/>alloc)<sp/>{};</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set(set&amp;&amp;<sp/>x)</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>super(std::move(x))<sp/>{};</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set(set&amp;&amp;<sp/>x,<sp/>const<sp/>allocator_type&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>super(std::move(x),<sp/>alloc)<sp/>{};</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set(std::initializer_list&lt;value_type&gt;<sp/>il,<sp/>const<sp/>key_compare&amp;<sp/>comp<sp/>=<sp/>key_compare(),<sp/>const<sp/>allocator_type&amp;<sp/>alloc<sp/>=<sp/>allocator_type())</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>super(il,<sp/>comp,<sp/>alloc)<sp/>{};*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>has(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(find(key)<sp/>==<sp/>end());</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="42"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Set.hpp"/>
  </compounddef>
</doxygen>
