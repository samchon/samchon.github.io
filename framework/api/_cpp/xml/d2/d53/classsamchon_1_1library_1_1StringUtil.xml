<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="d2/d53/classsamchon_1_1library_1_1StringUtil" kind="class" language="C++" prot="public">
    <compoundname>samchon::library::StringUtil</compoundname>
    <includes refid="de/d86/StringUtil_8hpp" local="no">StringUtil.hpp</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a10b71ace12a2c3480112a2d5220c7344" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>_Args</declname>
            <defname>_Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto substitute</definition>
        <argsstring>(const std::string &amp;format, const _Ty &amp;val, const _Args &amp;...args) -&gt; std::string</argsstring>
        <name>substitute</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const _Ty &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const _Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Substitutes "{n}" tokens within the specified string with the respective arguments passed in. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to make substitutions in.<linebreak/>
 This string can contain special tokens of the form {n}, where n is a zero based index, that will be replaced with the additional parameters found at that index if specified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Target value to substitute the minimum {n} tokens </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional parameters that can be substituted in the str parameter at each {n} location, where n is an integer (zero based) index value into the varadics of values specified. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New string with all of the {n} tokens replaced with the respective arguments specified. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="54" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1aa49d2e027d2294eb85027b40ff6caaf2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto substitute</definition>
        <argsstring>(const std::string &amp;format, const _Ty &amp;val) -&gt; std::string</argsstring>
        <name>substitute</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const _Ty &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="60" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a8961caeadd001dc6548ddb3456313720" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>_Args</declname>
            <defname>_Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto substituteSQL</definition>
        <argsstring>(const std::string &amp;format, const _Ty &amp;value, const _Args &amp;...args) -&gt; std::string</argsstring>
        <name>substituteSQL</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const _Ty &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const _Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Substitutes "{n}" tokens within the specified sql-string with the respective arguments passed in.<linebreak/>
. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>substituteSQL creates the dynamic sql-statement.<linebreak/>
 Not recommended when the dynamic sql-statement is not only for procedure.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to make substitutions in.<linebreak/>
 This string can contain special tokens of the form {n}, where n is a zero based index, that will be replaced with the additional parameters found at that index if specified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Target value to substitute the minimum {n} tokens </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional parameters that can be substituted in the str parameter at each {n} location, where n is an integer (zero based) index value into the varadics of values specified. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New sql-string with all of the {n} tokens replaced with the respective arguments specified. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="79" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1aae0a1a8d31f0b3d36039c482c3c5078a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto substituteSQL</definition>
        <argsstring>(const std::string &amp;format, const _Ty &amp;value) -&gt; std::string</argsstring>
        <name>substituteSQL</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const _Ty &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="85" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a72e440cb0a94eccf67e587f1f9b69e01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto isNumeric</definition>
        <argsstring>(const std::string &amp;str) -&gt; bool</argsstring>
        <name>isNumeric</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Returns wheter the std::string represents Number or not<linebreak/>
. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Target std::string to check </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether the std::string can be converted to Number or not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="167" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="49" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a4f88716023c43fd5c1daabeb1bf542a8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto toNumber</definition>
        <argsstring>(const std::string &amp;str) -&gt; double</argsstring>
        <name>toNumber</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Number std::string to Number having &apos;,&apos; symbols. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Target std::string you want to convert to Number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number from std::string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="175" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1aa8019302923383f3f9504a1098d481f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto numberFormat</definition>
        <argsstring>(double val, int precision=2) -&gt; std::string</argsstring>
        <name>numberFormat</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a string converted from the number rounded off from specified precision with "," symbols <nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> ex) numberFormat(17151.339, 2) =&gt; 17,151.34</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>A number wants to convert to string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>Target precision of roundoff </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string representing the number with roundoff and "," symbols </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="188" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="69" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a03fae70a0ba48ea48c9d9ca640cc97a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto percentFormat</definition>
        <argsstring>(double val, int precision=2) -&gt; std::string</argsstring>
        <name>percentFormat</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
<para>Returns a percentage string converted from the number rounded off from specified precision with "," symbols<linebreak/>
<nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> ex) percentFormat(11.3391, 1) =&gt; 1,133.9%. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Do not multiply by 100 to the value representing percent </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>A number wants to convert to percentage string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>Target precision of roundoff </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="199" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="109" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a3dedc69355fc312e455cbcbd77fbcbfa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto colorNumberFormat</definition>
        <argsstring>(double value, int precision=2, double delimiter=0.0) -&gt; std::string</argsstring>
        <name>colorNumberFormat</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>2</defval>
        </param>
        <param>
          <type>double</type>
          <declname>delimiter</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Returns a string converted from the number rounded off from specified precision with "," symbols and color tag<linebreak/>
<nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> ex) numberFormat(17151.339, 2) =&gt; &lt;font color=&quot;red&quot;&gt;17,151.34&lt;/font&gt; </para>        </briefdescription>
        <detaileddescription>
<para>Which color would be chosen <itemizedlist>
<listitem><para>Number is positive, color is RED </para></listitem>
<listitem><para>Number is zero (0), color is BLACK </para></listitem>
<listitem><para>Number is negative, color is BLUE</para></listitem>
</itemizedlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>A number wants to convert to colored string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>Target precision of roundoff </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A colored string representing the number with roundoff and "," symbols </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="216" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="116" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a8e5192ffdf676f18e65bccecf461e19d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto colorPercentFormat</definition>
        <argsstring>(double value, int precision=2, double delimiter=0.0) -&gt; std::string</argsstring>
        <name>colorPercentFormat</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>2</defval>
        </param>
        <param>
          <type>double</type>
          <declname>delimiter</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Returns a percentage string converted from the number rounded off from specified precision with "," symbols<linebreak/>
<nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> ex) percentFormat(11.3391, 1) =&gt; 1,133.9%. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Do not multiply by 100 to the value representing percent </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>A number wants to convert to percentage string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>Target precision of roundoff </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="226" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="131" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a29dac75db9cfa9c593ce68da87ddc333" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto trim</definition>
        <argsstring>(const std::string &amp;val, const std::vector&lt; std::string &gt; &amp;delims) -&gt; std::string</argsstring>
        <name>trim</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>delims</declname>
        </param>
        <briefdescription>
<para>Removes all designated characters from the beginning and end of the specified string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string should be trimmed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delims</parametername>
</parameternamelist>
<parameterdescription>
<para>Designated character(s) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Updated string where designated characters was removed from the beginning and end </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a5d697e5a1851ed80cb1e54ed795cf505" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto ltrim</definition>
        <argsstring>(const std::string &amp;val, const std::vector&lt; std::string &gt; &amp;delims) -&gt; std::string</argsstring>
        <name>ltrim</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>delims</declname>
        </param>
        <briefdescription>
<para>Removes all designated characters from the beginning of the specified string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string should be trimmed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delims</parametername>
</parameternamelist>
<parameterdescription>
<para>Designated character(s) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Updated string where designated characters was removed from the beginning </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a93754f9cf1f90d71fdff55d5615614d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto rtrim</definition>
        <argsstring>(const std::string &amp;val, const std::vector&lt; std::string &gt; &amp;delims) -&gt; std::string</argsstring>
        <name>rtrim</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>delims</declname>
        </param>
        <briefdescription>
<para>Removes all designated characters from the end of the specified string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string should be trimmed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delims</parametername>
</parameternamelist>
<parameterdescription>
<para>Designated character(s) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Updated string where designated characters was removed from the end </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1ae9f69d94ee9abfa119f840a87b61b9fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto trim</definition>
        <argsstring>(const std::string &amp;str) -&gt; std::string</argsstring>
        <name>trim</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a8fcd950255a8847e7bb0c7fe00039eac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto ltrim</definition>
        <argsstring>(const std::string &amp;str) -&gt; std::string</argsstring>
        <name>ltrim</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1adccfa54f17987bd23ba2fd329a941287" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto rtrim</definition>
        <argsstring>(const std::string &amp;str) -&gt; std::string</argsstring>
        <name>rtrim</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1adb1317a02071a7b2651d8a8696dd3613" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto trim</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;delim) -&gt; std::string</argsstring>
        <name>trim</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a24064ee5b57f6f699ad89c4a4f109726" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto ltrim</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;delim) -&gt; std::string</argsstring>
        <name>ltrim</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a584a3b3bd830b0d6bfec35aff5e2135b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto rtrim</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;delim) -&gt; std::string</argsstring>
        <name>rtrim</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a2835fca4443c7ac00f40f742561dae64" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto finds</definition>
        <argsstring>(const std::string &amp;str, const std::vector&lt; std::string &gt; &amp;delims, size_t startIndex=0) -&gt; IndexPair&lt; std::string &gt;</argsstring>
        <name>finds</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>delims</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>startIndex</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Finds first occurence in string. </para>        </briefdescription>
        <detaileddescription>
<para>Finds first occurence position of each delim in the string after startIndex and returns the minimum position of them<linebreak/>
<linebreak/>
If startIndex is not specified, then starts from 0.<linebreak/>
If failed to find any substring, returns -1 (std::string::npos)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Target string to find </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delims</parametername>
</parameternamelist>
<parameterdescription>
<para>The substrings of target(str) which to find </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified starting index of find. Default is 0 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pair&lt;size_t := position, string := matched substring&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="285" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="194" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a53c18815998224c9eb13e994b8014273" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto rfinds</definition>
        <argsstring>(const std::string &amp;str, const std::vector&lt; std::string &gt; &amp;delims, size_t endIndex=SIZE_MAX) -&gt; IndexPair&lt; std::string &gt;</argsstring>
        <name>rfinds</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>delims</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>endIndex</declname>
          <defval>SIZE_MAX</defval>
        </param>
        <briefdescription>
<para>Finds last occurence in string. </para>        </briefdescription>
        <detaileddescription>
<para>Finds last occurence position of each delim in the string before endIndex and returns the maximum position of them<linebreak/>
<linebreak/>
If index is not specified, then starts str.size() - 1<linebreak/>
If failed to find any substring, returns -1 (std::string::npos)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Target string to find </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delims</parametername>
</parameternamelist>
<parameterdescription>
<para>The substrings of target(str) which to find </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified starting index of find. Default is str.size() - 1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pair&lt;size_t := position, string := matched substring&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="303" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="200" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1aec2cb61b116c033e61996012569b3570" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto substring</definition>
        <argsstring>(const std::string &amp;str, size_t startIndex, size_t endIndex=SIZE_MAX) -&gt; std::string</argsstring>
        <name>substring</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>endIndex</declname>
          <defval>SIZE_MAX</defval>
        </param>
        <briefdescription>
<para>Generates a substring. </para>        </briefdescription>
        <detaileddescription>
<para>Extracts a string consisting of the character specified by startIndex and all characters up to endIndex - 1 If endIndex is not specified, string::size() will be used instead.<linebreak/>
If endIndex is greater than startIndex, then those will be swapped</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Target string to be applied substring </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first character.<linebreak/>
 If startIndex is greater than endIndex, those will be swapped </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the last character - 1.<linebreak/>
 If not specified, then string::size() will be used instead </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Extracted string by specified index(es) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="321" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="208" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1adbeabc0c8c0c9412bade4c2883745f11" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto between</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;start=&quot;&quot;, const std::string &amp;end=&quot;&quot;) -&gt; std::string</argsstring>
        <name>between</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>start</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>end</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Generates a substring. </para>        </briefdescription>
        <detaileddescription>
<para>Extracts a substring consisting of the characters from specified start to end It&apos;s same with str.substring( ? = (str.find(start) + start.size()), str.find(end, ?) )<linebreak/>
<nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> ex) between(&quot;ABCD[EFGH]IJK&quot;, &quot;[&quot;, &quot;]&quot;) =&gt; &quot;EFGH&quot;<linebreak/>
<linebreak/>
If start is not specified, extracts from begin of the string to end<linebreak/>
If end is not specified, extracts from start to end of the string<linebreak/>
If start and end are all omitted, returns str, itself.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Target string to be applied between </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>A string for separating substring at the front </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>A string for separating substring at the end </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>substring by specified terms </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="341" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="213" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a1c3b69aa2041d6b68723e25ca016c423" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto addTab</definition>
        <argsstring>(const std::string &amp;str, size_t n=1) -&gt; std::string</argsstring>
        <name>addTab</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Adds tab() character to first position of each line. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Target str to add tabs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of tab to be added for each line </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string added multiple tabs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="352" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="218" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1ad3fbbeff10ee7069ad042c83f0e59cd8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto split</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;delim) -&gt; std::vector&lt; std::string &gt;</argsstring>
        <name>split</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
<para>Generates substrings. </para>        </briefdescription>
        <detaileddescription>
<para>Splits a string into an array of substrings by dividing the specified delimiter</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Target string to split </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delim</parametername>
</parameternamelist>
<parameterdescription>
<para>The pattern that specifies where to split this string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of substrings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="363" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="239" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1aacd7d4c198c61e8e8113bb4c5e0eeb76" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto betweens</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;start=&quot;&quot;, const std::string &amp;end=&quot;&quot;) -&gt; std::vector&lt; std::string &gt;</argsstring>
        <name>betweens</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>start</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>end</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Generates substrings. </para>        </briefdescription>
        <detaileddescription>
<para>Splits a string into an array of substrings dividing by specified delimeters of start and end<linebreak/>
It&apos;s the array of substrings adjusted the between<linebreak/>
<linebreak/>
If startStr is omitted, it&apos;s same with the split by endStr not having last item<linebreak/>
If endStr is omitted, it&apos;s same with the split by startStr not having first item<linebreak/>
If startStr and endStar are all omitted, returns {str}</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Target string to split by between </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>A string for separating substring at the front<linebreak/>
 If omitted, it&apos;s same with split(end) not having last item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>A string for separating substring at the end<linebreak/>
 If omitted, it&apos;s same with split(start) not having first item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of substrings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="383" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="249" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1af37b989574a3c0cd468c07e6ca1db998" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto toLowerCase</definition>
        <argsstring>(const std::string &amp;str) -&gt; std::string</argsstring>
        <name>toLowerCase</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Returns a string that all uppercase characters are converted to lowercase<linebreak/>
. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Target string to convert uppercase to lowercase </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string converted to lowercase </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="395" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a23fc795e65cdb7a737a519f279413ed6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto toUpperCase</definition>
        <argsstring>(const std::string &amp;str) -&gt; std::string</argsstring>
        <name>toUpperCase</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a string all lowercase characters are converted to uppercase<linebreak/>
 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Target string to convert lowercase to uppercase </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string converted to uppercase </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="403" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="268" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a4d09deb12feeae8f9e1dfdc279e1a988" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto replaceAll</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;before, const std::string &amp;after) -&gt; std::string</argsstring>
        <name>replaceAll</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>before</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>after</declname>
        </param>
        <briefdescription>
<para>Returns a string specified word is replaced. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Target string to replace </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>Specific word you want to be replaced </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>Specific word you want to replace </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string specified word is replaced </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1ab26736a2f67a072d40f99891c433558d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto replaceAll</definition>
        <argsstring>(const std::string &amp;str, const std::vector&lt; std::pair&lt; std::string, std::string &gt;&gt; &amp;pairs) -&gt; std::string</argsstring>
        <name>replaceAll</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; std::string, std::string &gt;&gt; &amp;</type>
          <declname>pairs</declname>
        </param>
        <briefdescription>
<para>Returns a string specified words are replaced. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Target string to replace </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pairs</parametername>
</parameternamelist>
<parameterdescription>
<para>A specific word&apos;s pairs you want to replace and to be replaced </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string specified words are replaced </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="423" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a7a9c43daa944d804dca3d30738dc0549" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto _substitute</definition>
        <argsstring>(const std::string &amp;format, const _Ty &amp;value) -&gt; std::string</argsstring>
        <name>_substitute</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const _Ty &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="91" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" bodystart="91" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1acb1e3bc586f178b20dad909129d67ae7" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto _substituteSQL</definition>
        <argsstring>(const std::string &amp;format, const _Ty &amp;value) -&gt; std::string</argsstring>
        <name>_substituteSQL</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const _Ty &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="106" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" bodystart="106" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a99a8199b7e2db28d5ffea30d8b4042f5" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto toString</definition>
        <argsstring>(const _Ty &amp;val) -&gt; std::string</argsstring>
        <name>toString</name>
        <param>
          <type>const _Ty &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="126" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" bodystart="126" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1adf5ec085ff0c9baa78ae3483be97c5ee" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>auto</type>
        <definition>auto toString</definition>
        <argsstring>(const WeakString &amp;str) -&gt; std::string</argsstring>
        <name>toString</name>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="133" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="11" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1ab80f4f80539d28478bda6005b7d46185" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto toSQL</definition>
        <argsstring>(const _Ty &amp;val) -&gt; std::string</argsstring>
        <name>toSQL</name>
        <param>
          <type>const _Ty &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="136" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" bodystart="136" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1acc1c0bfd67d5bf989d0e5aceb7dcc9c5" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>auto</type>
        <definition>auto toSQL</definition>
        <argsstring>(const bool &amp;flag) -&gt; std::string</argsstring>
        <name>toSQL</name>
        <param>
          <type>const bool &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="146" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1ace0d15700ffd590b8d9ba7a8ab5fcee9" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>auto</type>
        <definition>auto toSQL</definition>
        <argsstring>(const char &amp;val) -&gt; std::string</argsstring>
        <name>toSQL</name>
        <param>
          <type>const char &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="147" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a6834114b82efc58f5209c2347d57e169" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto toSQL</definition>
        <argsstring>(const std::string &amp;str) -&gt; std::string</argsstring>
        <name>toSQL</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1a8d047f8572ee71ad9884ea94f445abfb" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>auto</type>
        <definition>auto toSQL</definition>
        <argsstring>(const WeakString &amp;str) -&gt; std::string</argsstring>
        <name>toSQL</name>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="149" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="32" bodyend="38"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d2/d53/classsamchon_1_1library_1_1StringUtil_1ae891715aaa3077b50c4bb9a5867f9732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>auto</type>
        <definition>auto toSQL</definition>
        <argsstring>(const string &amp;str) -&gt; string</argsstring>
        <name>toSQL</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" line="25" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.cpp" bodystart="25" bodyend="31"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Utility class for string. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="d2/d53/classsamchon_1_1library_1_1StringUtil" kindref="compound">StringUtil</ref> is an utility class providing lots of static methods for std::string. </para><para>There are two methods to strength std::string to have addictional uility methods like trim and split. The way of first is to make std::string class inheriting from std::string. The second is to make <ref refid="d2/d53/classsamchon_1_1library_1_1StringUtil" kindref="compound">StringUtil</ref> class having static methods. </para><para>But those methods have problems. std::string class violates standard and <ref refid="d2/d53/classsamchon_1_1library_1_1StringUtil" kindref="compound">StringUtil</ref> class violates principle of Object-Oriented Design. For the present, I&apos;ve made the <ref refid="d2/d53/classsamchon_1_1library_1_1StringUtil" kindref="compound">StringUtil</ref> class, but if you have a good opinion about the issue, please write your opinion on my github. </para><para><image type="html" name="library_string.png"></image>
 <image type="latex" name="library_string.png"></image>
</para><para><simplesect kind="see"><para>library::WeakString </para></simplesect>
<simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" line="37" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/StringUtil.hpp" bodystart="36" bodyend="425"/>
    <listofallmembers>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a7a9c43daa944d804dca3d30738dc0549" prot="protected" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>_substitute</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1acb1e3bc586f178b20dad909129d67ae7" prot="protected" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>_substituteSQL</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a1c3b69aa2041d6b68723e25ca016c423" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>addTab</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1adbeabc0c8c0c9412bade4c2883745f11" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>between</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1aacd7d4c198c61e8e8113bb4c5e0eeb76" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>betweens</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a3dedc69355fc312e455cbcbd77fbcbfa" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>colorNumberFormat</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a8e5192ffdf676f18e65bccecf461e19d" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>colorPercentFormat</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a2835fca4443c7ac00f40f742561dae64" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>finds</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a72e440cb0a94eccf67e587f1f9b69e01" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>isNumeric</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a5d697e5a1851ed80cb1e54ed795cf505" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>ltrim</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a8fcd950255a8847e7bb0c7fe00039eac" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>ltrim</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a24064ee5b57f6f699ad89c4a4f109726" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>ltrim</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1aa8019302923383f3f9504a1098d481f1" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>numberFormat</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a03fae70a0ba48ea48c9d9ca640cc97a2" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>percentFormat</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a4d09deb12feeae8f9e1dfdc279e1a988" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>replaceAll</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1ab26736a2f67a072d40f99891c433558d" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>replaceAll</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a53c18815998224c9eb13e994b8014273" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>rfinds</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a93754f9cf1f90d71fdff55d5615614d5" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>rtrim</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1adccfa54f17987bd23ba2fd329a941287" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>rtrim</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a584a3b3bd830b0d6bfec35aff5e2135b" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>rtrim</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1ad3fbbeff10ee7069ad042c83f0e59cd8" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>split</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a10b71ace12a2c3480112a2d5220c7344" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>substitute</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1aa49d2e027d2294eb85027b40ff6caaf2" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>substitute</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a8961caeadd001dc6548ddb3456313720" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>substituteSQL</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1aae0a1a8d31f0b3d36039c482c3c5078a" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>substituteSQL</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1aec2cb61b116c033e61996012569b3570" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>substring</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1af37b989574a3c0cd468c07e6ca1db998" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>toLowerCase</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a4f88716023c43fd5c1daabeb1bf542a8" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>toNumber</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1ab80f4f80539d28478bda6005b7d46185" prot="protected" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>toSQL</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1acc1c0bfd67d5bf989d0e5aceb7dcc9c5" prot="protected" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>toSQL</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1ace0d15700ffd590b8d9ba7a8ab5fcee9" prot="protected" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>toSQL</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a6834114b82efc58f5209c2347d57e169" prot="protected" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>toSQL</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a8d047f8572ee71ad9884ea94f445abfb" prot="protected" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>toSQL</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1ae891715aaa3077b50c4bb9a5867f9732" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>toSQL</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a99a8199b7e2db28d5ffea30d8b4042f5" prot="protected" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>toString</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1adf5ec085ff0c9baa78ae3483be97c5ee" prot="protected" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>toString</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a23fc795e65cdb7a737a519f279413ed6" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>toUpperCase</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1a29dac75db9cfa9c593ce68da87ddc333" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>trim</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1ae9f69d94ee9abfa119f840a87b61b9fb" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>trim</name></member>
      <member refid="d2/d53/classsamchon_1_1library_1_1StringUtil_1adb1317a02071a7b2651d8a8696dd3613" prot="public" virt="non-virtual"><scope>samchon::library::StringUtil</scope><name>trim</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
