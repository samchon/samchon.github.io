<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kind="class" language="C++" prot="public">
    <compoundname>samchon::library::EventDispatcher</compoundname>
    <derivedcompoundref refid="df/d30/classProcess" prot="public" virt="non-virtual">Process</derivedcompoundref>
    <includes refid="d3/d60/EventDispatcher_8hpp" local="no">EventDispatcher.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1ab9471f5d11708fcaca8dd659477371cc" prot="private" static="no" mutable="no">
        <type>std::map&lt; int, std::set&lt; void(*)(std::shared_ptr&lt; <ref refid="d2/d56/classsamchon_1_1library_1_1Event" kindref="compound">Event</ref> &gt;)&gt; &gt;</type>
        <definition>std::map&lt;int, std::set&lt;void(*)(std::shared_ptr&lt;Event&gt;)&gt; &gt; eventSetMap</definition>
        <argsstring></argsstring>
        <name>eventSetMap</name>
        <briefdescription>
<para>A container storing listeners. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp" line="55" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1a60615df8c23ca3f9f1a9bfd1dfdceaca" prot="private" static="no" mutable="no">
        <type><ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref></type>
        <definition>RWMutex mtx</definition>
        <argsstring></argsstring>
        <name>mtx</name>
        <briefdescription>
<para>A rw_mutex for concurrency. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp" line="60" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1a52d4092d767ddefed39d4445d3037910" prot="private" static="no" mutable="no">
        <type><ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref></type>
        <definition>Semaphore semaphore</definition>
        <argsstring></argsstring>
        <name>semaphore</name>
        <briefdescription>
<para>A semaphore for restricting thread size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp" line="65" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1ac34b07e6e793f0468642614b608c82df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EventDispatcher</definition>
        <argsstring>()</argsstring>
        <name>EventDispatcher</name>
        <briefdescription>
<para>Default Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp" line="74" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.cpp" bodystart="24" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1af5957f79c8f3cf3146f6c3d2f7f348a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EventDispatcher</definition>
        <argsstring>(const EventDispatcher &amp;eventDispatcher)</argsstring>
        <name>EventDispatcher</name>
        <param>
          <type>const <ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kindref="compound">EventDispatcher</ref> &amp;</type>
          <declname>eventDispatcher</declname>
        </param>
        <briefdescription>
<para>Copy Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Copying an <ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kindref="compound">EventDispatcher</ref> instance does not copy the event listeners attached to it. (If your newly created node needs an event listener, you must attach the listener after creating the node.)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eventDispatcher</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp" line="85" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.cpp" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1a036acebfa8ed33bdcf278ed045a65598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EventDispatcher</definition>
        <argsstring>(EventDispatcher &amp;&amp;eventDispatcher)</argsstring>
        <name>EventDispatcher</name>
        <param>
          <type><ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kindref="compound">EventDispatcher</ref> &amp;&amp;</type>
          <declname>eventDispatcher</declname>
        </param>
        <briefdescription>
<para>Move Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eventDispatcher</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to move </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp" line="92" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.cpp" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1a0a57344cbd433f4cf551d63fdc5df14d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual ~EventDispatcher</definition>
        <argsstring>()=default</argsstring>
        <name>~EventDispatcher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1a7669bd77834ce9067aa20761c1b288e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addEventListener</definition>
        <argsstring>(int, void(*listener)(std::shared_ptr&lt; Event &gt;))</argsstring>
        <name>addEventListener</name>
        <param>
          <type>int</type>
          <defname>type</defname>
        </param>
        <param>
          <type>void(*)(std::shared_ptr&lt; <ref refid="d2/d56/classsamchon_1_1library_1_1Event" kindref="compound">Event</ref> &gt;)</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Register an event listener. </para>        </briefdescription>
        <detaileddescription>
<para>Registers an event listener object with an <ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kindref="compound">EventDispatcher</ref> object so that the listener receives notification of an event.</para><para><simplesect kind="warning"><para>Copying an <ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kindref="compound">EventDispatcher</ref> instance does not copy the event listeners attached to it. (If your newly created node needs an event listener, you must attach the listener after creating the node.) However, if you move an <ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kindref="compound">EventDispatcher</ref> instance, the event listeners attached to it move along with it.</para></simplesect>
<simplesect kind="warning"><para>If you no longer need an event listener, remove it by calling removeEventListener, or <ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kindref="compound">EventDispatcher</ref> already try to send events to the no longer needed listener and it can cause some confliction.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of event. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>The listener function processes the event. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp" line="116" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.cpp" bodystart="39" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1a13ce90ba499363aa2221ccfee6d7005a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void removeEventListener</definition>
        <argsstring>(int, void(*listener)(std::shared_ptr&lt; Event &gt;))</argsstring>
        <name>removeEventListener</name>
        <param>
          <type>int</type>
          <defname>type</defname>
        </param>
        <param>
          <type>void(*)(std::shared_ptr&lt; <ref refid="d2/d56/classsamchon_1_1library_1_1Event" kindref="compound">Event</ref> &gt;)</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Remove a registered event listener. </para>        </briefdescription>
        <detaileddescription>
<para>Removes a listener from the <ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kindref="compound">EventDispatcher</ref> object. If there is no matching listener registered with the <ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kindref="compound">EventDispatcher</ref> object, a call to this method has no effect</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of event. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>The listener function to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp" line="128" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.cpp" bodystart="46" bodyend="52"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1aa4c766e8b080aef52d23f9c27f790732" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto dispatchEvent</definition>
        <argsstring>(std::shared_ptr&lt; Event &gt;) -&gt; bool</argsstring>
        <name>dispatchEvent</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d2/d56/classsamchon_1_1library_1_1Event" kindref="compound">Event</ref> &gt;</type>
        </param>
        <briefdescription>
<para>Dispatches an event to all listeners. </para>        </briefdescription>
        <detaileddescription>
<para>Dispatches an event into the event flow in the background. The <ref refid="d2/d56/classsamchon_1_1library_1_1Event_1a2b08849622c04e621a15d6add0e98fc6" kindref="member">Event::source</ref> is the <ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kindref="compound">EventDispatcher</ref> object upon which the dispatchEvent. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="d2/d56/classsamchon_1_1library_1_1Event" kindref="compound">Event</ref> object that is dispatched into the event flow. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether there&apos;s some listener to listen the event </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp" line="145" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.cpp" bodystart="57" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1a88ccd2bfaac145e3190bd3a13e6f48dc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto dispatchProgressEvent</definition>
        <argsstring>(size_t x, size_t size) -&gt; bool</argsstring>
        <name>dispatchProgressEvent</name>
        <param>
          <type>size_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Convenient method of dispatching a progress event. </para>        </briefdescription>
        <detaileddescription>
<para>Dispatches a progress event into the event flow in the background The <ref refid="d2/d56/classsamchon_1_1library_1_1Event_1a2b08849622c04e621a15d6add0e98fc6" kindref="member">Event::source</ref> is the <ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kindref="compound">EventDispatcher</ref> object upon with the dispatchProgressEvent</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of current progress </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of total progress </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether there&apos;s some listener to listen the progress event</para></simplesect>
<simplesect kind="see"><para><ref refid="de/d4a/classsamchon_1_1library_1_1ProgressEvent" kindref="compound">ProgressEvent</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1aa4c766e8b080aef52d23f9c27f790732" kindref="member">EventDispatcher::dispatchEvent</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp" line="161" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.cpp" bodystart="77" bodyend="82"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract class for dispatching <ref refid="d2/d56/classsamchon_1_1library_1_1Event" kindref="compound">Event</ref>. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kindref="compound">EventDispatcher</ref> is the base class for all classes that dispatch events. </para><para>All the events are sent asynchronously. To avoid from creating tooo enourmouse threads dispatching events, all event sending processes will acuiqre a semaphore. The default permitted size of the semaphore is 2. </para><para><itemizedlist>
<listitem><para>Number of thread pools used to sending events is 2.</para></listitem>
</itemizedlist>
<image type="html" name="library_event.png"></image>
 <image type="latex" name="library_event.png"></image>
</para><para><simplesect kind="par"><title>Example source</title><para><programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samchon/library/EventDispatcher.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samchon/library/Event.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samchon/library/ProgressEvent.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>comment(lib,<sp/>&quot;x64/Debug/SamchonFramework.lib&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>comment(lib,<sp/>&quot;x64/Release/SamchonFramework.lib&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>comment(lib,<sp/>&quot;Debug/SamchonFramework.lib&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>comment(lib,<sp/>&quot;Release/SamchonFramework.lib&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Process</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kindref="compound">EventDispatcher</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>Process()</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run()</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1aa4c766e8b080aef52d23f9c27f790732" kindref="member">dispatchEvent</ref>(shared_ptr&lt;Event&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classsamchon_1_1library_1_1Event" kindref="compound">Event</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>Event::ACTIVATE)));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100;<sp/>i++)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this_thread::sleep_for(chrono::seconds(1));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1aa4c766e8b080aef52d23f9c27f790732" kindref="member">dispatchEvent</ref>(shared_ptr&lt;Event&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d4a/classsamchon_1_1library_1_1ProgressEvent" kindref="compound">ProgressEvent</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>i<sp/>+<sp/>1,<sp/>100)));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1aa4c766e8b080aef52d23f9c27f790732" kindref="member">dispatchEvent</ref>(shared_ptr&lt;Event&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classsamchon_1_1library_1_1Event" kindref="compound">Event</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>Event::COMPLETE)));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleActivate(shared_ptr&lt;Event&gt;<sp/>event)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Activated&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleComplete(shared_ptr&lt;Event&gt;<sp/>event)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Completed&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleProgress(shared_ptr&lt;Event&gt;<sp/>event)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>dynamic_pointer_cast&lt;ProgressEvent&gt;(event)-&gt;getPercent()<sp/>*<sp/>100.0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>Process<sp/>process;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>process.addEventListener(Event::ACTIVATE,<sp/>handleActivate);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>process.addEventListener(Event::COMPLETE,<sp/>handleComplete);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>process.addEventListener(ProgressEvent::PROGRESS,<sp/>handleProgress);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>process.run();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>system(</highlight><highlight class="stringliteral">&quot;pause&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="note"><para></para></simplesect>
<ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kindref="compound">EventDispatcher</ref> is a candidate to be depreciated. </para><para>Since C++11, calling member method of a class by a new thread passing by static method and using void pointer are recommeded to avoid. As the reason, using <emphasis>std::thread</emphasis> and <emphasis>std::bind</emphasis> will be better. </para><para><itemizedlist>
<listitem><para>std::thread: <ulink url="http://www.cplusplus.com/reference/thread/thread/">http://www.cplusplus.com/reference/thread/thread/</ulink> </para></listitem>
<listitem><para>std::bind: <ulink url="http://www.cplusplus.com/reference/functional/bind/">http://www.cplusplus.com/reference/functional/bind/</ulink></para></listitem>
</itemizedlist>
<simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="1578">
        <label>EventDispatcher</label>
        <link refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher"/>
        <childnode refid="1579" relation="usage">
          <edgelabel>semaphore</edgelabel>
        </childnode>
        <childnode refid="1580" relation="usage">
          <edgelabel>mtx</edgelabel>
        </childnode>
      </node>
      <node id="1579">
        <label>Semaphore</label>
        <link refid="d9/d88/classsamchon_1_1library_1_1Semaphore"/>
      </node>
      <node id="1580">
        <label>RWMutex</label>
        <link refid="df/d85/classsamchon_1_1library_1_1RWMutex"/>
      </node>
    </collaborationgraph>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp" line="49" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/EventDispatcher.hpp" bodystart="48" bodyend="162"/>
    <listofallmembers>
      <member refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1a7669bd77834ce9067aa20761c1b288e1" prot="public" virt="non-virtual"><scope>samchon::library::EventDispatcher</scope><name>addEventListener</name></member>
      <member refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1aa4c766e8b080aef52d23f9c27f790732" prot="protected" virt="non-virtual"><scope>samchon::library::EventDispatcher</scope><name>dispatchEvent</name></member>
      <member refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1a88ccd2bfaac145e3190bd3a13e6f48dc" prot="protected" virt="non-virtual"><scope>samchon::library::EventDispatcher</scope><name>dispatchProgressEvent</name></member>
      <member refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1ac34b07e6e793f0468642614b608c82df" prot="public" virt="non-virtual"><scope>samchon::library::EventDispatcher</scope><name>EventDispatcher</name></member>
      <member refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1af5957f79c8f3cf3146f6c3d2f7f348a2" prot="public" virt="non-virtual"><scope>samchon::library::EventDispatcher</scope><name>EventDispatcher</name></member>
      <member refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1a036acebfa8ed33bdcf278ed045a65598" prot="public" virt="non-virtual"><scope>samchon::library::EventDispatcher</scope><name>EventDispatcher</name></member>
      <member refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1ab9471f5d11708fcaca8dd659477371cc" prot="private" virt="non-virtual"><scope>samchon::library::EventDispatcher</scope><name>eventSetMap</name></member>
      <member refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1a60615df8c23ca3f9f1a9bfd1dfdceaca" prot="private" virt="non-virtual"><scope>samchon::library::EventDispatcher</scope><name>mtx</name></member>
      <member refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1a13ce90ba499363aa2221ccfee6d7005a" prot="public" virt="non-virtual"><scope>samchon::library::EventDispatcher</scope><name>removeEventListener</name></member>
      <member refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1a52d4092d767ddefed39d4445d3037910" prot="private" virt="non-virtual"><scope>samchon::library::EventDispatcher</scope><name>semaphore</name></member>
      <member refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher_1a0a57344cbd433f4cf551d63fdc5df14d" prot="public" virt="virtual"><scope>samchon::library::EventDispatcher</scope><name>~EventDispatcher</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
