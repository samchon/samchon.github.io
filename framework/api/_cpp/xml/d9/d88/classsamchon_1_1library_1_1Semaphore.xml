<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="d9/d88/classsamchon_1_1library_1_1Semaphore" kind="class" language="C++" prot="public">
    <compoundname>samchon::library::Semaphore</compoundname>
    <includes refid="d1/da0/Semaphore_8hpp" local="no">Semaphore.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d9/d88/classsamchon_1_1library_1_1Semaphore_1a5f31775800bbb46b35b5791def1f3acc" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <briefdescription>
<para>The size. </para>        </briefdescription>
        <detaileddescription>
<para>Permitted size of the semaphore </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" line="58" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d88/classsamchon_1_1library_1_1Semaphore_1aa9c37688bb520b657becb1b3fedc3f7e" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t acquired</definition>
        <argsstring></argsstring>
        <name>acquired</name>
        <briefdescription>
<para>Acquired count. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" line="66" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d88/classsamchon_1_1library_1_1Semaphore_1adc38842c4fbd6b47ce69a11e2e1a879e" prot="private" static="no" mutable="no">
        <type>std::mutex *</type>
        <definition>std::mutex* countMtx</definition>
        <argsstring></argsstring>
        <name>countMtx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" line="67" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d88/classsamchon_1_1library_1_1Semaphore_1a5dc2368b2f136cd727edb6f927ceb118" prot="private" static="no" mutable="no">
        <type>std::mutex *</type>
        <definition>std::mutex* mtx</definition>
        <argsstring></argsstring>
        <name>mtx</name>
        <briefdescription>
<para>Locker. </para>        </briefdescription>
        <detaileddescription>
<para>Manages lock and unlock of the semaphore </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" line="73" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d9/d88/classsamchon_1_1library_1_1Semaphore_1ae2375b90c0e9df0eb8767576de6d7143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Semaphore</definition>
        <argsstring>(size_t=2)</argsstring>
        <name>Semaphore</name>
        <param>
          <type>size_t</type>
          <defname>size</defname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the semaphore to permit </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" line="81" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.cpp" bodystart="12" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="d9/d88/classsamchon_1_1library_1_1Semaphore_1a5e0394d4ca6109ccb52b3c1e5cf6c9b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~Semaphore</definition>
        <argsstring>()</argsstring>
        <name>~Semaphore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" line="82" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.cpp" bodystart="20" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="d9/d88/classsamchon_1_1library_1_1Semaphore_1ab4aed2da9cffbb03ae733caa5c410a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setSize</definition>
        <argsstring>(size_t)</argsstring>
        <name>setSize</name>
        <param>
          <type>size_t</type>
          <defname>val</defname>
        </param>
        <briefdescription>
<para>Set size. </para>        </briefdescription>
        <detaileddescription>
<para>Set permitted size of the semaphore. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" line="88" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.cpp" bodystart="26" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="d9/d88/classsamchon_1_1library_1_1Semaphore_1ac4dde158d6dd302ea028acb582e9b67a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto size</definition>
        <argsstring>() const  -&gt; size_t</argsstring>
        <name>size</name>
        <briefdescription>
<para>Get size. </para>        </briefdescription>
        <detaileddescription>
<para>Returns size which means the permitted count of the semaphore</para><para><simplesect kind="return"><para>The size of semaphore </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" line="99" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.cpp" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="d9/d88/classsamchon_1_1library_1_1Semaphore_1af81ec31c36c301f9cf7ad253af4a84eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto acquiredSize</definition>
        <argsstring>() const  -&gt; size_t</argsstring>
        <name>acquiredSize</name>
        <briefdescription>
<para>Get acquired size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" line="104" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.cpp" bodystart="40" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="d9/d88/classsamchon_1_1library_1_1Semaphore_1af9f5b35a212d21af601a8213ed325871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acquire</definition>
        <argsstring>()</argsstring>
        <name>acquire</name>
        <briefdescription>
<para>Acquire admission. </para>        </briefdescription>
        <detaileddescription>
<para>Acquires an admission and increases count of admission by 1. </para><para>If the count is over permitted size, wait until other admissions to be released. </para><para><itemizedlist>
<listitem><para>Lock on mutex </para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" line="117" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.cpp" bodystart="50" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="d9/d88/classsamchon_1_1library_1_1Semaphore_1a817ad3a62887b5234c3dd98345a16617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto tryAcquire</definition>
        <argsstring>() -&gt; bool</argsstring>
        <name>tryAcquire</name>
        <briefdescription>
<para>Try to acquire admission. </para>        </briefdescription>
        <detaileddescription>
<para>If admission count is below the permitted size, acquire admission and increase the count by 1 and return true which means succeded to get admission. </para><para><itemizedlist>
<listitem><para>If the count is matched to the permitted size, lock the mutex</para></listitem>
</itemizedlist>
</para><para>Else, do not acquire admission and return false which means failed to get admmission. </para><para><simplesect kind="return"><para>Whether succeded to acquire an admission or not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" line="132" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.cpp" bodystart="60" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="d9/d88/classsamchon_1_1library_1_1Semaphore_1a23b477d0e2d399f75d585d154c346591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void release</definition>
        <argsstring>()</argsstring>
        <name>release</name>
        <briefdescription>
<para>Release an admission. </para>        </briefdescription>
        <detaileddescription>
<para>Releases an admission what you&apos;ve acquired. If the admission count was over the limited size, unlock the mutex. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" line="141" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.cpp" bodystart="75" bodyend="81"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A semaphore. </para>    </briefdescription>
    <detaileddescription>
<para>In computer science, particularly in operating systems, a semaphore is a variable or abstract data type that is used for controlling access, by multiple processes, to a common resource in a concurrent system such as a multiprogramming operating system. </para><para>A trivial semaphore is a plain variable that is changed (for example, incremented or decremented, or toggled) depending on programmer-defined conditions. The variable is then used as a condition to control access to some system resource. </para><para>A useful way to think of a semaphore as used in the real-world systems is as a record of how many units of a particular resource are available, coupled with operations to safely (i.e., without race conditions) adjust that record as units are required or become free, and, if necessary, wait until a unit of the resource becomes available. Semaphores are a useful tool in the prevention of race conditions; however, their use is by no means a guarantee that a program is free from these problems. Semaphores which allow an arbitrary resource count are called counting semaphores, while semaphores which are restricted to the values 0 and 1 (or locked/unlocked, unavailable/available) are called binary semaphores </para><para><itemizedlist>
<listitem><para>Categorized in binary semaphore</para></listitem>
</itemizedlist>
</para><para>Referenced Wediapedia </para><para><itemizedlist>
<listitem><para><ulink url="https://en.wikipedia.org/wiki/Semaphore_(programming)">https://en.wikipedia.org/wiki/Semaphore_(programming)</ulink></para></listitem>
</itemizedlist>
<image type="html" name="library_critical_section.png"></image>
 <image type="latex" name="library_critical_section.png"></image>
</para><para><simplesect kind="note"><para></para></simplesect>
Of course, semaphore is already defined in linux C and MFC in Window. But it is dependent on each operating system, so that cannot be compiled in another OS with those semaphores. There&apos;s not a class like semaphore in STL yet. It&apos;s the reason why <ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref> is provided. </para><para>As that reason, if STL supports the semaphore in near future, the <ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref> can be depreciated. </para><para><simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" line="52" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Semaphore.hpp" bodystart="51" bodyend="142"/>
    <listofallmembers>
      <member refid="d9/d88/classsamchon_1_1library_1_1Semaphore_1af9f5b35a212d21af601a8213ed325871" prot="public" virt="non-virtual"><scope>samchon::library::Semaphore</scope><name>acquire</name></member>
      <member refid="d9/d88/classsamchon_1_1library_1_1Semaphore_1aa9c37688bb520b657becb1b3fedc3f7e" prot="private" virt="non-virtual"><scope>samchon::library::Semaphore</scope><name>acquired</name></member>
      <member refid="d9/d88/classsamchon_1_1library_1_1Semaphore_1af81ec31c36c301f9cf7ad253af4a84eb" prot="public" virt="non-virtual"><scope>samchon::library::Semaphore</scope><name>acquiredSize</name></member>
      <member refid="d9/d88/classsamchon_1_1library_1_1Semaphore_1adc38842c4fbd6b47ce69a11e2e1a879e" prot="private" virt="non-virtual"><scope>samchon::library::Semaphore</scope><name>countMtx</name></member>
      <member refid="d9/d88/classsamchon_1_1library_1_1Semaphore_1a5dc2368b2f136cd727edb6f927ceb118" prot="private" virt="non-virtual"><scope>samchon::library::Semaphore</scope><name>mtx</name></member>
      <member refid="d9/d88/classsamchon_1_1library_1_1Semaphore_1a23b477d0e2d399f75d585d154c346591" prot="public" virt="non-virtual"><scope>samchon::library::Semaphore</scope><name>release</name></member>
      <member refid="d9/d88/classsamchon_1_1library_1_1Semaphore_1ae2375b90c0e9df0eb8767576de6d7143" prot="public" virt="non-virtual"><scope>samchon::library::Semaphore</scope><name>Semaphore</name></member>
      <member refid="d9/d88/classsamchon_1_1library_1_1Semaphore_1ab4aed2da9cffbb03ae733caa5c410a33" prot="public" virt="non-virtual"><scope>samchon::library::Semaphore</scope><name>setSize</name></member>
      <member refid="d9/d88/classsamchon_1_1library_1_1Semaphore_1ac4dde158d6dd302ea028acb582e9b67a" prot="public" virt="non-virtual"><scope>samchon::library::Semaphore</scope><name>size</name></member>
      <member refid="d9/d88/classsamchon_1_1library_1_1Semaphore_1a5f31775800bbb46b35b5791def1f3acc" prot="private" virt="non-virtual"><scope>samchon::library::Semaphore</scope><name>size_</name></member>
      <member refid="d9/d88/classsamchon_1_1library_1_1Semaphore_1a817ad3a62887b5234c3dd98345a16617" prot="public" virt="non-virtual"><scope>samchon::library::Semaphore</scope><name>tryAcquire</name></member>
      <member refid="d9/d88/classsamchon_1_1library_1_1Semaphore_1a5e0394d4ca6109ccb52b3c1e5cf6c9b5" prot="public" virt="non-virtual"><scope>samchon::library::Semaphore</scope><name>~Semaphore</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
