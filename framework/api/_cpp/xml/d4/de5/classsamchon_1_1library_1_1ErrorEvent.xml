<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="d4/de5/classsamchon_1_1library_1_1ErrorEvent" kind="class" language="C++" prot="public">
    <compoundname>samchon::library::ErrorEvent</compoundname>
    <basecompoundref refid="d2/d56/classsamchon_1_1library_1_1Event" prot="public" virt="non-virtual">Event</basecompoundref>
    <includes refid="d6/df0/ErrorEvent_8hpp" local="no">ErrorEvent.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1a4029f33800c86a70c6257338ef75c3cd" prot="public" static="no">
        <name>@1</name>
        <enumvalue id="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1a4029f33800c86a70c6257338ef75c3cda2fd6f336d08340583bd620a7f5694c90" prot="public">
          <name>ERROR</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/ErrorEvent.hpp" line="24" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/ErrorEvent.hpp" bodystart="23" bodyend="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1a3cf8f3fa94653642c64632b03b9e889c" prot="private" static="no">
        <name>@2</name>
        <enumvalue id="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1a3cf8f3fa94653642c64632b03b9e889ca9a25989a7678e52c9900c88a81fb18d3" prot="private">
          <name>ACTIVATE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1a3cf8f3fa94653642c64632b03b9e889ca00a900c9df90c74f75004b3dc04f173d" prot="private">
          <name>COMPLETE</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1a3cf8f3fa94653642c64632b03b9e889ca4e9ac82e8594184cb2fb8a4ef86df12d" prot="private">
          <name>REMOVED</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/ErrorEvent.hpp" line="30" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/ErrorEvent.hpp" bodystart="29" bodyend="34"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1a36bd74109f547f7f8198faf5a12d2879" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string message</definition>
        <argsstring></argsstring>
        <name>message</name>
        <briefdescription>
<para>Error message. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/ErrorEvent.hpp" line="40" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/ErrorEvent.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1a0f2d1ea2e59d299f3cee7a8d841e4a6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ErrorEvent</definition>
        <argsstring>(EventDispatcher *, const std::string &amp;)</argsstring>
        <name>ErrorEvent</name>
        <param>
          <type><ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kindref="compound">EventDispatcher</ref> *</type>
        </param>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
<para>Construct from source and error-id. </para>        </briefdescription>
        <detaileddescription>
<para>The event object owns its source and type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Source of the event; who made the event </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>An error-id </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/ErrorEvent.hpp" line="50" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/ErrorEvent.cpp" bodystart="7" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1a1db35156db6064bd187093e25065b48c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual ~ErrorEvent</definition>
        <argsstring>()=default</argsstring>
        <name>~ErrorEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/ErrorEvent.hpp" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1ae2d9fd6693ad0e915e8cc1883429629e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto getMessage</definition>
        <argsstring>() const  -&gt; std::string</argsstring>
        <name>getMessage</name>
        <briefdescription>
<para>Get error-id. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/ErrorEvent.hpp" line="56" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/ErrorEvent.cpp" bodystart="12" bodyend="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="d2/d56/classsamchon_1_1library_1_1Event" kindref="compound">Event</ref> representing an error. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title>[Inherited]</title><para></para></simplesect>
The <ref refid="d2/d56/classsamchon_1_1library_1_1Event" kindref="compound">Event</ref> class is used as the base class for the creation of <ref refid="d2/d56/classsamchon_1_1library_1_1Event" kindref="compound">Event</ref> objects, which are passed as parameters to event listeners when an event occurs. </para><para>The properties of the <ref refid="d2/d56/classsamchon_1_1library_1_1Event" kindref="compound">Event</ref> class carry basic information about an event, such as the event&apos;s type or source (who made the event) of the event. </para><para>For many events, such as the events represented by the <ref refid="d2/d56/classsamchon_1_1library_1_1Event" kindref="compound">Event</ref> class constants, this basic information is sufficient. Other events, however, may require more detailed information. </para><para><image type="html" name="library_event.png"></image>
 <image type="latex" name="library_event.png"></image>
</para><para><simplesect kind="par"><title>Example source</title><para><programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samchon/library/EventDispatcher.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samchon/library/Event.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samchon/library/ProgressEvent.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>comment(lib,<sp/>&quot;x64/Debug/SamchonFramework.lib&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>comment(lib,<sp/>&quot;x64/Release/SamchonFramework.lib&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>comment(lib,<sp/>&quot;Debug/SamchonFramework.lib&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>comment(lib,<sp/>&quot;Release/SamchonFramework.lib&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Process</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kindref="compound">EventDispatcher</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>Process()</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run()</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dispatchEvent(shared_ptr&lt;Event&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classsamchon_1_1library_1_1Event_1ab49cb3d2b05d331fa655ba5e8a2fd543" kindref="member">Event</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>Event::ACTIVATE)));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100;<sp/>i++)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this_thread::sleep_for(chrono::seconds(1));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dispatchEvent(shared_ptr&lt;Event&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d4a/classsamchon_1_1library_1_1ProgressEvent" kindref="compound">ProgressEvent</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>i<sp/>+<sp/>1,<sp/>100)));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dispatchEvent(shared_ptr&lt;Event&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d56/classsamchon_1_1library_1_1Event_1ab49cb3d2b05d331fa655ba5e8a2fd543" kindref="member">Event</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>Event::COMPLETE)));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleActivate(shared_ptr&lt;Event&gt;<sp/>event)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Activated&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleComplete(shared_ptr&lt;Event&gt;<sp/>event)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Completed&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleProgress(shared_ptr&lt;Event&gt;<sp/>event)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>dynamic_pointer_cast&lt;ProgressEvent&gt;(event)-&gt;getPercent()<sp/>*<sp/>100.0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>Process<sp/>process;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>process.addEventListener(Event::ACTIVATE,<sp/>handleActivate);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>process.addEventListener(Event::COMPLETE,<sp/>handleComplete);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>process.addEventListener(ProgressEvent::PROGRESS,<sp/>handleProgress);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>process.run();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>system(</highlight><highlight class="stringliteral">&quot;pause&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="note"><para></para></simplesect>
<ref refid="d2/d56/classsamchon_1_1library_1_1Event" kindref="compound">Event</ref> is a candidate to be depreciated. </para><para>Since C++11, calling member method of a class by a new thread passing by static method and using void pointer are recommeded to avoid. As the reason, using <emphasis>std::thread</emphasis> and <emphasis>std::bind will</emphasis> be better. </para><para><itemizedlist>
<listitem><para>std::thread: <ulink url="http://www.cplusplus.com/reference/thread/thread/">http://www.cplusplus.com/reference/thread/thread/</ulink> </para></listitem>
<listitem><para>std::bind: <ulink url="http://www.cplusplus.com/reference/functional/bind/">http://www.cplusplus.com/reference/functional/bind/</ulink></para></listitem>
</itemizedlist>
<simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1564">
        <label>Event</label>
        <link refid="d2/d56/classsamchon_1_1library_1_1Event"/>
      </node>
      <node id="1563">
        <label>ErrorEvent</label>
        <link refid="d4/de5/classsamchon_1_1library_1_1ErrorEvent"/>
        <childnode refid="1564" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1566">
        <label>Event</label>
        <link refid="d2/d56/classsamchon_1_1library_1_1Event"/>
        <childnode refid="1567" relation="usage">
          <edgelabel>source</edgelabel>
        </childnode>
      </node>
      <node id="1565">
        <label>ErrorEvent</label>
        <link refid="d4/de5/classsamchon_1_1library_1_1ErrorEvent"/>
        <childnode refid="1566" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1567">
        <label>EventDispatcher</label>
        <link refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher"/>
        <childnode refid="1568" relation="usage">
          <edgelabel>semaphore</edgelabel>
        </childnode>
        <childnode refid="1569" relation="usage">
          <edgelabel>mtx</edgelabel>
        </childnode>
      </node>
      <node id="1568">
        <label>Semaphore</label>
        <link refid="d9/d88/classsamchon_1_1library_1_1Semaphore"/>
      </node>
      <node id="1569">
        <label>RWMutex</label>
        <link refid="df/d85/classsamchon_1_1library_1_1RWMutex"/>
      </node>
    </collaborationgraph>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/ErrorEvent.hpp" line="21" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/ErrorEvent.hpp" bodystart="19" bodyend="57"/>
    <listofallmembers>
      <member refid="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1a3cf8f3fa94653642c64632b03b9e889ca9a25989a7678e52c9900c88a81fb18d3" prot="private" virt="non-virtual"><scope>samchon::library::ErrorEvent</scope><name>ACTIVATE</name></member>
      <member refid="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1a3cf8f3fa94653642c64632b03b9e889ca00a900c9df90c74f75004b3dc04f173d" prot="private" virt="non-virtual"><scope>samchon::library::ErrorEvent</scope><name>COMPLETE</name></member>
      <member refid="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1a4029f33800c86a70c6257338ef75c3cda2fd6f336d08340583bd620a7f5694c90" prot="public" virt="non-virtual"><scope>samchon::library::ErrorEvent</scope><name>ERROR</name></member>
      <member refid="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1a0f2d1ea2e59d299f3cee7a8d841e4a6f" prot="public" virt="non-virtual"><scope>samchon::library::ErrorEvent</scope><name>ErrorEvent</name></member>
      <member refid="d2/d56/classsamchon_1_1library_1_1Event_1ab49cb3d2b05d331fa655ba5e8a2fd543" prot="public" virt="non-virtual"><scope>samchon::library::ErrorEvent</scope><name>Event</name></member>
      <member refid="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1ae2d9fd6693ad0e915e8cc1883429629e" prot="public" virt="non-virtual"><scope>samchon::library::ErrorEvent</scope><name>getMessage</name></member>
      <member refid="d2/d56/classsamchon_1_1library_1_1Event_1a47cb03ac0e022fd7d4f821dc8d3c6a5e" prot="public" virt="non-virtual"><scope>samchon::library::ErrorEvent</scope><name>getSource</name></member>
      <member refid="d2/d56/classsamchon_1_1library_1_1Event_1a9db1ac83b65b334b56c67ee353581962" prot="public" virt="non-virtual"><scope>samchon::library::ErrorEvent</scope><name>getType</name></member>
      <member refid="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1a36bd74109f547f7f8198faf5a12d2879" prot="protected" virt="non-virtual"><scope>samchon::library::ErrorEvent</scope><name>message</name></member>
      <member refid="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1a3cf8f3fa94653642c64632b03b9e889ca4e9ac82e8594184cb2fb8a4ef86df12d" prot="private" virt="non-virtual"><scope>samchon::library::ErrorEvent</scope><name>REMOVED</name></member>
      <member refid="d2/d56/classsamchon_1_1library_1_1Event_1a2b08849622c04e621a15d6add0e98fc6" prot="protected" virt="non-virtual"><scope>samchon::library::ErrorEvent</scope><name>source</name></member>
      <member refid="d2/d56/classsamchon_1_1library_1_1Event_1ac765329451135abec74c45e1897abf26" prot="protected" virt="non-virtual"><scope>samchon::library::ErrorEvent</scope><name>type</name></member>
      <member refid="d4/de5/classsamchon_1_1library_1_1ErrorEvent_1a1db35156db6064bd187093e25065b48c" prot="public" virt="virtual"><scope>samchon::library::ErrorEvent</scope><name>~ErrorEvent</name></member>
      <member refid="d2/d56/classsamchon_1_1library_1_1Event_1ab259bf8791b9706ecd60c91988165e18" prot="public" virt="virtual"><scope>samchon::library::ErrorEvent</scope><name>~Event</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
