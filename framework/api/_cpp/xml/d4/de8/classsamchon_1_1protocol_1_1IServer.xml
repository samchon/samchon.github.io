<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="d4/de8/classsamchon_1_1protocol_1_1IServer" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>samchon::protocol::IServer</compoundname>
    <derivedcompoundref refid="dd/dc0/classsamchon_1_1example_1_1console__chat__server_1_1ChatServer" prot="public" virt="non-virtual">ChatServer</derivedcompoundref>
    <derivedcompoundref refid="d8/d47/classsamchon_1_1protocol_1_1ExternalClientArray" prot="private" virt="virtual">ExternalClientArray</derivedcompoundref>
    <derivedcompoundref refid="d5/d23/classsamchon_1_1protocol_1_1IWebServer" prot="public" virt="virtual">IWebServer</derivedcompoundref>
    <derivedcompoundref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" prot="public" virt="non-virtual">Server</derivedcompoundref>
    <includes refid="d2/de5/IServer_8hpp" local="no">IServer.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d4/de8/classsamchon_1_1protocol_1_1IServer_1a2a20eac5e103a9e3be2dab523c2775e3" prot="protected" static="no" mutable="no">
        <type>Acceptor *</type>
        <definition>Acceptor* acceptor</definition>
        <argsstring></argsstring>
        <name>acceptor</name>
        <briefdescription>
<para>An acceptor for clients. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/IServer.hpp" line="49" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/IServer.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="d4/de8/classsamchon_1_1protocol_1_1IServer_1a4f40efeae64b5ccb29406a0f8f9e0ce6" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>auto</type>
        <definition>auto MY_IP</definition>
        <argsstring>() const  -&gt; std::string</argsstring>
        <name>MY_IP</name>
        <reimplementedby refid="d8/d47/classsamchon_1_1protocol_1_1ExternalClientArray_1a4f40efeae64b5ccb29406a0f8f9e0ce6">MY_IP</reimplementedby>
        <briefdescription>
<para>(optional) Server&apos;s IP </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/IServer.hpp" line="54" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/IServer.cpp" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="d4/de8/classsamchon_1_1protocol_1_1IServer_1a323a09d6b1b257bfcce9cac1b2650bcf" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>auto</type>
        <definition>virtual auto PORT</definition>
        <argsstring>() const  -&gt; int=NULL</argsstring>
        <name>PORT</name>
        <reimplementedby refid="da/d56/classsamchon_1_1example_1_1chat__service_1_1ChatServer_1a9e46fee91e74f8880b70712ac4e7a6d2">PORT</reimplementedby>
        <reimplementedby refid="d8/d47/classsamchon_1_1protocol_1_1ExternalClientArray_1a2171eeb63a6bb81dc32ab38c26a770ba">PORT</reimplementedby>
        <reimplementedby refid="dd/dc0/classsamchon_1_1example_1_1console__chat__server_1_1ChatServer_1a9e46fee91e74f8880b70712ac4e7a6d2">PORT</reimplementedby>
        <briefdescription>
<para>Port number of the server. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/IServer.hpp" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/de8/classsamchon_1_1protocol_1_1IServer_1a89a707ebf106e0e2cecfee911c45cd6a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void addClient</definition>
        <argsstring>(Socket *)=0</argsstring>
        <name>addClient</name>
        <reimplementedby refid="d8/d47/classsamchon_1_1protocol_1_1ExternalClientArray_1a9cbdd988cd4a917f6b47162103bfd550">addClient</reimplementedby>
        <reimplementedby refid="dd/dc0/classsamchon_1_1example_1_1console__chat__server_1_1ChatServer_1aafb1dd6d4582bcc50a40a6fe17e85c80">addClient</reimplementedby>
        <reimplementedby refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server_1a9cbdd988cd4a917f6b47162103bfd550">addClient</reimplementedby>
        <param>
          <type>Socket *</type>
        </param>
        <briefdescription>
<para>Handling connection of a physical client. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/IServer.hpp" line="84" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d4/de8/classsamchon_1_1protocol_1_1IServer_1acb43fd3ca9cd70ea120b70772668410e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IServer</definition>
        <argsstring>()</argsstring>
        <name>IServer</name>
        <briefdescription>
<para>Default Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/IServer.hpp" line="65" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/IServer.cpp" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="d4/de8/classsamchon_1_1protocol_1_1IServer_1a7eb5d612e27167a8359bc3ee5045e6c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>~IServer</definition>
        <argsstring>()</argsstring>
        <name>~IServer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/IServer.hpp" line="66" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/IServer.cpp" bodystart="22" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="d4/de8/classsamchon_1_1protocol_1_1IServer_1a9e8555112049fc2b4945120b3c45f8ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void open</definition>
        <argsstring>()</argsstring>
        <name>open</name>
        <reimplementedby refid="d5/d23/classsamchon_1_1protocol_1_1IWebServer_1abdf16446024536cc3ab3fab8c5f193fe">open</reimplementedby>
        <briefdescription>
<para>Open the server. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>It holds (monopolies) a thread. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/IServer.hpp" line="73" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/IServer.cpp" bodystart="30" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="d4/de8/classsamchon_1_1protocol_1_1IServer_1a5ae591df94fc66ccb85cbb6565368bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
<para>Close the server. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/IServer.hpp" line="78" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/IServer.cpp" bodystart="71" bodyend="78"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An interface of a physical server. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="d4/de8/classsamchon_1_1protocol_1_1IServer" kindref="compound">IServer</ref> provides methods for opening a server. </para><para><ref refid="d4/de8/classsamchon_1_1protocol_1_1IServer" kindref="compound">IServer</ref> is one of the basic 3 + 1 components that can make any type of network system in Samchon Framework with <ref refid="d4/dcf/classsamchon_1_1protocol_1_1IProtocol" kindref="compound">IProtocol</ref> and <ref refid="d3/dc8/classsamchon_1_1protocol_1_1IClient" kindref="compound">IClient</ref>. Looking around classes in Samchon Framework, you can see all servers are implemented from the <ref refid="d4/de8/classsamchon_1_1protocol_1_1IServer" kindref="compound">IServer</ref>. </para><para>When a client connects to the server, the abstract method <ref refid="d4/de8/classsamchon_1_1protocol_1_1IServer_1a89a707ebf106e0e2cecfee911c45cd6a" kindref="member">IServer::addClient()</ref> is called with a new thread. If you want to accept only a client at a time, use OneToOneServer instead. </para><para><image type="html" name="protocol_interface.png"></image>
 <image type="latex" name="protocol_interface.png"></image>
</para><para><heading level="3">Example source</heading>
</para><para>A simple chat server running on console </para><para><simplesect kind="par"><title>examples/console_chat_server/ChatServer.hpp</title><para><programlisting><codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samchon/protocol/IServer.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samchon/protocol/IProtocol.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samchon/library/RWMutex.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="db/df1/namespacesamchon" kindref="compound">samchon</ref></highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">example</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">console_chat_server</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ChatClient;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ChatServer</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>protocol::IServer,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>protocol::IProtocol</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>protocol::IServer<sp/>super;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;ChatClient*&gt;<sp/>clientSet;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>library::RWMutex<sp/>rwMutex;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChatServer();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ChatServer()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eraseClient(ChatClient<sp/>*client);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="d4/de8/classsamchon_1_1protocol_1_1IServer_1a323a09d6b1b257bfcce9cac1b2650bcf" kindref="member">PORT</ref>()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="64"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>37749;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d4/de8/classsamchon_1_1protocol_1_1IServer_1a89a707ebf106e0e2cecfee911c45cd6a" kindref="member">addClient</ref>(protocol::Socket<sp/>*socket)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>replyData(std::shared_ptr&lt;protocol::Invoke&gt;)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sendData(std::shared_ptr&lt;protocol::Invoke&gt;)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="92"><highlight class="normal">};</highlight></codeline>
</programlisting> </para></simplesect>
<simplesect kind="par"><title>examples/console_chat_server/ChatServer.cpp</title><para><programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;samchon/examples/console_chat_server/ChatServer.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samchon/examples/console_chat_server/ChatClient.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samchon/protocol/Invoke.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="db/d64/namespacesamchon_1_1protocol" kindref="compound">samchon::protocol</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="dc/dc4/namespacesamchon_1_1example_1_1console__chat__server" kindref="compound">samchon::example::console_chat_server</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">ChatServer::ChatServer()</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>super()</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChatServer::addClient(Socket<sp/>*socket)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d3b/classsamchon_1_1example_1_1console__chat__server_1_1ChatClient" kindref="compound">ChatClient</ref><sp/>*client<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d3b/classsamchon_1_1example_1_1console__chat__server_1_1ChatClient" kindref="compound">ChatClient</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>socket);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock" kindref="compound">UniqueWriteLock</ref><sp/>uk(rwMutex);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>clientSet.insert(client);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>thread(&amp;ChatClient::listen,<sp/>client).detach();</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChatServer::eraseClient(<ref refid="d2/d3b/classsamchon_1_1example_1_1console__chat__server_1_1ChatClient" kindref="compound">ChatClient</ref><sp/>*client)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock" kindref="compound">UniqueWriteLock</ref><sp/>uk(rwMutex);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>clientSet.erase(client);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChatServer::replyData(shared_ptr&lt;Invoke&gt;<sp/>invoke)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>sendData(invoke);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChatServer::sendData(shared_ptr&lt;Invoke&gt;<sp/>invoke)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d6f/classsamchon_1_1library_1_1UniqueReadLock" kindref="compound">UniqueReadLock</ref><sp/>uk(rwMutex);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>clientSet.begin();<sp/>it<sp/>!=<sp/>clientSet.end();<sp/>it++)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*it)-&gt;sendData(invoke);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
</programlisting> </para></simplesect>
<simplesect kind="par"><title>examples/console_chat_server/ChatClient.hpp</title><para><programlisting><codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samchon/protocol/IClient.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="db/df1/namespacesamchon" kindref="compound">samchon</ref></highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">example</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">console_chat_server</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ChatServer;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ChatClient</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>protocol::IClient</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>protocol::IClient<sp/>super;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChatServer<sp/>*server;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChatClient(ChatServer*,<sp/>protocol::Socket*);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ChatClient();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>replyData(std::shared_ptr&lt;protocol::Invoke&gt;)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="55"><highlight class="normal">};</highlight></codeline>
</programlisting> </para></simplesect>
<simplesect kind="par"><title>examples/console_chat_server/ChatClient.cpp</title><para><programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;samchon/examples/console_chat_server/ChatClient.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samchon/examples/console_chat_server/ChatServer.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samchon/protocol/Invoke.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref>;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="db/d64/namespacesamchon_1_1protocol" kindref="compound">samchon::protocol</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="dc/dc4/namespacesamchon_1_1example_1_1console__chat__server" kindref="compound">samchon::example::console_chat_server</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">ChatClient::ChatClient(<ref refid="dd/dc0/classsamchon_1_1example_1_1console__chat__server_1_1ChatServer" kindref="compound">ChatServer</ref><sp/>*server,<sp/>Socket<sp/>*socket)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>super()</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;server<sp/>=<sp/>server;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;socket<sp/>=<sp/>socket;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal">ChatClient::~ChatClient()</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>server-&gt;eraseClient(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChatClient::replyData(shared_ptr&lt;Invoke&gt;<sp/>invoke)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>server-&gt;replyData(invoke);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
</programlisting> </para></simplesect>
<simplesect kind="par"><title>examples/console_chat_server/main.cpp</title><para><programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samchon/examples/console_chat_server/ChatServer.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>comment(lib,<sp/>&quot;x64/Debug/SamchonFramework.lib&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>comment(lib,<sp/>&quot;x64/Release/SamchonFramework.lib&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>comment(lib,<sp/>&quot;Debug/SamchonFramework.lib&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>comment(lib,<sp/>&quot;Release/SamchonFramework.lib&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="dc/dc4/namespacesamchon_1_1example_1_1console__chat__server" kindref="compound">samchon::example::console_chat_server</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/dc0/classsamchon_1_1example_1_1console__chat__server_1_1ChatServer" kindref="compound">ChatServer</ref><sp/>chatServer;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>chatServer.open();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>system(</highlight><highlight class="stringliteral">&quot;pause&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="2016">
        <label>Server</label>
        <link refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server"/>
        <childnode refid="2008" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2013">
        <label>ParallelClientArray</label>
        <link refid="d1/dc7/classsamchon_1_1protocol_1_1master_1_1ParallelClientArray"/>
        <childnode refid="2010" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2008">
        <label>IServer</label>
        <link refid="d4/de8/classsamchon_1_1protocol_1_1IServer"/>
      </node>
      <node id="2010">
        <label>ExternalClientArray</label>
        <link refid="d8/d47/classsamchon_1_1protocol_1_1ExternalClientArray"/>
        <childnode refid="2008" relation="private-inheritance">
        </childnode>
      </node>
      <node id="2009">
        <label>ChatServer</label>
        <link refid="dd/dc0/classsamchon_1_1example_1_1console__chat__server_1_1ChatServer"/>
        <childnode refid="2008" relation="public-inheritance">
        </childnode>
        <childnode refid="2016" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2015">
        <label>IWebServer</label>
        <link refid="d5/d23/classsamchon_1_1protocol_1_1IWebServer"/>
        <childnode refid="2008" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2012">
        <label>DistributedClientArrayMediator</label>
        <link refid="d9/ddf/classsamchon_1_1protocol_1_1master_1_1DistributedClientArrayMediator"/>
        <childnode refid="2011" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2014">
        <label>ParallelClientArrayMediator</label>
        <link refid="d4/d53/classsamchon_1_1protocol_1_1master_1_1ParallelClientArrayMediator"/>
        <childnode refid="2013" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2011">
        <label>DistributedClientArray</label>
        <link refid="d3/db6/classsamchon_1_1protocol_1_1master_1_1DistributedClientArray"/>
        <childnode refid="2010" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/IServer.hpp" line="44" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/IServer.hpp" bodystart="43" bodyend="85"/>
    <listofallmembers>
      <member refid="d4/de8/classsamchon_1_1protocol_1_1IServer_1a2a20eac5e103a9e3be2dab523c2775e3" prot="protected" virt="non-virtual"><scope>samchon::protocol::IServer</scope><name>acceptor</name></member>
      <member refid="d4/de8/classsamchon_1_1protocol_1_1IServer_1a89a707ebf106e0e2cecfee911c45cd6a" prot="protected" virt="pure-virtual"><scope>samchon::protocol::IServer</scope><name>addClient</name></member>
      <member refid="d4/de8/classsamchon_1_1protocol_1_1IServer_1a5ae591df94fc66ccb85cbb6565368bca" prot="public" virt="virtual"><scope>samchon::protocol::IServer</scope><name>close</name></member>
      <member refid="d4/de8/classsamchon_1_1protocol_1_1IServer_1acb43fd3ca9cd70ea120b70772668410e" prot="public" virt="non-virtual"><scope>samchon::protocol::IServer</scope><name>IServer</name></member>
      <member refid="d4/de8/classsamchon_1_1protocol_1_1IServer_1a4f40efeae64b5ccb29406a0f8f9e0ce6" prot="protected" virt="virtual"><scope>samchon::protocol::IServer</scope><name>MY_IP</name></member>
      <member refid="d4/de8/classsamchon_1_1protocol_1_1IServer_1a9e8555112049fc2b4945120b3c45f8ab" prot="public" virt="virtual"><scope>samchon::protocol::IServer</scope><name>open</name></member>
      <member refid="d4/de8/classsamchon_1_1protocol_1_1IServer_1a323a09d6b1b257bfcce9cac1b2650bcf" prot="protected" virt="virtual"><scope>samchon::protocol::IServer</scope><name>PORT</name></member>
      <member refid="d4/de8/classsamchon_1_1protocol_1_1IServer_1a7eb5d612e27167a8359bc3ee5045e6c8" prot="public" virt="virtual"><scope>samchon::protocol::IServer</scope><name>~IServer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
