<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="d1/df7/classsamchon_1_1library_1_1UniqueAcquire" kind="class" language="C++" prot="public">
    <compoundname>samchon::library::UniqueAcquire</compoundname>
    <includes refid="d6/d66/UniqueAcquire_8hpp" local="no">UniqueAcquire.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d1/df7/classsamchon_1_1library_1_1UniqueAcquire_1a000bdc6218e92334abc77ee4d2111727" prot="private" static="no" mutable="no">
        <type><ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref> *</type>
        <definition>Semaphore* semaphore</definition>
        <argsstring></argsstring>
        <name>semaphore</name>
        <briefdescription>
<para>Managed semaphore. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueAcquire.hpp" line="47" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueAcquire.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/df7/classsamchon_1_1library_1_1UniqueAcquire_1a0774f698e7c923fe33adcfe95cdf9e73" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool isLocked</definition>
        <argsstring></argsstring>
        <name>isLocked</name>
        <briefdescription>
<para>Whether the semaphore was acquired by the UniqueLock. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueAcquire.hpp" line="52" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueAcquire.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d1/df7/classsamchon_1_1library_1_1UniqueAcquire_1af12b12fa6a2cce32e4644b34251d36a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UniqueAcquire</definition>
        <argsstring>(Semaphore &amp;, bool=true)</argsstring>
        <name>UniqueAcquire</name>
        <param>
          <type><ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref> &amp;</type>
          <defname>semaphore</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>doLock</defname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Construct from semaphore. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>semaphore</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref> to manage </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>doLock</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to lock directly or not </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueAcquire.hpp" line="64" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/UniqueAcquire.cpp" bodystart="9" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="d1/df7/classsamchon_1_1library_1_1UniqueAcquire_1ae097f5106f2f316f263262b93dca21bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UniqueAcquire</definition>
        <argsstring>(const UniqueAcquire &amp;)=delete</argsstring>
        <name>UniqueAcquire</name>
        <param>
          <type>const <ref refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire" kindref="compound">UniqueAcquire</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Prohibited Copy Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire" kindref="compound">UniqueAcquire</ref> can&apos;t be copied. Use pointer, reference instead. </para><para>If what you want is UniqueAcquire(s) references each other and unlock when all related <ref refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire" kindref="compound">UniqueAcquire</ref> objects are destructed, <ref refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire" kindref="compound">SharedAcquire</ref> is the best way. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Tried object to copy. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueAcquire.hpp" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/df7/classsamchon_1_1library_1_1UniqueAcquire_1a9b4767da57a07982e715a1b2e4128ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UniqueAcquire</definition>
        <argsstring>(UniqueAcquire &amp;&amp;)</argsstring>
        <name>UniqueAcquire</name>
        <param>
          <type><ref refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire" kindref="compound">UniqueAcquire</ref> &amp;&amp;</type>
          <defname>obj</defname>
        </param>
        <briefdescription>
<para>Move Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>An</parametername>
</parameternamelist>
<parameterdescription>
<para>object to move </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueAcquire.hpp" line="83" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/UniqueAcquire.cpp" bodystart="17" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="d1/df7/classsamchon_1_1library_1_1UniqueAcquire_1aefa6c64592570a5f5989b3b11b4ab227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~UniqueAcquire</definition>
        <argsstring>()</argsstring>
        <name>~UniqueAcquire</name>
        <briefdescription>
<para>Default Destructor. </para>        </briefdescription>
        <detaileddescription>
<para>If read lock has done by the UniqueLock, unlock it </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueAcquire.hpp" line="89" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/UniqueAcquire.cpp" bodystart="27" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="d1/df7/classsamchon_1_1library_1_1UniqueAcquire_1af9f5b35a212d21af601a8213ed325871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acquire</definition>
        <argsstring>()</argsstring>
        <name>acquire</name>
        <briefdescription>
<para>Acquire admission. </para>        </briefdescription>
        <detaileddescription>
<para>Acquires an admission and increases count of admission by 1. </para><para>If the count is over permitted size, wait until other admissions to be released. </para><para><itemizedlist>
<listitem><para>Lock on mutex </para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueAcquire.hpp" line="97" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/UniqueAcquire.cpp" bodystart="36" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="d1/df7/classsamchon_1_1library_1_1UniqueAcquire_1a23b477d0e2d399f75d585d154c346591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void release</definition>
        <argsstring>()</argsstring>
        <name>release</name>
        <briefdescription>
<para>Release an admission. </para>        </briefdescription>
        <detaileddescription>
<para>Releases an admission what you&apos;ve acquired. If the admission count was over the limited size, unlock the mutex. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueAcquire.hpp" line="102" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/UniqueAcquire.cpp" bodystart="44" bodyend="51"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Unique acquire from a <ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>A <ref refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire" kindref="compound">UniqueAcquire</ref> is an object manages a <ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref> with unique ownership in both states. </para><para><itemizedlist>
<listitem><para>acquired </para></listitem>
<listitem><para>released</para></listitem>
</itemizedlist>
</para><para>On construction (or by move-assigning to it), the object acquires a semaphore object, for whose acquiring and releasing operations becomes responsible. </para><para>This class guarantees a released status on destruction (even if not called explicitly). Therefore it is especially useful as an object with automatic duration, as it guarantees the semaphore object is properly released in case an exception is thrown. </para><para>Referenced comments of std::unique_lock </para><para><itemizedlist>
<listitem><para><ulink url="http://www.cplusplus.com/reference/mutex/unique_lock/">http://www.cplusplus.com/reference/mutex/unique_lock/</ulink></para></listitem>
</itemizedlist>
<image type="html" name="library_critical_section.png"></image>
 <image type="latex" name="library_critical_section.png"></image>
</para><para><simplesect kind="note"><para></para></simplesect>
Though, that the <ref refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire" kindref="compound">UniqueAcquire</ref> object does not manage the lifetime of the semaphore object in any way: the duration of the semaphore object shall extend at least until the destruction of the <ref refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire" kindref="compound">UniqueAcquire</ref> that manages it. </para><para>The <ref refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire" kindref="compound">UniqueAcquire</ref> is movable, but not copyable. </para><para><simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="2806">
        <label>UniqueAcquire</label>
        <link refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire"/>
        <childnode refid="2807" relation="usage">
          <edgelabel>semaphore</edgelabel>
        </childnode>
      </node>
      <node id="2807">
        <label>Semaphore</label>
        <link refid="d9/d88/classsamchon_1_1library_1_1Semaphore"/>
      </node>
    </collaborationgraph>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueAcquire.hpp" line="42" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueAcquire.hpp" bodystart="41" bodyend="108"/>
    <listofallmembers>
      <member refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire_1af9f5b35a212d21af601a8213ed325871" prot="public" virt="non-virtual"><scope>samchon::library::UniqueAcquire</scope><name>acquire</name></member>
      <member refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire_1a0774f698e7c923fe33adcfe95cdf9e73" prot="private" virt="non-virtual"><scope>samchon::library::UniqueAcquire</scope><name>isLocked</name></member>
      <member refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire_1a23b477d0e2d399f75d585d154c346591" prot="public" virt="non-virtual"><scope>samchon::library::UniqueAcquire</scope><name>release</name></member>
      <member refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire_1a000bdc6218e92334abc77ee4d2111727" prot="private" virt="non-virtual"><scope>samchon::library::UniqueAcquire</scope><name>semaphore</name></member>
      <member refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire_1af12b12fa6a2cce32e4644b34251d36a0" prot="public" virt="non-virtual"><scope>samchon::library::UniqueAcquire</scope><name>UniqueAcquire</name></member>
      <member refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire_1ae097f5106f2f316f263262b93dca21bc" prot="public" virt="non-virtual"><scope>samchon::library::UniqueAcquire</scope><name>UniqueAcquire</name></member>
      <member refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire_1a9b4767da57a07982e715a1b2e4128ff0" prot="public" virt="non-virtual"><scope>samchon::library::UniqueAcquire</scope><name>UniqueAcquire</name></member>
      <member refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire_1aefa6c64592570a5f5989b3b11b4ab227" prot="public" virt="non-virtual"><scope>samchon::library::UniqueAcquire</scope><name>~UniqueAcquire</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
