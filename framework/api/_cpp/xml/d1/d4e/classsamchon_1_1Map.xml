<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="d1/d4e/classsamchon_1_1Map" kind="class" language="C++" prot="public">
    <compoundname>samchon::Map</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::map&lt; _Kty, _Ty, _Pr, _Alloc &gt;</basecompoundref>
    <derivedcompoundref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" prot="private" virt="non-virtual">Server</derivedcompoundref>
    <includes refid="dc/dbe/Map_8hpp" local="no">Map.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>_Kty</declname>
        <defname>_Kty</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>_Ty</declname>
        <defname>_Ty</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>_Pr</declname>
        <defname>_Pr</defname>
        <defval>std::less&lt;_Kty&gt;</defval>
      </param>
      <param>
        <type>typename</type>
        <declname>_Alloc</declname>
        <defname>_Alloc</defname>
        <defval>std::allocator&lt;std::pair&lt;const _Kty, _Ty&gt;&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="d1/d4e/classsamchon_1_1Map_1a00c9d0167a4a93f5499af669586cb578" prot="private" static="no">
        <type>std::map&lt; _Kty, _Ty, _Pr, _Alloc &gt;</type>
        <definition>typedef std::map&lt;_Kty, _Ty, _Pr, _Alloc&gt; super</definition>
        <argsstring></argsstring>
        <name>super</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" line="92" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d1/d4e/classsamchon_1_1Map_1af1898e730bd14c8de68f86d4b2211f9f" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto at</definition>
        <argsstring>(const _Kty &amp;key) const  -&gt; const _Ty &amp;</argsstring>
        <name>at</name>
        <param>
          <type>const _Kty &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" line="95" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="d1/d4e/classsamchon_1_1Map_1a7bb7f55aacffd486372c2486c321afcb" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto at</definition>
        <argsstring>(const _Kty &amp;key) -&gt; _Ty &amp;</argsstring>
        <name>at</name>
        <param>
          <type>const _Kty &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" line="99" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" bodystart="99" bodyend="102"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d1/d4e/classsamchon_1_1Map_1a7d21fcd2b73466da3ca65f2dae888d3f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto has</definition>
        <argsstring>(const _Kty &amp;key) const  -&gt; bool</argsstring>
        <name>has</name>
        <param>
          <type>const _Kty &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Whether have the item or not. </para>        </briefdescription>
        <detaileddescription>
<para>Indicates whether a map has an item having the specified identifier.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key value of the element whose mapped value is accessed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether the map has an item having the specified identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" line="116" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="d1/d4e/classsamchon_1_1Map_1a545c462f3efea27e9689670c776cd3d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto get</definition>
        <argsstring>(const _Kty &amp;key) -&gt; _Ty &amp;</argsstring>
        <name>get</name>
        <param>
          <type>const _Kty &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get element. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the mapped value of the element identified with key</para><para><simplesect kind="warning"><para>get is different with std::map&apos;s at. get does not create object but throws excention if the matched key doesn&apos;t exist.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key value of the element whose mapped value is accessed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>exception</parametername>
</parameternamelist>
<parameterdescription>
<para>out of range </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference object of the mapped value (_Ty) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" line="135" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="d1/d4e/classsamchon_1_1Map_1ace518b0649014b10ec69a455a78ef7dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto get</definition>
        <argsstring>(const _Kty &amp;key) const  -&gt; const _Ty &amp;</argsstring>
        <name>get</name>
        <param>
          <type>const _Kty &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" line="139" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="d1/d4e/classsamchon_1_1Map_1a12916456879276c43d0b3ca12e3cf89b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void set</definition>
        <argsstring>(const _Kty &amp;key, const _Ty &amp;val)</argsstring>
        <name>set</name>
        <param>
          <type>const _Kty &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const _Ty &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set element. </para>        </briefdescription>
        <detaileddescription>
<para>Set an item as the specified identifier. </para><para>If the identifier is already in map, change value of the identifier. <linebreak/>
 If not, then insert the object with the identifier. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key value of the element whose mapped value is accessed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value, the item. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" line="156" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="d1/d4e/classsamchon_1_1Map_1a9f8ba1582bd870c7ce22db5f611b8775" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void set</definition>
        <argsstring>(const _Kty &amp;key, const _Ty &amp;&amp;val)</argsstring>
        <name>set</name>
        <param>
          <type>const _Kty &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const _Ty &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" line="160" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="d1/d4e/classsamchon_1_1Map_1aeb58271a651715110b73bc6553553a9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto pop</definition>
        <argsstring>(const _Kty &amp;key) -&gt; _Ty</argsstring>
        <name>pop</name>
        <param>
          <type>const _Kty &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Pop item. </para>        </briefdescription>
        <detaileddescription>
<para>Removes an item having specified key and returns the removed element.</para><para><simplesect kind="return"><para>An item released by pop </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" line="171" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" bodystart="171" bodyend="177"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="d1/d4e/classsamchon_1_1Map" kindref="compound">Map</ref>. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="d1/d4e/classsamchon_1_1Map" kindref="compound">Map</ref> is a std::map some methods are modified </para><para><itemizedlist>
<listitem>
<para>Addicted methods <itemizedlist>
<listitem>
<para>has(find(key) != end()) method is addicted  </para></listitem>
<listitem>
<para>at method is addicted  </para></listitem>
<listitem>
<para>set method is addicted  </para></listitem>
<listitem>
<para>pop method is addicted  </para></listitem>
</itemizedlist>
</para></listitem>
<listitem>
<para>Modified methods <itemizedlist>
<listitem>
<para>at was depreciated (get is different with at)  </para></listitem>
</itemizedlist>
</para></listitem>
</itemizedlist>
</para><para><simplesect kind="par"><title>[Inherited] </title><para></para></simplesect>
Maps are associative containers that store elements formed by a combination of a key value and a mapped value, following a specific order. </para><para>In a map, the key values are generally used to sort and uniquely identify the elements, while the mapped values store the content associated to this key. The types of key and mapped value may differ, and are grouped together in member type value_type, which is a pair type combining both: </para><para><itemizedlist>
<listitem><para>typedef pair&lt;const Key, T&gt; value_type;</para></listitem>
</itemizedlist>
</para><para>Internally, the elements in a map are always sorted by its key following a specific strict weak ordering criterion indicated by its internal comparison object (of type Compare). </para><para>map containers are generally slower than unordered_map containers to access individual elements by their key, but they allow the direct iteration on subsets based on their order. </para><para>Maps are typically implemented as binary search trees. </para><para>The mapped values in a map can be accessed directly by their corresponding key using the bracket operator ((operator[]). </para><para>Maps are typically implemented as binary search trees. </para><para>Referenced comments of std::map <itemizedlist>
<listitem><para><ulink url="http://www.cplusplus.com/reference/map/map/">http://www.cplusplus.com/reference/map/map/</ulink></para></listitem>
</itemizedlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Kty</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Type of the keys. Each element in a map is uniquely identified by its key value. </para><para>Aliased as member type map::key_type. </para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Type of the mapped value. Each element in a map stores some data as its mapped value. </para><para>Aliased as member type map::mapped_type. </para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Pr</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
A binary predicate that takes two element keys as arguments and returns a bool. The expression comp(a,b), where comp is an object of this type and a and b are key values, shall return true if a is considered to go before b in the strict weak ordering the function defines. </para><para>The map object uses this expression to determine both the order the elements follow in the container and whether two element keys are equivalent (by comparing them reflexively: they are equivalent if !comp(a,b) &amp;&amp; !comp(b,a)). No two elements in a map container can have equivalent keys. </para><para>This can be a function pointer or a function object. This defaults to std::less&lt;T&gt;, which returns the same as applying the less-than operator (a&lt;b). </para><para>Aliased as member type map::key_compare. </para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Alloc</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Type of the allocator object used to define the storage allocation model. By default, the allocator class template is used, which defines the simplest memory allocation model and is value-independent. </para><para>Aliased as member type map::allocator_type. </para><para><simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="2054">
        <label>Map&lt; _Kty, _Ty, _Pr, _Alloc &gt;</label>
        <link refid="d1/d4e/classsamchon_1_1Map"/>
      </node>
      <node id="2056">
        <label>ChatServer</label>
        <link refid="da/d56/classsamchon_1_1example_1_1chat__service_1_1ChatServer"/>
        <childnode refid="2055" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2055">
        <label>Server&lt; SmartPointer&lt; User &gt; &gt;</label>
        <link refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server"/>
        <childnode refid="2054" relation="private-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" line="90" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/Map.hpp" bodystart="88" bodyend="178"/>
    <listofallmembers>
      <member refid="d1/d4e/classsamchon_1_1Map_1af1898e730bd14c8de68f86d4b2211f9f" prot="private" virt="non-virtual"><scope>samchon::Map</scope><name>at</name></member>
      <member refid="d1/d4e/classsamchon_1_1Map_1a7bb7f55aacffd486372c2486c321afcb" prot="private" virt="non-virtual"><scope>samchon::Map</scope><name>at</name></member>
      <member refid="d1/d4e/classsamchon_1_1Map_1a545c462f3efea27e9689670c776cd3d3" prot="public" virt="non-virtual"><scope>samchon::Map</scope><name>get</name></member>
      <member refid="d1/d4e/classsamchon_1_1Map_1ace518b0649014b10ec69a455a78ef7dc" prot="public" virt="non-virtual"><scope>samchon::Map</scope><name>get</name></member>
      <member refid="d1/d4e/classsamchon_1_1Map_1a7d21fcd2b73466da3ca65f2dae888d3f" prot="public" virt="non-virtual"><scope>samchon::Map</scope><name>has</name></member>
      <member refid="d1/d4e/classsamchon_1_1Map_1aeb58271a651715110b73bc6553553a9c" prot="public" virt="non-virtual"><scope>samchon::Map</scope><name>pop</name></member>
      <member refid="d1/d4e/classsamchon_1_1Map_1a12916456879276c43d0b3ca12e3cf89b" prot="public" virt="non-virtual"><scope>samchon::Map</scope><name>set</name></member>
      <member refid="d1/d4e/classsamchon_1_1Map_1a9f8ba1582bd870c7ce22db5f611b8775" prot="public" virt="non-virtual"><scope>samchon::Map</scope><name>set</name></member>
      <member refid="d1/d4e/classsamchon_1_1Map_1a00c9d0167a4a93f5499af669586cb578" prot="private" virt="non-virtual"><scope>samchon::Map</scope><name>super</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
