<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock" kind="class" language="C++" prot="public">
    <compoundname>samchon::library::UniqueWriteLock</compoundname>
    <includes refid="d5/dcd/UniqueWriteLock_8hpp" local="no">UniqueWriteLock.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock_1a798d6d1eab214362a4885778d33ea365" prot="private" static="no" mutable="no">
        <type><ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> *</type>
        <definition>RWMutex* mtx</definition>
        <argsstring></argsstring>
        <name>mtx</name>
        <briefdescription>
<para>Managed mutex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueWriteLock.hpp" line="47" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueWriteLock.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock_1a0774f698e7c923fe33adcfe95cdf9e73" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool isLocked</definition>
        <argsstring></argsstring>
        <name>isLocked</name>
        <briefdescription>
<para>Whether the mutex was locked by UniqueLock. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueWriteLock.hpp" line="52" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueWriteLock.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock_1a72c793268a3c9581a3f33bb793dbdb31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UniqueWriteLock</definition>
        <argsstring>(RWMutex &amp;, bool=true)</argsstring>
        <name>UniqueWriteLock</name>
        <param>
          <type><ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> &amp;</type>
          <defname>mtx</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>doLock</defname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Construct from mutex. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mtx</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutex to manage </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>doLock</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to lock directly or not </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueWriteLock.hpp" line="64" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueWriteLock.cpp" bodystart="7" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock_1ad8f1f3c7ce90943dd6208d8240a06c81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UniqueWriteLock</definition>
        <argsstring>(const UniqueWriteLock &amp;)=delete</argsstring>
        <name>UniqueWriteLock</name>
        <param>
          <type>const <ref refid="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock" kindref="compound">UniqueWriteLock</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Prohibited Copy Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire" kindref="compound">UniqueAcquire</ref> can&apos;t be copied. Use pointer, reference instead. </para><para>If what you want is UniqueAcquire(s) references each other and unlock when all related <ref refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire" kindref="compound">UniqueAcquire</ref> objects are destructed, <ref refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire" kindref="compound">SharedAcquire</ref> is the best way. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Tried object to copy. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueWriteLock.hpp" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock_1a026a685eedfc9de487f84ff428220424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UniqueWriteLock</definition>
        <argsstring>(UniqueWriteLock &amp;&amp;)</argsstring>
        <name>UniqueWriteLock</name>
        <param>
          <type><ref refid="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock" kindref="compound">UniqueWriteLock</ref> &amp;&amp;</type>
          <defname>obj</defname>
        </param>
        <briefdescription>
<para>Move Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>An</parametername>
</parameternamelist>
<parameterdescription>
<para>object to move </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueWriteLock.hpp" line="83" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueWriteLock.cpp" bodystart="15" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock_1a09291685f001689d12243ee07f555180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~UniqueWriteLock</definition>
        <argsstring>()</argsstring>
        <name>~UniqueWriteLock</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
<para>If write lock has done by the UniqueLock, unlock it </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueWriteLock.hpp" line="91" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueWriteLock.cpp" bodystart="25" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock_1aa81aed607133209dade63a226818224d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lock</definition>
        <argsstring>()</argsstring>
        <name>lock</name>
        <briefdescription>
<para>Lock on writing. </para>        </briefdescription>
        <detaileddescription>
<para>Changes writing flag to true. </para><para>If another write_lock or read_lock is on a progress, wait until them to be unlocked. </para><para><itemizedlist>
<listitem><para>Writing can be done by only a section at once. </para></listitem>
<listitem><para>Writing can&apos;t be done when reading.</para></listitem>
</itemizedlist>
<simplesect kind="note"><para>You&apos;ve to call write_unlock when writing work was terminated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueWriteLock.hpp" line="99" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueWriteLock.cpp" bodystart="34" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock_1a9278be8203e1c42e2619179882ae4403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void unlock</definition>
        <argsstring>()</argsstring>
        <name>unlock</name>
        <briefdescription>
<para>Unlock on writing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueWriteLock.hpp" line="104" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueWriteLock.cpp" bodystart="42" bodyend="49"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Unique lock for writing. </para>    </briefdescription>
    <detaileddescription>
<para>A <ref refid="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock" kindref="compound">UniqueWriteLock</ref> is an object manages a <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> with unique ownership in both states. </para><para><itemizedlist>
<listitem><para>acquired </para></listitem>
<listitem><para>released</para></listitem>
</itemizedlist>
</para><para>On construction (or by move-assigning to it), the object locks a <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> object on writing side, for whose locking and unlocking operations becomes responsible. </para><para>The object supports both states: locked and unlocked. </para><para>This class guarantees a unlocked status on destruction (even if not called explicitly). Therefore it is especially useful as an object with automatic duration, as it guarantees the <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> object is properly unlocked in case an exception is thrown. </para><para>Referenced comments of std::unique_lock </para><para><itemizedlist>
<listitem><para><ulink url="http://www.cplusplus.com/reference/mutex/unique_lock/">http://www.cplusplus.com/reference/mutex/unique_lock/</ulink></para></listitem>
</itemizedlist>
<image type="html" name="library_critical_section.png"></image>
 <image type="latex" name="library_critical_section.png"></image>
</para><para><simplesect kind="note"><para>Though, that the <ref refid="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock" kindref="compound">UniqueWriteLock</ref> object does not manage the lifetime of the <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> object in any way: the duration of the <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> object shall extend at least until the destruction of the <ref refid="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock" kindref="compound">UniqueWriteLock</ref> that manages it.</para></simplesect>
<simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="2812">
        <label>UniqueWriteLock</label>
        <link refid="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock"/>
        <childnode refid="2813" relation="usage">
          <edgelabel>mtx</edgelabel>
        </childnode>
      </node>
      <node id="2813">
        <label>RWMutex</label>
        <link refid="df/d85/classsamchon_1_1library_1_1RWMutex"/>
      </node>
    </collaborationgraph>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueWriteLock.hpp" line="42" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueWriteLock.hpp" bodystart="41" bodyend="110"/>
    <listofallmembers>
      <member refid="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock_1a0774f698e7c923fe33adcfe95cdf9e73" prot="private" virt="non-virtual"><scope>samchon::library::UniqueWriteLock</scope><name>isLocked</name></member>
      <member refid="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock_1aa81aed607133209dade63a226818224d" prot="public" virt="non-virtual"><scope>samchon::library::UniqueWriteLock</scope><name>lock</name></member>
      <member refid="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock_1a798d6d1eab214362a4885778d33ea365" prot="private" virt="non-virtual"><scope>samchon::library::UniqueWriteLock</scope><name>mtx</name></member>
      <member refid="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock_1a72c793268a3c9581a3f33bb793dbdb31" prot="public" virt="non-virtual"><scope>samchon::library::UniqueWriteLock</scope><name>UniqueWriteLock</name></member>
      <member refid="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock_1ad8f1f3c7ce90943dd6208d8240a06c81" prot="public" virt="non-virtual"><scope>samchon::library::UniqueWriteLock</scope><name>UniqueWriteLock</name></member>
      <member refid="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock_1a026a685eedfc9de487f84ff428220424" prot="public" virt="non-virtual"><scope>samchon::library::UniqueWriteLock</scope><name>UniqueWriteLock</name></member>
      <member refid="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock_1a9278be8203e1c42e2619179882ae4403" prot="public" virt="non-virtual"><scope>samchon::library::UniqueWriteLock</scope><name>unlock</name></member>
      <member refid="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock_1a09291685f001689d12243ee07f555180" prot="public" virt="non-virtual"><scope>samchon::library::UniqueWriteLock</scope><name>~UniqueWriteLock</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
