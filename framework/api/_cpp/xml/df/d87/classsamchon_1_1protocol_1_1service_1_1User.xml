<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>samchon::protocol::service::User</compoundname>
    <basecompoundref refid="d1/d4e/classsamchon_1_1Map" prot="private" virt="non-virtual">Map&lt; size_t, SmartPointer&lt; Client &gt; &gt;</basecompoundref>
    <basecompoundref refid="d4/dcf/classsamchon_1_1protocol_1_1IProtocol" prot="public" virt="non-virtual">IProtocol</basecompoundref>
    <derivedcompoundref refid="d7/df1/classsamchon_1_1example_1_1chat__service_1_1ChatUser" prot="public" virt="non-virtual">ChatUser</derivedcompoundref>
    <includes refid="de/dfd/User_8hpp" local="no">User.hpp</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a1bddff49368f9ceffa1f87348769dc39" prot="private" static="no">
        <type><ref refid="d1/d4e/classsamchon_1_1Map" kindref="compound">Map</ref>&lt; size_t, <ref refid="d9/d2d/classsamchon_1_1SmartPointer" kindref="compound">SmartPointer</ref>&lt; <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref> &gt; &gt;</type>
        <definition>typedef Map&lt;size_t, SmartPointer&lt;Client&gt; &gt; super</definition>
        <argsstring></argsstring>
        <name>super</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="64" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1ac2055578ac48afabe5af487878450f68" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Server</definition>
        <argsstring></argsstring>
        <name>Server</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="60" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a5db1c99e2c94b26278f3838c85cdb618" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Client</definition>
        <argsstring></argsstring>
        <name>Client</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="61" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a5d5d629095a6204c2e04e4150860275c" prot="private" static="no" mutable="no">
        <type><ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" kindref="compound">Server</ref> *</type>
        <definition>Server* server</definition>
        <argsstring></argsstring>
        <name>server</name>
        <briefdescription>
<para><ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" kindref="compound">Server</ref> containing the user. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="73" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1afa7adf2500939650b598fe1f50203274" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string sessionID</definition>
        <argsstring></argsstring>
        <name>sessionID</name>
        <briefdescription>
<para>Session ID of the user. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Organization of the Session ID</title><para><itemizedlist>
<listitem>
<para>{$name}::{$port}::{$sequence}::{$linux_time}  <orderedlist>
<listitem>
<para>$name: Name of the <ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" kindref="compound">Server</ref>; <ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server_1aeba092e64c8fb4630e28b3d333076246" kindref="member">Server::NAME()</ref>  </para></listitem>
<listitem>
<para>$port: Port number of the <ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" kindref="compound">Server</ref>; <ref refid="d4/de8/classsamchon_1_1protocol_1_1IServer_1a323a09d6b1b257bfcce9cac1b2650bcf" kindref="member">Server::PORT()</ref>  </para></listitem>
<listitem>
<para>$sequence: Sequence number of creation of <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> in <ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" kindref="compound">Server</ref>  </para></listitem>
<listitem>
<para>$linux_time: Linux time of current time.  </para><para>If the object <ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" kindref="compound">Server</ref> is re-constructed, $sequence can be duplicated. $linux_time is to avoid the duplication so that ensures exclusiveness on session id</para><para></para></listitem>
</orderedlist>
</para></listitem>
</itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="94" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1ae03e1e249b0e27fe1eedeed81111553e" prot="private" static="no" mutable="no">
        <type><ref refid="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair" kindref="compound">IPUserPair</ref> *</type>
        <definition>IPUserPair* ipPair</definition>
        <argsstring></argsstring>
        <name>ipPair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="96" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1ac4207b6af75215f4857fa9d7601b66c4" prot="private" static="no" mutable="no">
        <type><ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">library::RWMutex</ref></type>
        <definition>library::RWMutex mtx</definition>
        <argsstring></argsstring>
        <name>mtx</name>
        <briefdescription>
<para>Mutex for container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="104" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a819726b1681abb77cf790c8fe1b59911" prot="private" static="no" mutable="no">
        <type><ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">library::Semaphore</ref> *</type>
        <definition>library::Semaphore* semaphore</definition>
        <argsstring></argsstring>
        <name>semaphore</name>
        <briefdescription>
<para>Semaphore to limit number of thread. </para>        </briefdescription>
        <detaileddescription>
<para>Semaphore in <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> is designed to constraint number of thread. </para><para>It&apos;s recommended to acquire the semaphore when a task from <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref> or <ref refid="d6/df3/classsamchon_1_1protocol_1_1service_1_1Service" kindref="compound">Service</ref> occurs a new thread and you want to avoid exhausted allocation of new threads. </para><para><simplesect kind="note"><para></para></simplesect>
If a task influences to all clients in a user globally, use lock instead of acquire </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="118" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a4bd3d973b37ef92c4536f43b5e0b0d07" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t sequence</definition>
        <argsstring></argsstring>
        <name>sequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="123" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1afd0d68c6d31ff249f3ae8662162663c3" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>Account id. </para>        </briefdescription>
        <detaileddescription>
<para>Default is "guest" </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="133" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a321c2ead2a4079cde828f7491c2ef733" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int authority</definition>
        <argsstring></argsstring>
        <name>authority</name>
        <briefdescription>
<para>Authority allocated to user. </para>        </briefdescription>
        <detaileddescription>
<para>The authority means authority(right, power) level allocated to the user. </para><para>The default value is zero, which means not logged-in user. </para><para><simplesect kind="note"><para></para></simplesect>
Each number of level is not defined clearly. Follwing table is just an example. </para><para><table rows="7" cols="2"><row>
<entry thead="yes"><para>Level </para></entry><entry thead="yes"><para>Definition  </para></entry></row>
<row>
<entry thead="no"><para>-1 </para></entry><entry thead="no"><para></para><para>Banned member </para><para></para><para>The -1 level member is banished by manager or policy </para><para></para></entry></row>
<row>
<entry thead="no"><para>0 </para></entry><entry thead="no"><para></para><para>Guest, Not logged in </para><para></para><para></para><para></para></entry></row>
<row>
<entry thead="no"><para>1 </para></entry><entry thead="no"><para></para><para>Unconfired member </para><para></para><para>The member have applied to the join, but the join was not confirmed by manager or policy yet. </para><para></para></entry></row>
<row>
<entry thead="no"><para>2 </para></entry><entry thead="no"><para></para><para>Confirmed member </para><para></para><para>The member have joined and have already confirmed by manager or policy </para><para></para></entry></row>
<row>
<entry thead="no"><para>3 </para></entry><entry thead="no"><para></para><para>Manager </para><para></para><para>A manager of the application(cloud service). The manager can</para><para><itemizedlist>
<listitem>
<para>Access to the monitoring service. (MonitorService)  </para></listitem>
<listitem>
<para>Access historical log of members whose level are below Manager.  </para></listitem>
<listitem>
<para>Banish or modify level of members whose level are below Manager.  &lt;/u&gt;   </para></listitem>
</itemizedlist>
</para></entry></row>
<row>
<entry thead="no"><para>4 </para></entry><entry thead="no"><para></para><para>Administrator or super Manager </para><para></para><para>Administrator is a Manager of Managers. An administrator can do same thing with Managers, but adminstrator even possible to target Managers as below. </para><para></para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="200" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" bodystart="200" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a0ad38e59cda68a5b1ac54d3953df05e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>User</definition>
        <argsstring>(Server *)</argsstring>
        <name>User</name>
        <param>
          <type><ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" kindref="compound">Server</ref> *</type>
          <defname>server</defname>
        </param>
        <briefdescription>
<para>Construct from server. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>server</parametername>
</parameternamelist>
<parameterdescription>
<para>A server who containing users and clients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sessionID</parametername>
</parameternamelist>
<parameterdescription>
<para>A session ID for discriminating <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref>; A logical identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="209" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.cpp" bodystart="24" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1ab40117147bc880ea0c6647d7be061574" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>~User</definition>
        <argsstring>()</argsstring>
        <name>~User</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="210" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.cpp" bodystart="35" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1ac4dde158d6dd302ea028acb582e9b67a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto size</definition>
        <argsstring>() const  -&gt; size_t</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="215" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.cpp" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1ac9869f6f345741227eeb648e0bb9f84d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto begin</definition>
        <argsstring>() const  -&gt; const_iterator</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="216" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.cpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a39dd3ec2d538d962ba4bc4af6c0ef2f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto end</definition>
        <argsstring>() const  -&gt; const_iterator</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="217" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.cpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a15695407cc5bd6cab82af99f78f8193f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto getServer</definition>
        <argsstring>() const  -&gt; Server *</argsstring>
        <name>getServer</name>
        <briefdescription>
<para>Get server. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="225" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.cpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a3e544bf545c7f185341cdc71a849d9e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto getSemaphore</definition>
        <argsstring>() const  -&gt; library::Semaphore *</argsstring>
        <name>getSemaphore</name>
        <briefdescription>
<para>Get semaphore. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a819726b1681abb77cf790c8fe1b59911" kindref="member">User::semaphore</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="232" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.cpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a6091b4d880130976202cbd33c05b28ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto getID</definition>
        <argsstring>() const  -&gt; std::string</argsstring>
        <name>getID</name>
        <briefdescription>
<para>Get user&apos;s account id. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="237" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.cpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1af44a65768f84f03834675ae3a9be9978" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto getAuthority</definition>
        <argsstring>() const  -&gt; int</argsstring>
        <name>getAuthority</name>
        <briefdescription>
<para>Get authority of user. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a321c2ead2a4079cde828f7491c2ef733" kindref="member">User::authority</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="244" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.cpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1ae0f466a169b2d23786a2f94ac908672c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void sendData</definition>
        <argsstring>(std::shared_ptr&lt; Invoke &gt;) override</argsstring>
        <name>sendData</name>
        <reimplements refid="d4/dcf/classsamchon_1_1protocol_1_1IProtocol_1ac531693224b79ece2762da1e52bec0b6">sendData</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> &gt;</type>
        </param>
        <briefdescription>
<para>Send a message. </para>        </briefdescription>
        <detaileddescription>
<para>Sends <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message to a network system or shifts the responsibility to related chain. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invoke</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message to send to a network system </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="369" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.cpp" bodystart="142" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a5b0e5be870f2d6a26004a8e637a1ce6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void replyData</definition>
        <argsstring>(std::shared_ptr&lt; Invoke &gt;) override</argsstring>
        <name>replyData</name>
        <reimplements refid="d4/dcf/classsamchon_1_1protocol_1_1IProtocol_1a8debd8a0f208dbf9778fe66248443317">replyData</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> &gt;</type>
        </param>
        <briefdescription>
<para>Reply a message. </para>        </briefdescription>
        <detaileddescription>
<para>Handles a replied <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message or shifts the responsibility to related chain. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invoke</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message gotten from a network system </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="370" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.cpp" bodystart="150" bodyend="166"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a042ca7453ab24d74eb69a42e09d52a4d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>auto</type>
        <definition>virtual auto createClient</definition>
        <argsstring>() -&gt; Client *=0</argsstring>
        <name>createClient</name>
        <reimplementedby refid="d7/df1/classsamchon_1_1example_1_1chat__service_1_1ChatUser_1a3a87f595f1e6135245607c425d53cc21">createClient</reimplementedby>
        <briefdescription>
<para>Factory method of a <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a4b3fcb832e01c18da989d50339339ebe" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>auto</type>
        <definition>virtual auto doLogin</definition>
        <argsstring>(std::shared_ptr&lt; Invoke &gt;) -&gt; bool=0</argsstring>
        <name>doLogin</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> &gt;</type>
        </param>
        <briefdescription>
<para>Login and return whether success. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invoke</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message containing parameters for logging-in </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether the log-in is succeded or not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1aade49005b8109a8c7584de155069c7d1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>auto</type>
        <definition>virtual auto doJoin</definition>
        <argsstring>(std::shared_ptr&lt; Invoke &gt;) -&gt; bool=0</argsstring>
        <name>doJoin</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> &gt;</type>
        </param>
        <briefdescription>
<para>Join and returns whether success. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invoke</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message containing paramters for joinning </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether the join is succeded or not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="363" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a3e0e75b8a2360d78ddda3bd1d3d29ce6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addClient</definition>
        <argsstring>(Socket *)</argsstring>
        <name>addClient</name>
        <param>
          <type>Socket *</type>
          <defname>socket</defname>
        </param>
        <briefdescription>
<para>Add a client in user. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>socket</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket for interacting with (physical) client </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="262" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.cpp" bodystart="76" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1ac84930face6fe29ce9c631387d97c76b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eraseClient</definition>
        <argsstring>(size_t)</argsstring>
        <name>eraseClient</name>
        <param>
          <type>size_t</type>
          <defname>no</defname>
        </param>
        <briefdescription>
<para>Erase a <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Erase a <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref> from <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> by its key(no:int). </para><para>When a network connection between server and user(person) was disconnected, matched <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref> is erased from <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> and the <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref> object will be destructed. </para><para>Some reasons of disconnection </para><para><itemizedlist>
<listitem>
<para>An user(not object but person using UI) closed the Window  </para></listitem>
<listitem>
<para>A "closeWindow" command has sent to the Window  </para></listitem>
<listitem>
<para>A network failure has occured  </para></listitem>
</itemizedlist>
</para><para>If the <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref> was the last object remained in the <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref>, the <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> will be destructed too. However, the <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> is not destructed directly but waits for 15 seconds. In the 15 seconds, another <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref> object was created in <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref>, the <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> doesn&apos;t be destructed.</para><para>Some reasons of postponing destruction for 15 seconds </para><para><itemizedlist>
<listitem>
<para>Page direction(href) or redirection in a browser.  </para></listitem>
<listitem>
<para>Temporary network failure.  </para></listitem>
</itemizedlist>
</para><para><simplesect kind="note"><para></para></simplesect>
There&apos;re some tasks that have to completed irrespectively of network connection.</para><para>In that case, although user closed the window or logged-out, matched <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref>, <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref> and <ref refid="d6/df3/classsamchon_1_1protocol_1_1service_1_1Service" kindref="compound">Service</ref> objects haven&apos;t be destructed. They must stay alive until the tasks have completed.</para><para>To stay those objects <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref>, <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref> and <ref refid="d6/df3/classsamchon_1_1protocol_1_1service_1_1Service" kindref="compound">Service</ref>, use follwing macros. Those macros assure the objects to stay alive until the termination matched each stack. </para><para><itemizedlist>
<listitem>
<para>KEEP_USER_ALIVE(Client*)  </para></listitem>
<listitem>
<para>KEEP_CLIENT_ALIVE  </para></listitem>
<listitem>
<para>KEEP_SERVICE_ALIVE  </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>no</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequence number of the client in user </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="306" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.cpp" bodystart="94" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1ab70fee3bcc2301c039decbed0179d648" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void goLogin</definition>
        <argsstring>(std::shared_ptr&lt; Invoke &gt;)</argsstring>
        <name>goLogin</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> &gt;</type>
        </param>
        <briefdescription>
<para>Log-in. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invoke</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a4b3fcb832e01c18da989d50339339ebe" kindref="member">User::doLogin()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="319" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.cpp" bodystart="111" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a70776e060b0e5600803dfc081481b647" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void goJoin</definition>
        <argsstring>(std::shared_ptr&lt; Invoke &gt;)</argsstring>
        <name>goJoin</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> &gt;</type>
        </param>
        <briefdescription>
<para>Join as a member. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>An application; who requested the join command </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invoke</parametername>
</parameternamelist>
<parameterdescription>
<para>AN invoke message containing parameters of joinning </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1aade49005b8109a8c7584de155069c7d1" kindref="member">User::doJoin()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="328" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.cpp" bodystart="121" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a0831ed40caaf28d3365313d7842697aa" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void goLogout</definition>
        <argsstring>()</argsstring>
        <name>goLogout</name>
        <briefdescription>
<para>Log-out. </para>        </briefdescription>
        <detaileddescription>
<para>Log-out account; change id and authority to "guest" and 0. </para><para>Default is to send "closeWindow" message to all clients except the applicant. </para><para><itemizedlist>
<listitem>
<para>Perspective on UI:  </para><para>All windows of the user will be closed by getting an invoke message "closeWindow" except who requested the command log-out. </para><para></para><para>The applicant window will moved to default log-in page. </para><para></para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>A window of browser; client who requested the log-out command </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="346" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.cpp" bodystart="130" bodyend="137"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> containing Client(s) with session-id. </para>    </briefdescription>
    <detaileddescription>
<para>The <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> does not have any network I/O and its own special work something to do. It&apos;s a container for groupping clients by their session id. Thus, the <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> corresponds with an user (Computer) and <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref> corresponds with a client (A browser window) </para><para><image type="html" name="protocol_service.png"></image>
 <image type="latex" name="protocol_service.png"></image>
</para><para>Override those methods <itemizedlist>
<listitem><para><ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a042ca7453ab24d74eb69a42e09d52a4d" kindref="member">createClient()</ref> </para></listitem>
<listitem><para><ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a4b3fcb832e01c18da989d50339339ebe" kindref="member">doLogin()</ref> </para></listitem>
<listitem><para><ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1aade49005b8109a8c7584de155069c7d1" kindref="member">doJoin()</ref></para></listitem>
</itemizedlist>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="2820">
        <label>IProtocol</label>
        <link refid="d4/dcf/classsamchon_1_1protocol_1_1IProtocol"/>
      </node>
      <node id="2821">
        <label>ChatUser</label>
        <link refid="d7/df1/classsamchon_1_1example_1_1chat__service_1_1ChatUser"/>
        <childnode refid="2818" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2819">
        <label>Map&lt; size_t, SmartPointer&lt; Client &gt; &gt;</label>
        <link refid="d1/d4e/classsamchon_1_1Map"/>
      </node>
      <node id="2818">
        <label>User</label>
        <link refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User"/>
        <childnode refid="2819" relation="private-inheritance">
        </childnode>
        <childnode refid="2820" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2831">
        <label>SQLStatement</label>
        <link refid="de/def/classsamchon_1_1library_1_1SQLStatement"/>
        <childnode refid="2832" relation="usage">
          <edgelabel>bindParameterBASizeMap</edgelabel>
        </childnode>
        <childnode refid="2830" relation="usage">
          <edgelabel>sqli</edgelabel>
        </childnode>
      </node>
      <node id="2825">
        <label>Server</label>
        <link refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server"/>
        <childnode refid="2826" relation="private-inheritance">
        </childnode>
        <childnode refid="2827" relation="public-inheritance">
        </childnode>
        <childnode refid="2828" relation="usage">
          <edgelabel>mtx</edgelabel>
        </childnode>
        <childnode refid="2829" relation="usage">
          <edgelabel>ipMap</edgelabel>
        </childnode>
        <childnode refid="2830" relation="usage">
          <edgelabel>sqli</edgelabel>
        </childnode>
      </node>
      <node id="2832">
        <label>Map&lt; size_t, SQL_SIZE_T &gt;</label>
        <link refid="d1/d4e/classsamchon_1_1Map"/>
      </node>
      <node id="2824">
        <label>IProtocol</label>
        <link refid="d4/dcf/classsamchon_1_1protocol_1_1IProtocol"/>
      </node>
      <node id="2833">
        <label>IPUserPair</label>
        <link refid="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair"/>
        <childnode refid="2825" relation="usage">
          <edgelabel>server</edgelabel>
        </childnode>
      </node>
      <node id="2827">
        <label>IServer</label>
        <link refid="d4/de8/classsamchon_1_1protocol_1_1IServer"/>
      </node>
      <node id="2826">
        <label>Dictionary&lt; SmartPointer&lt; User &gt; &gt;</label>
        <link refid="d1/d4e/classsamchon_1_1Map"/>
      </node>
      <node id="2823">
        <label>Map&lt; size_t, SmartPointer&lt; Client &gt; &gt;</label>
        <link refid="d1/d4e/classsamchon_1_1Map"/>
      </node>
      <node id="2834">
        <label>Semaphore</label>
        <link refid="d9/d88/classsamchon_1_1library_1_1Semaphore"/>
      </node>
      <node id="2829">
        <label>Map&lt; std::shared_ptr&lt; samchon::protocol::service::IPUserPair &gt; &gt;</label>
        <link refid="d1/d4e/classsamchon_1_1Map"/>
      </node>
      <node id="2830">
        <label>SQLi</label>
        <link refid="d9/d2f/classsamchon_1_1library_1_1SQLi"/>
        <childnode refid="2831" relation="usage">
          <edgelabel>stmt</edgelabel>
        </childnode>
      </node>
      <node id="2828">
        <label>RWMutex</label>
        <link refid="df/d85/classsamchon_1_1library_1_1RWMutex"/>
      </node>
      <node id="2822">
        <label>User</label>
        <link refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User"/>
        <childnode refid="2823" relation="private-inheritance">
        </childnode>
        <childnode refid="2824" relation="public-inheritance">
        </childnode>
        <childnode refid="2825" relation="usage">
          <edgelabel>server</edgelabel>
        </childnode>
        <childnode refid="2833" relation="usage">
          <edgelabel>ipPair</edgelabel>
        </childnode>
        <childnode refid="2834" relation="usage">
          <edgelabel>semaphore</edgelabel>
        </childnode>
        <childnode refid="2828" relation="usage">
          <edgelabel>mtx</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" line="59" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/User.hpp" bodystart="56" bodyend="371"/>
    <listofallmembers>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a3e0e75b8a2360d78ddda3bd1d3d29ce6" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>addClient</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a321c2ead2a4079cde828f7491c2ef733" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>authority</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1ac9869f6f345741227eeb648e0bb9f84d" prot="public" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>begin</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a042ca7453ab24d74eb69a42e09d52a4d" prot="protected" virt="pure-virtual"><scope>samchon::protocol::service::User</scope><name>createClient</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1aade49005b8109a8c7584de155069c7d1" prot="protected" virt="pure-virtual"><scope>samchon::protocol::service::User</scope><name>doJoin</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a4b3fcb832e01c18da989d50339339ebe" prot="protected" virt="pure-virtual"><scope>samchon::protocol::service::User</scope><name>doLogin</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a39dd3ec2d538d962ba4bc4af6c0ef2f6" prot="public" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>end</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1ac84930face6fe29ce9c631387d97c76b" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>eraseClient</name></member>
      <member refid="d1/d4e/classsamchon_1_1Map_1a545c462f3efea27e9689670c776cd3d3" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>get</name></member>
      <member refid="d1/d4e/classsamchon_1_1Map_1ace518b0649014b10ec69a455a78ef7dc" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>get</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1af44a65768f84f03834675ae3a9be9978" prot="public" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>getAuthority</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a6091b4d880130976202cbd33c05b28ef" prot="public" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>getID</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a3e544bf545c7f185341cdc71a849d9e2" prot="public" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>getSemaphore</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a15695407cc5bd6cab82af99f78f8193f" prot="public" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>getServer</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a70776e060b0e5600803dfc081481b647" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>goJoin</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1ab70fee3bcc2301c039decbed0179d648" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>goLogin</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a0831ed40caaf28d3365313d7842697aa" prot="private" virt="virtual"><scope>samchon::protocol::service::User</scope><name>goLogout</name></member>
      <member refid="d1/d4e/classsamchon_1_1Map_1a7d21fcd2b73466da3ca65f2dae888d3f" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>has</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1afd0d68c6d31ff249f3ae8662162663c3" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>id</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1ae03e1e249b0e27fe1eedeed81111553e" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>ipPair</name></member>
      <member refid="d4/dcf/classsamchon_1_1protocol_1_1IProtocol_1a6258c530c328dc119e698bb7e7fe222a" prot="public" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>IProtocol</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1ac4207b6af75215f4857fa9d7601b66c4" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>mtx</name></member>
      <member refid="d1/d4e/classsamchon_1_1Map_1aeb58271a651715110b73bc6553553a9c" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>pop</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a5b0e5be870f2d6a26004a8e637a1ce6c" prot="public" virt="virtual"><scope>samchon::protocol::service::User</scope><name>replyData</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a819726b1681abb77cf790c8fe1b59911" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>semaphore</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1ae0f466a169b2d23786a2f94ac908672c" prot="public" virt="virtual"><scope>samchon::protocol::service::User</scope><name>sendData</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a4bd3d973b37ef92c4536f43b5e0b0d07" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>sequence</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a5d5d629095a6204c2e04e4150860275c" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>server</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1afa7adf2500939650b598fe1f50203274" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>sessionID</name></member>
      <member refid="d1/d4e/classsamchon_1_1Map_1a12916456879276c43d0b3ca12e3cf89b" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>set</name></member>
      <member refid="d1/d4e/classsamchon_1_1Map_1a9f8ba1582bd870c7ce22db5f611b8775" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>set</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1ac4dde158d6dd302ea028acb582e9b67a" prot="public" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>size</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a1bddff49368f9ceffa1f87348769dc39" prot="private" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>super</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1a0ad38e59cda68a5b1ac54d3953df05e4" prot="public" virt="non-virtual"><scope>samchon::protocol::service::User</scope><name>User</name></member>
      <member refid="d4/dcf/classsamchon_1_1protocol_1_1IProtocol_1a51a537c2b3a6ff5eb7b5ed859cc062ad" prot="public" virt="virtual"><scope>samchon::protocol::service::User</scope><name>~IProtocol</name></member>
      <member refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User_1ab40117147bc880ea0c6647d7be061574" prot="public" virt="virtual"><scope>samchon::protocol::service::User</scope><name>~User</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
