<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair" kind="class" language="C++" prot="public">
    <compoundname>samchon::protocol::service::IPUserPair</compoundname>
    <includes refid="d3/d3e/IPUserPair_8hpp" local="no">IPUserPair.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair_1ac2055578ac48afabe5af487878450f68" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Server</definition>
        <argsstring></argsstring>
        <name>Server</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.hpp" line="52" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair_1a38c437d9dcaefebe4efaf0edf00c45de" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class User</definition>
        <argsstring></argsstring>
        <name>User</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.hpp" line="53" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair_1a5d5d629095a6204c2e04e4150860275c" prot="private" static="no" mutable="no">
        <type><ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" kindref="compound">Server</ref> *</type>
        <definition>Server* server</definition>
        <argsstring></argsstring>
        <name>server</name>
        <briefdescription>
<para>The <ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" kindref="compound">Server</ref> containing IP addresses and User(s) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.hpp" line="59" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair_1a319b95015f17a3dc8b4b43a65c541571" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string ip</definition>
        <argsstring></argsstring>
        <name>ip</name>
        <briefdescription>
<para>An IP address. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.hpp" line="64" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair_1a4819b1479fa0611cf24df092b076f0ef" prot="private" static="no" mutable="no">
        <type>std::set&lt; const <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> * &gt;</type>
        <definition>std::set&lt;const User*&gt; userSet</definition>
        <argsstring></argsstring>
        <name>userSet</name>
        <briefdescription>
<para>User(s) belongs to the IP address. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.hpp" line="69" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair_1ab70003abfdc70e45a55e066d5ac1fceb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IPUserPair</definition>
        <argsstring>(Server *server, const std::string &amp;)</argsstring>
        <name>IPUserPair</name>
        <param>
          <type><ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" kindref="compound">Server</ref> *</type>
          <declname>server</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
<para>Construct from <ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" kindref="compound">Server</ref> and IP address. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.hpp" line="75" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.cpp" bodystart="25" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair_1a1c93a51c59aa9afcf152747650249f2c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto getSessionID</definition>
        <argsstring>(Socket *, size_t) -&gt; std::string</argsstring>
        <name>getSessionID</name>
        <param>
          <type>Socket *</type>
          <defname>socket</defname>
        </param>
        <param>
          <type>size_t</type>
          <defname>sequence</defname>
        </param>
        <briefdescription>
<para>Get a session ID. </para>        </briefdescription>
        <detaileddescription>
<para>Asks Whether client to have a session id stored in cookie. </para><para>If client has, get the session id from client, but if not, issues a new session ID and notify it(enrolled new session ID) to client. Additionally, if the session id was gotten from a client, inspect validate of the session ID. </para><para>Those tasks will hold a critical section of a global IP address </para><para><simplesect kind="warning"><para>The session id must be unique </para></simplesect>
<simplesect kind="return"><para>A new session ID that can ensure uniqueness </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.hpp" line="92" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.cpp" bodystart="30" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair_1a2539aae28f1eca512df21da618f62eba" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto issueSessionID</definition>
        <argsstring>(size_t) const  -&gt; std::string</argsstring>
        <name>issueSessionID</name>
        <param>
          <type>size_t</type>
          <defname>sequence</defname>
        </param>
        <briefdescription>
<para>Issue a session ID. </para>        </briefdescription>
        <detaileddescription>
<para>Issues a session ID when a target client haven&apos;t issued seesion ID yet</para><para><simplesect kind="par"><title>Default organization of the Session ID</title><para><itemizedlist>
<listitem>
<para>{$name}::{$port}::{$sequence}::{$linux_time}  <orderedlist>
<listitem>
<para>$name: Name of the <ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" kindref="compound">Server</ref>; <ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server_1aeba092e64c8fb4630e28b3d333076246" kindref="member">Server::NAME()</ref>  </para></listitem>
<listitem>
<para>$port: Port number of the <ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" kindref="compound">Server</ref>; <ref refid="d4/de8/classsamchon_1_1protocol_1_1IServer_1a323a09d6b1b257bfcce9cac1b2650bcf" kindref="member">Server::PORT()</ref>  </para></listitem>
<listitem>
<para>$sequence: Sequence number of creation of <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> in <ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" kindref="compound">Server</ref>  </para></listitem>
<listitem>
<para>$linux_time: Linux time of current time.  </para><para>If the object <ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" kindref="compound">Server</ref> is re-constructed, $sequence can be duplicated. $linux_time is to avoid the duplication so that can ensure uniqueness on session id</para><para></para></listitem>
</orderedlist>
</para></listitem>
</itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.hpp" line="113" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.cpp" bodystart="81" bodyend="94"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Relationship between IP address and <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> for issuing session. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair" kindref="compound">IPUserPair</ref> is a class representing 1:N relationship between IP address and <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref>. </para><para>The key role of <ref refid="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair" kindref="compound">IPUserPair</ref> is to issuing session ID, that is published to User(s), within a critical section of an IP address. </para><para><image type="html" name="protocol_service.png"></image>
 <image type="latex" name="protocol_service.png"></image>
</para><para><simplesect kind="note"><para></para></simplesect>
Samchon Framework is for Cloud <ref refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server" kindref="compound">Server</ref> basically, so I&apos;ve adopted Session ID to discriminate unique <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> to follow standard. But I think there can be another good strategies something like a using MAC address instead of publishing Session-ID to discriminate uniqueness of <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref>. It&apos;s okay to adapt those strategies and rebuild my framework&apos;s source to be suitable for those. </para><para><simplesect kind="warning"><para></para></simplesect>
When changing the strategy, you&apos;ve to careful about policy of each system or libraries. </para><para>Followings are something to consider when adjusting MAC address for uniqueness. </para><para><itemizedlist>
<listitem><para>In server side and view of socket, boost::asio or candidate network i/o libary of stl does not allow accessing otherside system&apos;s MAC address. But basic socket of window or linux are allowed. </para></listitem>
<listitem><para>In client side and view of browser, IE allows to get MAC address by javascript with ActiveX, but other browsers do not allow.</para></listitem>
</itemizedlist>
<simplesect kind="see"><para><ref refid="db/d64/namespacesamchon_1_1protocol" kindref="compound">samchon::protocol</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d8/d70/namespacesamchon_1_1protocol_1_1service" kindref="compound">samchon::protocol::service</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="2006">
        <label>SQLStatement</label>
        <link refid="de/def/classsamchon_1_1library_1_1SQLStatement"/>
        <childnode refid="2007" relation="usage">
          <edgelabel>bindParameterBASizeMap</edgelabel>
        </childnode>
        <childnode refid="2005" relation="usage">
          <edgelabel>sqli</edgelabel>
        </childnode>
      </node>
      <node id="2000">
        <label>Server</label>
        <link refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server"/>
        <childnode refid="2001" relation="private-inheritance">
        </childnode>
        <childnode refid="2002" relation="public-inheritance">
        </childnode>
        <childnode refid="2003" relation="usage">
          <edgelabel>mtx</edgelabel>
        </childnode>
        <childnode refid="2004" relation="usage">
          <edgelabel>ipMap</edgelabel>
        </childnode>
        <childnode refid="2005" relation="usage">
          <edgelabel>sqli</edgelabel>
        </childnode>
      </node>
      <node id="2007">
        <label>Map&lt; size_t, SQL_SIZE_T &gt;</label>
        <link refid="d1/d4e/classsamchon_1_1Map"/>
      </node>
      <node id="1999">
        <label>IPUserPair</label>
        <link refid="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair"/>
        <childnode refid="2000" relation="usage">
          <edgelabel>server</edgelabel>
        </childnode>
      </node>
      <node id="2002">
        <label>IServer</label>
        <link refid="d4/de8/classsamchon_1_1protocol_1_1IServer"/>
      </node>
      <node id="2001">
        <label>Dictionary&lt; SmartPointer&lt; User &gt; &gt;</label>
        <link refid="d1/d4e/classsamchon_1_1Map"/>
      </node>
      <node id="2004">
        <label>Map&lt; std::shared_ptr&lt; samchon::protocol::service::IPUserPair &gt; &gt;</label>
        <link refid="d1/d4e/classsamchon_1_1Map"/>
      </node>
      <node id="2005">
        <label>SQLi</label>
        <link refid="d9/d2f/classsamchon_1_1library_1_1SQLi"/>
        <childnode refid="2006" relation="usage">
          <edgelabel>stmt</edgelabel>
        </childnode>
      </node>
      <node id="2003">
        <label>RWMutex</label>
        <link refid="df/d85/classsamchon_1_1library_1_1RWMutex"/>
      </node>
    </collaborationgraph>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.hpp" line="51" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/IPUserPair.hpp" bodystart="50" bodyend="114"/>
    <listofallmembers>
      <member refid="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair_1a1c93a51c59aa9afcf152747650249f2c" prot="private" virt="non-virtual"><scope>samchon::protocol::service::IPUserPair</scope><name>getSessionID</name></member>
      <member refid="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair_1a319b95015f17a3dc8b4b43a65c541571" prot="private" virt="non-virtual"><scope>samchon::protocol::service::IPUserPair</scope><name>ip</name></member>
      <member refid="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair_1ab70003abfdc70e45a55e066d5ac1fceb" prot="private" virt="non-virtual"><scope>samchon::protocol::service::IPUserPair</scope><name>IPUserPair</name></member>
      <member refid="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair_1a2539aae28f1eca512df21da618f62eba" prot="private" virt="non-virtual"><scope>samchon::protocol::service::IPUserPair</scope><name>issueSessionID</name></member>
      <member refid="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair_1a5d5d629095a6204c2e04e4150860275c" prot="private" virt="non-virtual"><scope>samchon::protocol::service::IPUserPair</scope><name>server</name></member>
      <member refid="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair_1a4819b1479fa0611cf24df092b076f0ef" prot="private" virt="non-virtual"><scope>samchon::protocol::service::IPUserPair</scope><name>userSet</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
