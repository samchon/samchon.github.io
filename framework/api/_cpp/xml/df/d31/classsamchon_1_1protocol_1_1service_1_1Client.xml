<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>samchon::protocol::service::Client</compoundname>
    <basecompoundref refid="d3/dc8/classsamchon_1_1protocol_1_1IClient" prot="public" virt="non-virtual">IClient</basecompoundref>
    <derivedcompoundref refid="d4/dba/classsamchon_1_1example_1_1chat__service_1_1ChatClient" prot="public" virt="non-virtual">ChatClient</derivedcompoundref>
    <includes refid="d3/d8e/Client_8hpp" local="no">Client.hpp</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a20f20ccd18667a334f2b58d1996c7f2c" prot="private" static="no">
        <type><ref refid="d3/dc8/classsamchon_1_1protocol_1_1IClient" kindref="compound">IClient</ref></type>
        <definition>typedef IClient super</definition>
        <argsstring></argsstring>
        <name>super</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" line="52" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1ac2055578ac48afabe5af487878450f68" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Server</definition>
        <argsstring></argsstring>
        <name>Server</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" line="48" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a38c437d9dcaefebe4efaf0edf00c45de" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class User</definition>
        <argsstring></argsstring>
        <name>User</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" line="49" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a1fe74be3d2df58afd6bcfbcb78353f83" prot="protected" static="no" mutable="no">
        <type><ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> *</type>
        <definition>User* user</definition>
        <argsstring></argsstring>
        <name>user</name>
        <briefdescription>
<para>An <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> of the <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" line="58" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1afc7a5728675a38332c4894273492ea22" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t no</definition>
        <argsstring></argsstring>
        <name>no</name>
        <briefdescription>
<para>A sequence number of the <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref> in an <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" line="63" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a6510dc7c99b8e51db8cc48e0021579f7" prot="protected" static="no" mutable="no">
        <type><ref refid="d6/df3/classsamchon_1_1protocol_1_1service_1_1Service" kindref="compound">Service</ref> *</type>
        <definition>Service* service</definition>
        <argsstring></argsstring>
        <name>service</name>
        <briefdescription>
<para>A <ref refid="d6/df3/classsamchon_1_1protocol_1_1service_1_1Service" kindref="compound">Service</ref> belongs to the <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" line="68" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a150d6072b68c196c3998e6e8ea53cac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Client</definition>
        <argsstring>(User *)</argsstring>
        <name>Client</name>
        <param>
          <type><ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> *</type>
          <defname>user</defname>
        </param>
        <briefdescription>
<para>Construct from <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref>, No and socket. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> containing the <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" line="76" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.cpp" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a37731a8f5dd5caca4cc2ddb8b556cd6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>~Client</definition>
        <argsstring>()</argsstring>
        <name>~Client</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" line="77" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a0297e2a9f65bd00560f7b6fe811d7cad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto getUser</definition>
        <argsstring>() const  -&gt; User *</argsstring>
        <name>getUser</name>
        <briefdescription>
<para>Get <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" line="94" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.cpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a530647cbcd3d26256f6877a0e08f6f75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto getService</definition>
        <argsstring>() const  -&gt; Service *</argsstring>
        <name>getService</name>
        <briefdescription>
<para>Get <ref refid="d6/df3/classsamchon_1_1protocol_1_1service_1_1Service" kindref="compound">Service</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" line="99" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.cpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a3afbe08f5f454787214e94a2e0202b95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto getNo</definition>
        <argsstring>() const  -&gt; size_t</argsstring>
        <name>getNo</name>
        <briefdescription>
<para>Get no. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" line="104" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.cpp" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a7e9e36d7847d933abbf3b1eda35aab0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void sendData</definition>
        <argsstring>(std::shared_ptr&lt; Invoke &gt;)</argsstring>
        <name>sendData</name>
        <reimplements refid="d3/dc8/classsamchon_1_1protocol_1_1IClient_1a7e9e36d7847d933abbf3b1eda35aab0d">sendData</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> &gt;</type>
        </param>
        <briefdescription>
<para>Send <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message to (physical) client. </para>        </briefdescription>
        <detaileddescription>
<para>Method sendData of <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref> does not only send <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message to client system, but also archives the <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message to database system as a historical-log. </para><para><simplesect kind="note"><para></para></simplesect>
Method sendData monopolies a critical section. </para><para>How many threads have called that sendData, the <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> messages are delivered sequentially.</para><para><itemizedlist>
<listitem><para>Using sendData with a new thread is not recommended</para></listitem>
</itemizedlist>
<simplesect kind="warning"><para>You can&apos;t override this method, sendData. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invoke</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message to send </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" line="122" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.cpp" bodystart="64" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a154cfbf14606a016ffe8d2cc4612be14" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void replyData</definition>
        <argsstring>(std::shared_ptr&lt; Invoke &gt;)</argsstring>
        <name>replyData</name>
        <reimplements refid="d4/dcf/classsamchon_1_1protocol_1_1IProtocol_1a8debd8a0f208dbf9778fe66248443317">replyData</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> &gt;</type>
        </param>
        <briefdescription>
<para>Reply <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message from (physical) client. </para>        </briefdescription>
        <detaileddescription>
<para>Handles replied <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message from client system. </para><para><orderedlist>
<listitem>
<para>Constructs <ref refid="d6/df3/classsamchon_1_1protocol_1_1service_1_1Service" kindref="compound">Service</ref>  <itemizedlist>
<listitem>
<para>Constructs <ref refid="d6/df3/classsamchon_1_1protocol_1_1service_1_1Service" kindref="compound">Service</ref> by requested service name.  </para></listitem>
<listitem>
<para>Notifies client system whether the user satisfies the authority.  </para></listitem>
</itemizedlist>
</para></listitem>
<listitem>
<para>Shifts responsibility to related chain.  <itemizedlist>
<listitem>
<para><ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message is about member (join, login, etc.), shift to <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref>.  </para></listitem>
<listitem>
<para>Except that all, shifts to <ref refid="d6/df3/classsamchon_1_1protocol_1_1service_1_1Service" kindref="compound">Service</ref>.  </para></listitem>
</itemizedlist>
</para></listitem>
<listitem>
<para>Archives the <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message to Database system as a historical-log.  <itemizedlist>
<listitem>
<para><ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> to HISTORY_INVOKE table, with <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref>&apos;s session and <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref>&apos;s sequence id.  </para></listitem>
<listitem>
<para>InvokeParameters(s) to HISTORY_INVOKE_PARAMETER with key of HISTORY_INVOKE as foriegn key.  </para></listitem>
</itemizedlist>
</para></listitem>
</orderedlist>
</para><para><simplesect kind="note"><para></para></simplesect>
<simplesect kind="par"><title>Historical-log</title><para></para></simplesect>
HISTORY_INVOKE and HISTORY_INVOKE_PARAMETER has a 1:N relationship </para><para>If you want to modify archiving method, override method of Server::archiveReplyData() </para><para><simplesect kind="par"><title>Shifting responsibility to Service</title><para></para></simplesect>
<ref refid="d4/dcf/classsamchon_1_1protocol_1_1IProtocol_1a8debd8a0f208dbf9778fe66248443317" kindref="member">Service::replyData</ref> will be called by a new thread. The thread will acquire an admission from semaphore in <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> to avoid exhausted allocation of threads.</para><para><simplesect kind="par"><title>Exception handling</title><para></para></simplesect>
If an std::exception has thrown from <ref refid="d4/dcf/classsamchon_1_1protocol_1_1IProtocol_1a8debd8a0f208dbf9778fe66248443317" kindref="member">Service::replyData</ref>, the exception will archived in Database (HISTORY_INVOKE_EXCEPTION) </para><para>The most famous thrown parameters like std::exception, std::invalid_argument and std::runtime_error, those are all derived from std::exception. <linebreak/>
 <nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> -&gt; <ulink url="http://www.cplusplus.com/reference/stdexcept/">http://www.cplusplus.com/reference/stdexcept/</ulink> </para><para><itemizedlist>
<listitem>
<para>std::exception  <itemizedlist>
<listitem>
<para>std::logic_error  <itemizedlist>
<listitem>
<para>std::domain_error  </para></listitem>
<listitem>
<para>std::invalid_argument  </para></listitem>
<listitem>
<para>std::length_error  </para></listitem>
<listitem>
<para>std::out_of_range  </para></listitem>
<listitem>
<para>std::future_error  </para></listitem>
</itemizedlist>
</para></listitem>
<listitem>
<para>std::runtime_error  <itemizedlist>
<listitem>
<para>std::range_error  </para></listitem>
<listitem>
<para>std::overflow_error  </para></listitem>
<listitem>
<para>std::underflow_error  </para></listitem>
<listitem>
<para>std::system_error  </para></listitem>
</itemizedlist>
</para></listitem>
</itemizedlist>
</para><para><simplesect kind="warning"><para></para></simplesect>
You can&apos;t override this method, replyData. </para><para></para><para>If you want to modify replyData&apos;s rule, override related objects&apos; replyData </para><para></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invoke</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message replied from client system </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" line="191" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.cpp" bodystart="94" bodyend="121"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1af1f4cd7de73bb2f7196cb99a650c6a5d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>auto</type>
        <definition>virtual auto createService</definition>
        <argsstring>(const std::string &amp;) -&gt; Service *=0</argsstring>
        <name>createService</name>
        <reimplementedby refid="d4/dba/classsamchon_1_1example_1_1chat__service_1_1ChatClient_1aea030aa63595036ed1c31e3ad0e660bd">createService</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
<para>Factory method of <ref refid="d6/df3/classsamchon_1_1protocol_1_1service_1_1Service" kindref="compound">Service</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested name representing a <ref refid="d6/df3/classsamchon_1_1protocol_1_1service_1_1Service" kindref="compound">Service</ref> from the (physical) client </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="d6/df3/classsamchon_1_1protocol_1_1service_1_1Service" kindref="compound">Service</ref> belongs the the <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a7ba03d23f0fe6a45f3a367d55a660365" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto __keepAlive</definition>
        <argsstring>() -&gt; ServiceKeeper</argsstring>
        <name>__keepAlive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" line="88" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.cpp" bodystart="40" bodyend="43"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a6d3b6e70513afbb93b5f8c540f61728b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void constructService</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>constructService</name>
        <param>
          <type>const std::string &amp;</type>
          <defname>name</defname>
        </param>
        <briefdescription>
<para>Construct <ref refid="d6/df3/classsamchon_1_1protocol_1_1service_1_1Service" kindref="compound">Service</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Constructs <ref refid="d6/df3/classsamchon_1_1protocol_1_1service_1_1Service" kindref="compound">Service</ref> by requested name from client and notify whether the <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref> is satisfying authority. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>A name representing type of <ref refid="d6/df3/classsamchon_1_1protocol_1_1service_1_1Service" kindref="compound">Service</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" line="203" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.cpp" bodystart="123" bodyend="149"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A network boundary with the client in an <ref refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User" kindref="compound">User</ref>. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref> is an object interacting with physical client by socket. </para><para>The <ref refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client" kindref="compound">Client</ref> is correspond with a Window in JS (UI) 1:1 </para><para><itemizedlist>
<listitem><para>A Window, the object in UI </para></listitem>
<listitem><para>A Window, matching with window of a internet browser</para></listitem>
</itemizedlist>
<image type="html" name="protocol_service.png"></image>
 <image type="latex" name="protocol_service.png"></image>
</para><para><simplesect kind="note"><para>Method to override <itemizedlist>
<listitem><para>createUser()</para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="db/d64/namespacesamchon_1_1protocol" kindref="compound">samchon::protocol</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d8/d70/namespacesamchon_1_1protocol_1_1service" kindref="compound">samchon::protocol::service</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1089">
        <label>IProtocol</label>
        <link refid="d4/dcf/classsamchon_1_1protocol_1_1IProtocol"/>
      </node>
      <node id="1087">
        <label>Client</label>
        <link refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client"/>
        <childnode refid="1088" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1088">
        <label>IClient</label>
        <link refid="d3/dc8/classsamchon_1_1protocol_1_1IClient"/>
        <childnode refid="1089" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1090">
        <label>ChatClient</label>
        <link refid="d4/dba/classsamchon_1_1example_1_1chat__service_1_1ChatClient"/>
        <childnode refid="1087" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1103">
        <label>SQLStatement</label>
        <link refid="de/def/classsamchon_1_1library_1_1SQLStatement"/>
        <childnode refid="1104" relation="usage">
          <edgelabel>bindParameterBASizeMap</edgelabel>
        </childnode>
        <childnode refid="1102" relation="usage">
          <edgelabel>sqli</edgelabel>
        </childnode>
      </node>
      <node id="1097">
        <label>Server</label>
        <link refid="d9/d35/classsamchon_1_1protocol_1_1service_1_1Server"/>
        <childnode refid="1098" relation="private-inheritance">
        </childnode>
        <childnode refid="1099" relation="public-inheritance">
        </childnode>
        <childnode refid="1100" relation="usage">
          <edgelabel>mtx</edgelabel>
        </childnode>
        <childnode refid="1101" relation="usage">
          <edgelabel>ipMap</edgelabel>
        </childnode>
        <childnode refid="1102" relation="usage">
          <edgelabel>sqli</edgelabel>
        </childnode>
      </node>
      <node id="1104">
        <label>Map&lt; size_t, SQL_SIZE_T &gt;</label>
        <link refid="d1/d4e/classsamchon_1_1Map"/>
      </node>
      <node id="1093">
        <label>IProtocol</label>
        <link refid="d4/dcf/classsamchon_1_1protocol_1_1IProtocol"/>
      </node>
      <node id="1094">
        <label>Service</label>
        <link refid="d6/df3/classsamchon_1_1protocol_1_1service_1_1Service"/>
        <childnode refid="1093" relation="public-inheritance">
        </childnode>
        <childnode refid="1091" relation="usage">
          <edgelabel>client</edgelabel>
        </childnode>
      </node>
      <node id="1105">
        <label>IPUserPair</label>
        <link refid="df/dc6/classsamchon_1_1protocol_1_1service_1_1IPUserPair"/>
        <childnode refid="1097" relation="usage">
          <edgelabel>server</edgelabel>
        </childnode>
      </node>
      <node id="1099">
        <label>IServer</label>
        <link refid="d4/de8/classsamchon_1_1protocol_1_1IServer"/>
      </node>
      <node id="1098">
        <label>Dictionary&lt; SmartPointer&lt; User &gt; &gt;</label>
        <link refid="d1/d4e/classsamchon_1_1Map"/>
      </node>
      <node id="1091">
        <label>Client</label>
        <link refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client"/>
        <childnode refid="1092" relation="public-inheritance">
        </childnode>
        <childnode refid="1094" relation="usage">
          <edgelabel>service</edgelabel>
        </childnode>
        <childnode refid="1095" relation="usage">
          <edgelabel>user</edgelabel>
        </childnode>
      </node>
      <node id="1092">
        <label>IClient</label>
        <link refid="d3/dc8/classsamchon_1_1protocol_1_1IClient"/>
        <childnode refid="1093" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1096">
        <label>Map&lt; size_t, SmartPointer&lt; Client &gt; &gt;</label>
        <link refid="d1/d4e/classsamchon_1_1Map"/>
      </node>
      <node id="1106">
        <label>Semaphore</label>
        <link refid="d9/d88/classsamchon_1_1library_1_1Semaphore"/>
      </node>
      <node id="1101">
        <label>Map&lt; std::shared_ptr&lt; samchon::protocol::service::IPUserPair &gt; &gt;</label>
        <link refid="d1/d4e/classsamchon_1_1Map"/>
      </node>
      <node id="1102">
        <label>SQLi</label>
        <link refid="d9/d2f/classsamchon_1_1library_1_1SQLi"/>
        <childnode refid="1103" relation="usage">
          <edgelabel>stmt</edgelabel>
        </childnode>
      </node>
      <node id="1100">
        <label>RWMutex</label>
        <link refid="df/d85/classsamchon_1_1library_1_1RWMutex"/>
      </node>
      <node id="1095">
        <label>User</label>
        <link refid="df/d87/classsamchon_1_1protocol_1_1service_1_1User"/>
        <childnode refid="1096" relation="private-inheritance">
        </childnode>
        <childnode refid="1093" relation="public-inheritance">
        </childnode>
        <childnode refid="1097" relation="usage">
          <edgelabel>server</edgelabel>
        </childnode>
        <childnode refid="1105" relation="usage">
          <edgelabel>ipPair</edgelabel>
        </childnode>
        <childnode refid="1106" relation="usage">
          <edgelabel>semaphore</edgelabel>
        </childnode>
        <childnode refid="1100" relation="usage">
          <edgelabel>mtx</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" line="47" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/service/Client.hpp" bodystart="45" bodyend="204"/>
    <listofallmembers>
      <member refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a7ba03d23f0fe6a45f3a367d55a660365" prot="protected" virt="non-virtual"><scope>samchon::protocol::service::Client</scope><name>__keepAlive</name></member>
      <member refid="d3/dc8/classsamchon_1_1protocol_1_1IClient_1aa3ceab5738d3d60e963bb177d5847f14" prot="protected" virt="virtual"><scope>samchon::protocol::service::Client</scope><name>_replyData</name></member>
      <member refid="d3/dc8/classsamchon_1_1protocol_1_1IClient_1a68ee198dd9bae714dab92bb6374f8d95" prot="protected" virt="virtual"><scope>samchon::protocol::service::Client</scope><name>BUFFER_SIZE</name></member>
      <member refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a150d6072b68c196c3998e6e8ea53cac3" prot="public" virt="non-virtual"><scope>samchon::protocol::service::Client</scope><name>Client</name></member>
      <member refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a6d3b6e70513afbb93b5f8c540f61728b" prot="private" virt="non-virtual"><scope>samchon::protocol::service::Client</scope><name>constructService</name></member>
      <member refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1af1f4cd7de73bb2f7196cb99a650c6a5d" prot="protected" virt="pure-virtual"><scope>samchon::protocol::service::Client</scope><name>createService</name></member>
      <member refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a3afbe08f5f454787214e94a2e0202b95" prot="public" virt="non-virtual"><scope>samchon::protocol::service::Client</scope><name>getNo</name></member>
      <member refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a530647cbcd3d26256f6877a0e08f6f75" prot="public" virt="non-virtual"><scope>samchon::protocol::service::Client</scope><name>getService</name></member>
      <member refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a0297e2a9f65bd00560f7b6fe811d7cad" prot="public" virt="non-virtual"><scope>samchon::protocol::service::Client</scope><name>getUser</name></member>
      <member refid="d3/dc8/classsamchon_1_1protocol_1_1IClient_1a7d9b7003a224b6050168eede30b914a4" prot="public" virt="non-virtual"><scope>samchon::protocol::service::Client</scope><name>IClient</name></member>
      <member refid="d4/dcf/classsamchon_1_1protocol_1_1IProtocol_1a6258c530c328dc119e698bb7e7fe222a" prot="public" virt="non-virtual"><scope>samchon::protocol::service::Client</scope><name>IProtocol</name></member>
      <member refid="d3/dc8/classsamchon_1_1protocol_1_1IClient_1a458bbe4cf81360301586b2e62a7f9dd2" prot="public" virt="virtual"><scope>samchon::protocol::service::Client</scope><name>listen</name></member>
      <member refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1afc7a5728675a38332c4894273492ea22" prot="protected" virt="non-virtual"><scope>samchon::protocol::service::Client</scope><name>no</name></member>
      <member refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a154cfbf14606a016ffe8d2cc4612be14" prot="public" virt="virtual"><scope>samchon::protocol::service::Client</scope><name>replyData</name></member>
      <member refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a7e9e36d7847d933abbf3b1eda35aab0d" prot="public" virt="virtual"><scope>samchon::protocol::service::Client</scope><name>sendData</name></member>
      <member refid="d3/dc8/classsamchon_1_1protocol_1_1IClient_1a4d6d58450d4b275cd6200bdcfb05403f" prot="protected" virt="non-virtual"><scope>samchon::protocol::service::Client</scope><name>sendMtx</name></member>
      <member refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a6510dc7c99b8e51db8cc48e0021579f7" prot="protected" virt="non-virtual"><scope>samchon::protocol::service::Client</scope><name>service</name></member>
      <member refid="d3/dc8/classsamchon_1_1protocol_1_1IClient_1ac7cf6524b1019c7fbaa210c68c05726e" prot="protected" virt="non-virtual"><scope>samchon::protocol::service::Client</scope><name>socket</name></member>
      <member refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a20f20ccd18667a334f2b58d1996c7f2c" prot="private" virt="non-virtual"><scope>samchon::protocol::service::Client</scope><name>super</name></member>
      <member refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a1fe74be3d2df58afd6bcfbcb78353f83" prot="protected" virt="non-virtual"><scope>samchon::protocol::service::Client</scope><name>user</name></member>
      <member refid="df/d31/classsamchon_1_1protocol_1_1service_1_1Client_1a37731a8f5dd5caca4cc2ddb8b556cd6c" prot="public" virt="virtual"><scope>samchon::protocol::service::Client</scope><name>~Client</name></member>
      <member refid="d3/dc8/classsamchon_1_1protocol_1_1IClient_1ae8742ef162f2aee85a2e7b4b7ef1357f" prot="public" virt="virtual"><scope>samchon::protocol::service::Client</scope><name>~IClient</name></member>
      <member refid="d4/dcf/classsamchon_1_1protocol_1_1IProtocol_1a51a537c2b3a6ff5eb7b5ed859cc062ad" prot="public" virt="virtual"><scope>samchon::protocol::service::Client</scope><name>~IProtocol</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
