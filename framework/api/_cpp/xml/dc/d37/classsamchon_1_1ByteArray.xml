<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="dc/d37/classsamchon_1_1ByteArray" kind="class" language="C++" prot="public">
    <compoundname>samchon::ByteArray</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::vector&lt; unsigned char &gt;</basecompoundref>
    <includes refid="df/df6/ByteArray_8hpp" local="no">ByteArray.hpp</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="dc/d37/classsamchon_1_1ByteArray_1a4baa6dfd93a10f53fd8bb6cf28ea5200" prot="private" static="no">
        <type>std::vector&lt; unsigned char &gt;</type>
        <definition>typedef std::vector&lt;unsigned char&gt; super</definition>
        <argsstring></argsstring>
        <name>super</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="34" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="dc/d37/classsamchon_1_1ByteArray_1a7a04afe5347934be732ec70a70bd0a28" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t position</definition>
        <argsstring></argsstring>
        <name>position</name>
        <briefdescription>
<para>Current position of the <ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref>.<linebreak/>
. </para>        </briefdescription>
        <detaileddescription>
<para>If you call read, starting pointer will be the position <itemizedlist>
<listitem><para>(_Ty <emphasis>ptr = (_Ty</emphasis>)data() + position) </para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="43" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dc/d37/classsamchon_1_1ByteArray_1a6dfad9f8898a83c73bec08af1a3baf47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ByteArray</definition>
        <argsstring>()</argsstring>
        <name>ByteArray</name>
        <briefdescription>
<para>Default Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="52" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.cpp" bodystart="9" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="dc/d37/classsamchon_1_1ByteArray_1ac9b1573e5ef9a09bb89cab621e2b2b99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ByteArray</definition>
        <argsstring>(const ByteArray &amp;)</argsstring>
        <name>ByteArray</name>
        <param>
          <type>const <ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> &amp;</type>
          <defname>byteArray</defname>
        </param>
        <briefdescription>
<para>Copy Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="56" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.cpp" bodystart="14" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="dc/d37/classsamchon_1_1ByteArray_1a400c5928f6a1daf65bd9d5d9dff01d4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ByteArray</definition>
        <argsstring>(ByteArray &amp;&amp;)</argsstring>
        <name>ByteArray</name>
        <param>
          <type><ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> &amp;&amp;</type>
          <defname>byteArray</defname>
        </param>
        <briefdescription>
<para>Move Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="60" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.cpp" bodystart="19" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="dc/d37/classsamchon_1_1ByteArray_1a63c2412e4fd26f511e77b32cb362943c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto getPosition</definition>
        <argsstring>() const  -&gt; size_t</argsstring>
        <name>getPosition</name>
        <briefdescription>
<para>Get position. </para>        </briefdescription>
        <detaileddescription>
<para>Get a position represents starting point of bytes to read </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="70" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.cpp" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="dc/d37/classsamchon_1_1ByteArray_1ab780df81c7b629ad8823d7e5f375d6ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPosition</definition>
        <argsstring>(size_t)</argsstring>
        <name>setPosition</name>
        <param>
          <type>size_t</type>
          <defname>val</defname>
        </param>
        <briefdescription>
<para>Set poisition. </para>        </briefdescription>
        <detaileddescription>
<para>Set a position represents starting point of bytes to read </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="77" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.cpp" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="dc/d37/classsamchon_1_1ByteArray_1ae7e51bdb9d4acbc77330cb67fdb3c0a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto read</definition>
        <argsstring>() const  -&gt; _Ty</argsstring>
        <name>read</name>
        <briefdescription>
<para>Read data. </para>        </briefdescription>
        <detaileddescription>
<para>Reads a data(_Ty) from (starting) position of the <ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> and adds the position following the size.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para>A type of data to be returned </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>exception</parametername>
</parameternamelist>
<parameterdescription>
<para>out of range </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Read data from the byte stream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="111" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" bodystart="111" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="dc/d37/classsamchon_1_1ByteArray_1a0fb1a6b59522f2f6837136b9bce96486" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>auto</type>
        <definition>auto read</definition>
        <argsstring>() const  -&gt; std::string</argsstring>
        <name>read</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="118" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.cpp" bodystart="41" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="dc/d37/classsamchon_1_1ByteArray_1af31a23a4ca34bc84dbcf28345d2f9d7d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto readReversely</definition>
        <argsstring>() const  -&gt; _Ty</argsstring>
        <name>readReversely</name>
        <briefdescription>
<para>Read a reversed data. </para>        </briefdescription>
        <detaileddescription>
<para>Reads data(_Ty) from (starting) position of the <ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref>, which byte ordering is reversed, from the <ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> and adds the position following the size.</para><para><itemizedlist>
<listitem><para>BIG_ENDIAN to SMALL_ENDIAN li SMALL_ENDIAN to BIG_ENDIAN</para></listitem>
</itemizedlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para>A type of data to be returned </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>exception</parametername>
</parameternamelist>
<parameterdescription>
<para>out of range </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Read data from the byte stream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="133" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" bodystart="133" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="dc/d37/classsamchon_1_1ByteArray_1aeff26f32c2731798c0f803b8f8073bdb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void write</definition>
        <argsstring>(const _Ty &amp;val)</argsstring>
        <name>write</name>
        <param>
          <type>const _Ty &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write a data. </para>        </briefdescription>
        <detaileddescription>
<para>Writes a data(_Ty) to tail of the <ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref></para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para>A type of data to write </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Something to write on <ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="149" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" bodystart="149" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="dc/d37/classsamchon_1_1ByteArray_1a9857c98572173f68c1aa7f9648c0ba78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void write</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>write</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/d37/classsamchon_1_1ByteArray_1ae9f2fcb72d5c7295d6d2f75fef9dd63f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void write</definition>
        <argsstring>(const ByteArray &amp;byteArray)</argsstring>
        <name>write</name>
        <param>
          <type>const <ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> &amp;</type>
          <declname>byteArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="155" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.cpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="dc/d37/classsamchon_1_1ByteArray_1a882c59201cd1968079a9deb180173490" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void writeReversely</definition>
        <argsstring>(const _Ty &amp;val)</argsstring>
        <name>writeReversely</name>
        <param>
          <type>const _Ty &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write a data. </para>        </briefdescription>
        <detaileddescription>
<para>Writes a data(_Ty), which byte order is reversed, to tail of the <ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref></para><para><itemizedlist>
<listitem><para>BIG_ENDIAN to SMALL_ENDIAN li SMALL_ENDIAN to BIG_ENDIAN</para></listitem>
</itemizedlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para>A type of data to write </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Something to write on <ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="167" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="dc/d37/classsamchon_1_1ByteArray_1a13fb88784c4a58eecacfb41813a355cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto compress</definition>
        <argsstring>() const  -&gt; ByteArray</argsstring>
        <name>compress</name>
        <briefdescription>
<para>Compress the binary data<linebreak/>
. </para>        </briefdescription>
        <detaileddescription>
<para>Generates a binary data compressed from the <ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref>. </para><para>The binary data will be compressed by zlib library. </para><para><simplesect kind="return"><para><ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> which is compressed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="184" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.cpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="dc/d37/classsamchon_1_1ByteArray_1a510a9cc331c4595d2e6ab445747a90c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto decompress</definition>
        <argsstring>() const  -&gt; ByteArray</argsstring>
        <name>decompress</name>
        <briefdescription>
<para>Decompress the binary data. </para>        </briefdescription>
        <detaileddescription>
<para>Generates a decompressed binary data form the <ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref>. </para><para>The binary data will be decompressed by zlib library. </para><para><simplesect kind="return"><para><ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> that is decompressed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="195" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.cpp" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="dc/d37/classsamchon_1_1ByteArray_1ab5952e3a11b533f8f728d78457ddd6b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void write</definition>
        <argsstring>(const string &amp;str)</argsstring>
        <name>write</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.cpp" line="52" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.cpp" bodystart="52" bodyend="57"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="dc/d37/classsamchon_1_1ByteArray_1a0d477c9f39a7d1dc318ff7778f4153d9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto reverse</definition>
        <argsstring>(const _Ty &amp;val) -&gt; _Ty</argsstring>
        <name>reverse</name>
        <param>
          <type>const _Ty &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Reverse byte ordering. </para>        </briefdescription>
        <detaileddescription>
<para>Creates a copy of data which of byte ordering is reversed. <itemizedlist>
<listitem><para>BIG_ENDIAN to SMALL_ENDIAN li SMALL_ENDIAN to BIG_ENDIAN </para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="86" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" bodystart="86" bodyend="98"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Binary data class. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> is the standard class for handling binary data in Samchon Framework. </para><para><ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> provides methods for reading and writing binary data. </para><para>In addition, zlib compression and decompression are supported. </para><para><simplesect kind="note"><para></para></simplesect>
<ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> is a class only for advanced developer who can access data on byte level as the reason of: </para><para><itemizedlist>
<listitem><para>Handling File Data </para></listitem>
<listitem><para>Custom protocol for network I/O </para></listitem>
<listitem><para>Optimizing the size of data for performance</para></listitem>
</itemizedlist>
</para><para>If you&apos;re not trying to use <ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> as the reason of what I&apos;ve mentioned but only for representing entity data, I recomment you to use Entity instead. </para><para><simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" line="32" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/ByteArray.hpp" bodystart="30" bodyend="196"/>
    <listofallmembers>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1a6dfad9f8898a83c73bec08af1a3baf47" prot="public" virt="non-virtual"><scope>samchon::ByteArray</scope><name>ByteArray</name></member>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1ac9b1573e5ef9a09bb89cab621e2b2b99" prot="public" virt="non-virtual"><scope>samchon::ByteArray</scope><name>ByteArray</name></member>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1a400c5928f6a1daf65bd9d5d9dff01d4c" prot="public" virt="non-virtual"><scope>samchon::ByteArray</scope><name>ByteArray</name></member>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1a13fb88784c4a58eecacfb41813a355cb" prot="public" virt="non-virtual"><scope>samchon::ByteArray</scope><name>compress</name></member>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1a510a9cc331c4595d2e6ab445747a90c9" prot="public" virt="non-virtual"><scope>samchon::ByteArray</scope><name>decompress</name></member>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1a63c2412e4fd26f511e77b32cb362943c" prot="public" virt="non-virtual"><scope>samchon::ByteArray</scope><name>getPosition</name></member>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1a7a04afe5347934be732ec70a70bd0a28" prot="private" virt="non-virtual"><scope>samchon::ByteArray</scope><name>position</name></member>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1ae7e51bdb9d4acbc77330cb67fdb3c0a6" prot="public" virt="non-virtual"><scope>samchon::ByteArray</scope><name>read</name></member>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1a0fb1a6b59522f2f6837136b9bce96486" prot="public" virt="non-virtual"><scope>samchon::ByteArray</scope><name>read</name></member>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1af31a23a4ca34bc84dbcf28345d2f9d7d" prot="public" virt="non-virtual"><scope>samchon::ByteArray</scope><name>readReversely</name></member>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1a0d477c9f39a7d1dc318ff7778f4153d9" prot="public" virt="non-virtual"><scope>samchon::ByteArray</scope><name>reverse</name></member>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1ab780df81c7b629ad8823d7e5f375d6ce" prot="public" virt="non-virtual"><scope>samchon::ByteArray</scope><name>setPosition</name></member>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1a4baa6dfd93a10f53fd8bb6cf28ea5200" prot="private" virt="non-virtual"><scope>samchon::ByteArray</scope><name>super</name></member>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1aeff26f32c2731798c0f803b8f8073bdb" prot="public" virt="non-virtual"><scope>samchon::ByteArray</scope><name>write</name></member>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1a9857c98572173f68c1aa7f9648c0ba78" prot="public" virt="non-virtual"><scope>samchon::ByteArray</scope><name>write</name></member>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1ae9f2fcb72d5c7295d6d2f75fef9dd63f" prot="public" virt="non-virtual"><scope>samchon::ByteArray</scope><name>write</name></member>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1ab5952e3a11b533f8f728d78457ddd6b5" prot="public" virt="non-virtual"><scope>samchon::ByteArray</scope><name>write</name></member>
      <member refid="dc/d37/classsamchon_1_1ByteArray_1a882c59201cd1968079a9deb180173490" prot="public" virt="non-virtual"><scope>samchon::ByteArray</scope><name>writeReversely</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
