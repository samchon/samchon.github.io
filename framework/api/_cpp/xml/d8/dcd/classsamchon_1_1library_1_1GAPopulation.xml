<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="d8/dcd/classsamchon_1_1library_1_1GAPopulation" kind="class" language="C++" prot="public">
    <compoundname>samchon::library::GAPopulation</compoundname>
    <includes refid="d4/d1a/GAPopulation_8hpp" local="no">GAPopulation.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename GeneArray</type>
      </param>
      <param>
        <type>typename Compare</type>
        <defval>std::less&lt;GeneArray&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="d8/dcd/classsamchon_1_1library_1_1GAPopulation_1aaad2e2cd4d974397d1024796e7399e76" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GeneArray</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class GeneticAlgorithm</definition>
        <argsstring></argsstring>
        <name>GeneticAlgorithm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/GAPopulation.hpp" line="61" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/GAPopulation.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d8/dcd/classsamchon_1_1library_1_1GAPopulation_1a15768f3e60445d6d8c9c89fed838a0e6" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; GeneArray &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;GeneArray&gt; &gt; children</definition>
        <argsstring></argsstring>
        <name>children</name>
        <briefdescription>
<para>Genes representing the population. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/GAPopulation.hpp" line="67" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/GAPopulation.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d8/dcd/classsamchon_1_1library_1_1GAPopulation_1a6265b64e5ab20da3330a72e75a505390" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GAPopulation</definition>
        <argsstring>(size_t size)</argsstring>
        <name>GAPopulation</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Private Constructor with population. </para>        </briefdescription>
        <detaileddescription>
<para>Private constructor of <ref refid="d8/dcd/classsamchon_1_1library_1_1GAPopulation" kindref="compound">GAPopulation</ref> does not create children (candidate genes) but fills only <emphasis>nullptr</emphasis> repeatedly following the size. </para><para>The private constructor is only for and handled by <ref refid="d5/d28/classsamchon_1_1library_1_1GeneticAlgorithm" kindref="compound">GeneticAlgorithm</ref>. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the population </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/GAPopulation.hpp" line="79" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/GAPopulation.hpp" bodystart="79" bodyend="82"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d8/dcd/classsamchon_1_1library_1_1GAPopulation_1aa09943b2d33e458b5901869bb2632eea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GAPopulation</definition>
        <argsstring>(std::shared_ptr&lt; GeneArray &gt; geneArray, size_t size)</argsstring>
        <name>GAPopulation</name>
        <param>
          <type>std::shared_ptr&lt; GeneArray &gt;</type>
          <declname>geneArray</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Construct from a GeneArray and size of the population. </para>        </briefdescription>
        <detaileddescription>
<para>Constructor with initial set of genes and size of the population. </para><para>The public constructor creates GeneArray(s) as population (size) having shuffled genes which are came from the initial set of genes (geneArray). </para><para><simplesect kind="note"><para>The success of genetic algorithm is depend on the initial genes(geneArray).</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geneArray</parametername>
</parameternamelist>
<parameterdescription>
<para>An initial sequence listing </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of population to have as children </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/GAPopulation.hpp" line="98" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/GAPopulation.hpp" bodystart="98" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="d8/dcd/classsamchon_1_1library_1_1GAPopulation_1ad745704301f5812e1f61229380f347e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto fitTest</definition>
        <argsstring>() const  -&gt; std::shared_ptr&lt; GeneArray &gt;</argsstring>
        <name>fitTest</name>
        <briefdescription>
<para>Test fitness of each GeneArray in the population. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The best GeneArray in the population </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/GAPopulation.hpp" line="118" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/GAPopulation.hpp" bodystart="118" bodyend="127"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A population of a generation in G.A. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="d8/dcd/classsamchon_1_1library_1_1GAPopulation" kindref="compound">GAPopulation</ref> is a class representing population of candidate genes(sequence listing) having an array of GeneArray as a member. <ref refid="d8/dcd/classsamchon_1_1library_1_1GAPopulation" kindref="compound">GAPopulation</ref> also manages initial set of genes and handles fitting test direclty by the method <emphasis>fitTest</emphasis>. </para><para>The success of evolution of genetic alogirhtm is depend on the <ref refid="d8/dcd/classsamchon_1_1library_1_1GAPopulation" kindref="compound">GAPopulation</ref>&apos;s initial set and fitting test. (GeneArray and Compare.) </para><para><image type="html" name="library_genetic_algorithm.png"></image>
 <image type="latex" name="library_genetic_algorithm.png"></image>
</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GeneArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
An array(std::vector) containing genes as elments; sequnce listing </para><para>The GeneArray must be a type of <emphasis>std::vector</emphasis>. </para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Compare</parametername>
</parameternamelist>
<parameterdescription>
<para>A comparison class (or struct) returns whether left gene is more optimal.<linebreak/>
<linebreak/>
 Default template parameter of Compare is <emphasis>std::less&lt;GeneArray&gt;</emphasis>. It means to compare two std::vector (GeneArray must be a std::vector). Thus, you&apos;ve to keep follwing rules.<linebreak/>
<linebreak/>
 If you don&apos;t want to follow the rules or want a custom comparison class, you have to realize a comparison class. The following code is an example realizing the comparison class. <verbatim>- GeneArray is inherited from &lt;i&gt;std::vector&lt;/i&gt;
- GeneArray has custom &lt;i&gt;auto operator&lt;(const GeneArray &amp;) const -&gt; bool&lt;/i&gt;
</verbatim></para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">template<sp/>&lt;typename<sp/>_Ty&gt;</highlight></codeline>
<codeline><highlight class="normal">struct<sp/>MyCompare</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>operator()(const<sp/>_Ty<sp/>&amp;newObj,<sp/>const<sp/>_Ty<sp/>&amp;prevObj)<sp/>const<sp/>-&gt;<sp/>bool;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para><simplesect kind="warning"><para></para></simplesect>
Be careful for the mistakes of direction or position of Compare. </para><para>Most of logical errors failed to access optimal solution are occured by those mistakens. </para><para><simplesect kind="see"><para><ref refid="d5/d28/classsamchon_1_1library_1_1GeneticAlgorithm" kindref="compound">library::GeneticAlgorithm</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeonghoh Nam </para></simplesect>
</para>    </detaileddescription>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/GAPopulation.hpp" line="59" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/GAPopulation.hpp" bodystart="58" bodyend="128"/>
    <listofallmembers>
      <member refid="d8/dcd/classsamchon_1_1library_1_1GAPopulation_1a15768f3e60445d6d8c9c89fed838a0e6" prot="private" virt="non-virtual"><scope>samchon::library::GAPopulation</scope><name>children</name></member>
      <member refid="d8/dcd/classsamchon_1_1library_1_1GAPopulation_1ad745704301f5812e1f61229380f347e6" prot="public" virt="non-virtual"><scope>samchon::library::GAPopulation</scope><name>fitTest</name></member>
      <member refid="d8/dcd/classsamchon_1_1library_1_1GAPopulation_1a6265b64e5ab20da3330a72e75a505390" prot="private" virt="non-virtual"><scope>samchon::library::GAPopulation</scope><name>GAPopulation</name></member>
      <member refid="d8/dcd/classsamchon_1_1library_1_1GAPopulation_1aa09943b2d33e458b5901869bb2632eea" prot="public" virt="non-virtual"><scope>samchon::library::GAPopulation</scope><name>GAPopulation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
