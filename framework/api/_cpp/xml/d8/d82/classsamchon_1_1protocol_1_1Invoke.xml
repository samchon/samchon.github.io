<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="d8/d82/classsamchon_1_1protocol_1_1Invoke" kind="class" language="C++" prot="public">
    <compoundname>samchon::protocol::Invoke</compoundname>
    <basecompoundref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup" prot="public" virt="non-virtual">samchon::protocol::EntityGroup&lt; InvokeParameter &gt;</basecompoundref>
    <includes refid="d1/d6e/Invoke_8hpp" local="no">Invoke.hpp</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a58cee16872ef14add455337a80dab2c1" prot="private" static="no">
        <type><ref refid="db/d64/namespacesamchon_1_1protocol_1aad78260d3d142da970db113839ab3e52" kindref="member">SharedEntityArray</ref>&lt; <ref refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter" kindref="compound">InvokeParameter</ref> &gt;</type>
        <definition>typedef SharedEntityArray&lt;InvokeParameter&gt; super</definition>
        <argsstring></argsstring>
        <name>super</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="49" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a3775bc7759ade969c51fd75883ddc25f" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string listener</definition>
        <argsstring></argsstring>
        <name>listener</name>
        <briefdescription>
<para>Represent who listens, often be a function name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="55" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d8/d82/classsamchon_1_1protocol_1_1Invoke_1aadec0db92e0fe11ac13230c5c65baa0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Invoke</definition>
        <argsstring>()</argsstring>
        <name>Invoke</name>
        <briefdescription>
<para>Default Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="64" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.cpp" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a9453f4c60236ce2ceffd63339efa2010" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual ~Invoke</definition>
        <argsstring>()=default</argsstring>
        <name>~Invoke</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d82/classsamchon_1_1protocol_1_1Invoke_1ad495627b7090449e9a1af49e3271cdd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Invoke</definition>
        <argsstring>(const std::string &amp;listener)</argsstring>
        <name>Invoke</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Construct from a listener. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>Represents who listens the <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message. Almost same with Function name </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="72" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.cpp" bodystart="18" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a4c4b7d9441b10a734e8ce75e67d0375c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void construct</definition>
        <argsstring>(std::shared_ptr&lt; library::XML &gt;) override</argsstring>
        <name>construct</name>
        <reimplements refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1a49bad12c4913a280d0249479ee08edc2">construct</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d5/d37/classsamchon_1_1library_1_1XML" kindref="compound">library::XML</ref> &gt;</type>
          <declname>xml</declname>
        </param>
        <briefdescription>
<para>Construct data of the <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> from an XML object. </para>        </briefdescription>
        <detaileddescription>
<para>Constructs the <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup" kindref="compound">EntityGroup</ref>&apos;s own member variables only from the input XML object. </para><para>Do not consider about constructing children <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> objects&apos; data in <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1a49bad12c4913a280d0249479ee08edc2" kindref="member">EntityGroup::construct()</ref>. Those children <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> objects&apos; data will constructed by their own <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a4c4b7d9441b10a734e8ce75e67d0375c" kindref="member">construct()</ref> method. Even insertion of XML objects representing children are done by abstract method of <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1a30dee0fe2044f2f88579935cc10fc753" kindref="member">EntityGroup::toXML()</ref>. </para><para>Constructs only data of <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup" kindref="compound">EntityGroup</ref>&apos;s own. </para><para><simplesect kind="par"><title>[Inherited]</title><para>Construct data of the <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> from an XML object. </para></simplesect>
Overrides the <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a4c4b7d9441b10a734e8ce75e67d0375c" kindref="member">construct()</ref> method and fetch data of member variables from the XML. </para><para>By recommended guidance, data representing member variables are contained in properties of the put XML object. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xml</parametername>
</parameternamelist>
<parameterdescription>
<para>An xml used to construct data of entity </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="74" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.cpp" bodystart="24" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="d8/d82/classsamchon_1_1protocol_1_1Invoke_1abab56acc91715d02705bcf4b042b755b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>_Args</declname>
            <defname>_Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Invoke</definition>
        <argsstring>(const std::string &amp;listener, const _Ty &amp;val, const _Args &amp;...args)</argsstring>
        <name>Invoke</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>listener</declname>
        </param>
        <param>
          <type>const _Ty &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const _Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Construct from arguments. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of an argument which represents a parameter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Left varadic template arguments&apos; types</para></parameterdescription>
</parameteritem>
</parameterlist>
</para><para>Creates <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> and InvokeParameter(s) at the same time by varadic template method. </para><para>By the varadic template constructor, you can&apos;t specify name of each <ref refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter" kindref="compound">InvokeParameter</ref>, but specify type and value of each <ref refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter" kindref="compound">InvokeParameter</ref>. If you try to record the <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> to Database, the name of <ref refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter" kindref="compound">InvokeParameter</ref> will be <emphasis>NULL</emphasis>.</para><para><simplesect kind="note"><para></para></simplesect>
By the varadic template constructor, name of InovkeParameter(s) will be omitted. Because of name, an identifier of an <ref refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter" kindref="compound">InvokeParameter</ref>, is omitted, you can&apos;t access to <ref refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter" kindref="compound">InvokeParameter</ref> by <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1a531cae9e9c8b395f8cde3f2ca243cc79" kindref="member">Invoke::has()</ref> or <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1af318f1e62268b7e178fdc2a9669444b8" kindref="member">Invoke::get()</ref>. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>A string represents who listens the <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message. Almost same with name of a function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>A value to be a parameter of <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Left arguments to be parameters of <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="106" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" bodystart="106" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a5db1094d3e260e9c7bcafaf8b142fe6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Invoke</definition>
        <argsstring>(const std::string &amp;listener, const _Ty &amp;val)</argsstring>
        <name>Invoke</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>listener</declname>
        </param>
        <param>
          <type>const _Ty &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="114" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a01f1afa6837a9eb8e6891c4f433f0a46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto getListener</definition>
        <argsstring>() const  -&gt; std::string</argsstring>
        <name>getListener</name>
        <briefdescription>
<para>Get listener. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="141" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.cpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a2d60330abde071f7c66f3348f05f9a18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setListener</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>setListener</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
<para>Set listener. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="146" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.cpp" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="d8/d82/classsamchon_1_1protocol_1_1Invoke_1aa55bc231502ef8e0dd9a9c274d028ac9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>auto</type>
        <definition>auto TAG</definition>
        <argsstring>() const  -&gt; std::string override</argsstring>
        <name>TAG</name>
        <reimplements refid="d0/d3e/classsamchon_1_1protocol_1_1Entity_1a974f48d92f0ef494a8d2c879f82c6426">TAG</reimplements>
        <briefdescription>
<para>A tag name when represented by XML. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A tag name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="151" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.cpp" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a5cb3666da8a6a0efe4014782bda20af0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>auto</type>
        <definition>auto CHILD_TAG</definition>
        <argsstring>() const  -&gt; std::string override</argsstring>
        <name>CHILD_TAG</name>
        <reimplements refid="d9/d4c/classsamchon_1_1protocol_1_1IEntityGroup_1abcef66d1cd792f48c12c52ac52198c0f">CHILD_TAG</reimplements>
        <briefdescription>
<para>A tag name of children. </para>        </briefdescription>
        <detaileddescription>
<para>&lt; TAG&gt;<linebreak/>
 <nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> &lt;CHILD_TAG /&gt;<linebreak/>
 <nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> &lt;CHILD_TAG /&gt;<linebreak/>
 &lt;/TAG&gt; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="152" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.cpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="d8/d82/classsamchon_1_1protocol_1_1Invoke_1ac0248fcb25b3fa4f463d545005fdcbf3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>auto</type>
        <definition>auto toXML</definition>
        <argsstring>() const  -&gt; std::shared_ptr&lt; library::XML &gt; override</argsstring>
        <name>toXML</name>
        <reimplements refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1a30dee0fe2044f2f88579935cc10fc753">toXML</reimplements>
        <briefdescription>
<para>Get an XML object represents the <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup" kindref="compound">EntityGroup</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Archives the <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup" kindref="compound">EntityGroup</ref>&apos;s own member variables only to the returned XML object. </para><para>Do not consider about archiving children <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> objects&apos; data in <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1a30dee0fe2044f2f88579935cc10fc753" kindref="member">EntityGroup::toXML()</ref>. Those children <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> objects will converted to XML object by their own <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1ac0248fcb25b3fa4f463d545005fdcbf3" kindref="member">toXML()</ref> method. The insertion of XML objects representing children are done by abstract method of <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1a30dee0fe2044f2f88579935cc10fc753" kindref="member">EntityGroup::toXML()</ref>. </para><para>Archives only data of <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup" kindref="compound">EntityGroup</ref>&apos;s own. </para><para><simplesect kind="par"><title>[Inherited]</title><para>Get an XML object represents the <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref>. </para></simplesect>
Returns an XML object that can represents the <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> containing member variables into properties. </para><para>A member variable (not object, but atomic value like number, string or date) is categorized as a property within the framework of entity side. Thus, when overriding a <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1ac0248fcb25b3fa4f463d545005fdcbf3" kindref="member">toXML()</ref> method and archiving member variables to an XML object to return, puts each variable to be a property belongs to only an XML object. </para><para>Don&apos;t archive the member variable of atomic value to XML::value causing enormouse creation of XML objects to number of member variables. An <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> must be represented by only an XML instance (tag). </para><para><table rows="2" cols="2"><row>
<entry thead="yes"><para>Standard Usage  </para></entry><entry thead="yes"><para>Non-standard usage abusing value   </para></entry></row>
<row>
<entry thead="no"><para>&lt;memberList&gt;<linebreak/>
 <nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> &lt;member id=&apos;jhnam88&apos; name=&apos;Jeongho+Nam&apos; birthdate=&apos;1988-03-11&apos; /&gt;<linebreak/>
 <nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> &lt;member id=&apos;master&apos; name=&apos;Administartor&apos; birthdate=&apos;2011-07-28&apos; /&gt;<linebreak/>
 &lt;/memberList&gt;  </para></entry><entry thead="no"><para>&lt;member&gt;<linebreak/>
 <nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> &lt;id&gt;jhnam88&lt;/id&gt;<linebreak/>
 <nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> &lt;name&gt;Jeongho+Nam&lt;/name&gt;<linebreak/>
 <nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> &lt;birthdate&gt;1988-03-11&lt;/birthdate&gt;<linebreak/>
 &lt;/member&gt;   </para></entry></row>
</table>
</para><para><simplesect kind="return"><para>An XML object representing the <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="154" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.cpp" bodystart="87" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a10199da9e0302eafc2ece201c78b1237" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto toSQL</definition>
        <argsstring>() const  -&gt; std::string</argsstring>
        <name>toSQL</name>
        <briefdescription>
<para>Get a string of sql statement used to archive history log. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="159" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.cpp" bodystart="95" bodyend="106"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a834844ce6d217133a92a0da05bf80ed3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>auto</type>
        <definition>auto createChild</definition>
        <argsstring>(std::shared_ptr&lt; library::XML &gt;) -&gt; InvokeParameter *override</argsstring>
        <name>createChild</name>
        <reimplements refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1a554e0798083a38327f360c61a1ca716b">createChild</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d5/d37/classsamchon_1_1library_1_1XML" kindref="compound">library::XML</ref> &gt;</type>
        </param>
        <briefdescription>
<para>Factory method of a child <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1a554e0798083a38327f360c61a1ca716b" kindref="member">EntityGroup::createChild()</ref> is a factory method creating a new child <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> which is belonged to the <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup" kindref="compound">EntityGroup</ref>. This method is called by <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1a49bad12c4913a280d0249479ee08edc2" kindref="member">EntityGroup::construct()</ref>. The children construction methods <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity_1ac1489c595f4d9e9ceb6fb91463ae195c" kindref="member">Entity::construct()</ref> will be called by abstract method of the <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1a49bad12c4913a280d0249479ee08edc2" kindref="member">EntityGroup::construct()</ref>. </para><para><simplesect kind="return"><para>A new child <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> belongs to <ref refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup" kindref="compound">EntityGroup</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="77" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.cpp" bodystart="30" bodyend="33"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d8/d82/classsamchon_1_1protocol_1_1Invoke_1ab37fa3e5f197bc25a509f288b3da546b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>_Args</declname>
            <defname>_Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void construct_by_vardic_template</definition>
        <argsstring>(const _Ty &amp;val, const _Args &amp;...args)</argsstring>
        <name>construct_by_vardic_template</name>
        <param>
          <type>const _Ty &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const _Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="122" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" bodystart="122" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="d8/d82/classsamchon_1_1protocol_1_1Invoke_1aa12e6010ceadcd300f4691c07ca0d6ea" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void construct_by_vardic_template</definition>
        <argsstring>(const _Ty &amp;val)</argsstring>
        <name>construct_by_vardic_template</name>
        <param>
          <type>const _Ty &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="129" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" bodystart="129" bodyend="132"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Standard message of network I/O. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> is a class used in network I/O in protocol package of Samchon Framework. </para><para>The <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message has an XML structure like the result screen of provided example in below. We can enjoy lots of benefits by the normalized and standardized message structure used in network I/O. </para><para>The greatest advantage is that we can make any type of network system, even how the system is enourmously complicated. As network communication message is standardized, we only need to concentrate on logical relationships between network systems. We can handle each network system like a object (class) in OOD. And those relationships can be easily designed by using design pattern. </para><para>In Samchon Framework, you can make any type of network system with basic 3 + 1 componenets (<ref refid="d4/dcf/classsamchon_1_1protocol_1_1IProtocol" kindref="compound">IProtocol</ref>, <ref refid="d4/de8/classsamchon_1_1protocol_1_1IServer" kindref="compound">IServer</ref> and <ref refid="d3/dc8/classsamchon_1_1protocol_1_1IClient" kindref="compound">IClient</ref> + <ref refid="db/d72/classsamchon_1_1protocol_1_1ServerConnector" kindref="compound">ServerConnector</ref>), by implemens or inherits them, like designing classes of S/W architecture. </para><para><image type="html" name="protocol_invoke.png"></image>
 <image type="latex" name="protocol_invoke.png"></image>
</para><para><simplesect kind="par"><title>Example source</title><para><programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samchon/library/XML.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samchon/protocol/Invoke.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d8/dcc/namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="db/df1/namespacesamchon" kindref="compound">samchon</ref>;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="db/d64/namespacesamchon_1_1protocol" kindref="compound">samchon::protocol</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>comment(lib,<sp/>&quot;x64/Debug/SamchonFramework.lib&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>comment(lib,<sp/>&quot;x64/Release/SamchonFramework.lib&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>comment(lib,<sp/>&quot;Debug/SamchonFramework.lib&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>comment(lib,<sp/>&quot;Release/SamchonFramework.lib&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>str<sp/>=<sp/>string(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;memberList&gt;\n&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&lt;member<sp/>id=&apos;jhnam88&apos;<sp/>pass=&apos;1231&apos;<sp/>/&gt;\n&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&lt;member<sp/>id=&apos;samchon&apos;<sp/>pass=&apos;1231&apos;&gt;Administrator&lt;/member&gt;\n&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&lt;group&gt;3&lt;/group&gt;\n&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;/memberList&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_ptr&lt;XML&gt;<sp/>xml(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>XML(str));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_ptr&lt;Invoke&gt;<sp/>invoke(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1aadec0db92e0fe11ac13230c5c65baa0a" kindref="member">Invoke</ref>(</highlight><highlight class="stringliteral">&quot;login&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;jhnam88&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1231&quot;</highlight><highlight class="normal">,<sp/>4,<sp/>xml));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invoke<sp/>to<sp/>XML:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>invoke-&gt;toXML()-&gt;toString()<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-------------------------------------------------------------&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Parameters&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-------------------------------------------------------------&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;1st<sp/>param:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>invoke-&gt;at(0)-&gt;getValue&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;2nd<sp/>param:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>invoke-&gt;at(1)-&gt;getValue&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;3rd<sp/>param:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>invoke-&gt;at(2)-&gt;getValue&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;4th<sp/>param:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/>invoke-&gt;at(3)-&gt;getValue&lt;shared_ptr&lt;XML&gt;&gt;()-&gt;toString()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>system(</highlight><highlight class="stringliteral">&quot;pause&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
</programlisting></para></simplesect>
<heading level="4">Result of the example </heading>
</para><para><image type="html" name="example_invoke.png"></image>
 <image type="latex" name="example_invoke.png"></image>
</para><para><simplesect kind="see"><para><ref refid="db/d64/namespacesamchon_1_1protocol" kindref="compound">samchon::protocol</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/dcf/classsamchon_1_1protocol_1_1IProtocol" kindref="compound">protocol::IProtocol</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1921">
        <label>Entity</label>
        <link refid="d0/d3e/classsamchon_1_1protocol_1_1Entity"/>
      </node>
      <node id="1922">
        <label>IEntityGroup</label>
        <link refid="d9/d4c/classsamchon_1_1protocol_1_1IEntityGroup"/>
      </node>
      <node id="1920">
        <label>SharedEntityArray&lt; InvokeParameter &gt;</label>
        <link refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup"/>
        <childnode refid="1921" relation="public-inheritance">
        </childnode>
        <childnode refid="1922" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1919">
        <label>Invoke</label>
        <link refid="d8/d82/classsamchon_1_1protocol_1_1Invoke"/>
        <childnode refid="1920" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1925">
        <label>Entity</label>
        <link refid="d0/d3e/classsamchon_1_1protocol_1_1Entity"/>
      </node>
      <node id="1926">
        <label>IEntityGroup</label>
        <link refid="d9/d4c/classsamchon_1_1protocol_1_1IEntityGroup"/>
      </node>
      <node id="1924">
        <label>SharedEntityArray&lt; InvokeParameter &gt;</label>
        <link refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup"/>
        <childnode refid="1925" relation="public-inheritance">
        </childnode>
        <childnode refid="1926" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1923">
        <label>Invoke</label>
        <link refid="d8/d82/classsamchon_1_1protocol_1_1Invoke"/>
        <childnode refid="1924" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" line="47" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/Invoke.hpp" bodystart="45" bodyend="160"/>
    <listofallmembers>
      <member refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a5cb3666da8a6a0efe4014782bda20af0" prot="public" virt="virtual"><scope>samchon::protocol::Invoke</scope><name>CHILD_TAG</name></member>
      <member refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a4c4b7d9441b10a734e8ce75e67d0375c" prot="public" virt="virtual"><scope>samchon::protocol::Invoke</scope><name>construct</name></member>
      <member refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1ab37fa3e5f197bc25a509f288b3da546b" prot="private" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>construct_by_vardic_template</name></member>
      <member refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1aa12e6010ceadcd300f4691c07ca0d6ea" prot="private" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>construct_by_vardic_template</name></member>
      <member refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1aac5cb7c267e3cf067657ca5a73363728" prot="protected" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>container_type</name></member>
      <member refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a834844ce6d217133a92a0da05bf80ed3" prot="protected" virt="virtual"><scope>samchon::protocol::Invoke</scope><name>createChild</name></member>
      <member refid="d0/d3e/classsamchon_1_1protocol_1_1Entity_1afb4718a8ca5b822cf88129ae04240489" prot="public" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>Entity</name></member>
      <member refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1a8e82af015377749a76c1839466abb676" prot="protected" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>entity_type</name></member>
      <member refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1a14f6ca078bbeb51a6f6bc153f7384a7c" prot="public" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>EntityGroup</name></member>
      <member refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1af318f1e62268b7e178fdc2a9669444b8" prot="public" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>get</name></member>
      <member refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1af5c2fb617197f93e98ec6c4b547d9bdd" prot="public" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>get</name></member>
      <member refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a01f1afa6837a9eb8e6891c4f433f0a46" prot="public" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>getListener</name></member>
      <member refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1a531cae9e9c8b395f8cde3f2ca243cc79" prot="public" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>has</name></member>
      <member refid="d9/d4c/classsamchon_1_1protocol_1_1IEntityGroup_1a613d2b691653c86d5f900c8ba33ba30b" prot="public" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>IEntityGroup</name></member>
      <member refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1aadec0db92e0fe11ac13230c5c65baa0a" prot="public" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>Invoke</name></member>
      <member refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1ad495627b7090449e9a1af49e3271cdd5" prot="public" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>Invoke</name></member>
      <member refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1abab56acc91715d02705bcf4b042b755b" prot="public" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>Invoke</name></member>
      <member refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a5db1094d3e260e9c7bcafaf8b142fe6a" prot="public" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>Invoke</name></member>
      <member refid="d0/d3e/classsamchon_1_1protocol_1_1Entity_1a5f7b0261859ce45be6fc2cef64026183" prot="public" virt="virtual"><scope>samchon::protocol::Invoke</scope><name>key</name></member>
      <member refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a3775bc7759ade969c51fd75883ddc25f" prot="protected" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>listener</name></member>
      <member refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a2d60330abde071f7c66f3348f05f9a18" prot="public" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>setListener</name></member>
      <member refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a58cee16872ef14add455337a80dab2c1" prot="private" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>super</name></member>
      <member refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1aa55bc231502ef8e0dd9a9c274d028ac9" prot="public" virt="virtual"><scope>samchon::protocol::Invoke</scope><name>TAG</name></member>
      <member refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a10199da9e0302eafc2ece201c78b1237" prot="public" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>toSQL</name></member>
      <member refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1ac0248fcb25b3fa4f463d545005fdcbf3" prot="public" virt="virtual"><scope>samchon::protocol::Invoke</scope><name>toXML</name></member>
      <member refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1aa03d6edd1546642516652a481c0bf8db" prot="protected" virt="non-virtual"><scope>samchon::protocol::Invoke</scope><name>value_type</name></member>
      <member refid="d0/d3e/classsamchon_1_1protocol_1_1Entity_1a07d18d40fa0c4b4f1341cfddc0b600dd" prot="public" virt="virtual"><scope>samchon::protocol::Invoke</scope><name>~Entity</name></member>
      <member refid="d4/deb/classsamchon_1_1protocol_1_1EntityGroup_1a0dd6821308dca7395965242148146aae" prot="public" virt="virtual"><scope>samchon::protocol::Invoke</scope><name>~EntityGroup</name></member>
      <member refid="d9/d4c/classsamchon_1_1protocol_1_1IEntityGroup_1ae41524ffa5ca16d3160dfd0b00e7800f" prot="public" virt="virtual"><scope>samchon::protocol::Invoke</scope><name>~IEntityGroup</name></member>
      <member refid="d8/d82/classsamchon_1_1protocol_1_1Invoke_1a9453f4c60236ce2ceffd63339efa2010" prot="public" virt="virtual"><scope>samchon::protocol::Invoke</scope><name>~Invoke</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
