<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="d8/dd4/namespacesamchon_1_1library" kind="namespace" language="C++">
    <compoundname>samchon::library</compoundname>
    <innerclass refid="df/d1b/classsamchon_1_1library_1_1Base64" prot="public">samchon::library::Base64</innerclass>
    <innerclass refid="de/ddf/classsamchon_1_1library_1_1CaseGenerator" prot="public">samchon::library::CaseGenerator</innerclass>
    <innerclass refid="d8/d48/classsamchon_1_1library_1_1CaseTree" prot="public">samchon::library::CaseTree</innerclass>
    <innerclass refid="da/d99/classsamchon_1_1library_1_1Charset" prot="public">samchon::library::Charset</innerclass>
    <innerclass refid="dc/db2/classsamchon_1_1library_1_1CombinedPermutationGenerator" prot="public">samchon::library::CombinedPermutationGenerator</innerclass>
    <innerclass refid="d6/d32/classsamchon_1_1library_1_1CriticalAllocator" prot="public">samchon::library::CriticalAllocator</innerclass>
    <innerclass refid="da/d6b/classsamchon_1_1library_1_1Date" prot="public">samchon::library::Date</innerclass>
    <innerclass refid="dd/de3/classsamchon_1_1library_1_1Datetime" prot="public">samchon::library::Datetime</innerclass>
    <innerclass refid="d4/de5/classsamchon_1_1library_1_1ErrorEvent" prot="public">samchon::library::ErrorEvent</innerclass>
    <innerclass refid="d2/d56/classsamchon_1_1library_1_1Event" prot="public">samchon::library::Event</innerclass>
    <innerclass refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" prot="public">samchon::library::EventDispatcher</innerclass>
    <innerclass refid="dd/d7b/classsamchon_1_1library_1_1FactorialGenerator" prot="public">samchon::library::FactorialGenerator</innerclass>
    <innerclass refid="dd/d68/classsamchon_1_1library_1_1FTByteFile" prot="public">samchon::library::FTByteFile</innerclass>
    <innerclass refid="d6/d60/classsamchon_1_1library_1_1FTFactory" prot="public">samchon::library::FTFactory</innerclass>
    <innerclass refid="d2/d27/classsamchon_1_1library_1_1FTFile" prot="public">samchon::library::FTFile</innerclass>
    <innerclass refid="d2/db1/classsamchon_1_1library_1_1FTFolder" prot="public">samchon::library::FTFolder</innerclass>
    <innerclass refid="d7/d0a/classsamchon_1_1library_1_1FTInstance" prot="public">samchon::library::FTInstance</innerclass>
    <innerclass refid="d7/d24/classsamchon_1_1library_1_1FTTextFile" prot="public">samchon::library::FTTextFile</innerclass>
    <innerclass refid="d3/dcb/structsamchon_1_1library_1_1GAParameters" prot="public">samchon::library::GAParameters</innerclass>
    <innerclass refid="d8/dcd/classsamchon_1_1library_1_1GAPopulation" prot="public">samchon::library::GAPopulation</innerclass>
    <innerclass refid="d5/d28/classsamchon_1_1library_1_1GeneticAlgorithm" prot="public">samchon::library::GeneticAlgorithm</innerclass>
    <innerclass refid="d7/d67/classsamchon_1_1library_1_1HTTPLoader" prot="public">samchon::library::HTTPLoader</innerclass>
    <innerclass refid="dd/d2e/classsamchon_1_1library_1_1IOperator" prot="public">samchon::library::IOperator</innerclass>
    <innerclass refid="de/d8f/classsamchon_1_1library_1_1Math" prot="public">samchon::library::Math</innerclass>
    <innerclass refid="d6/dcc/classsamchon_1_1library_1_1MySQLi" prot="public">samchon::library::MySQLi</innerclass>
    <innerclass refid="d4/d31/classsamchon_1_1library_1_1PermutationGenerator" prot="public">samchon::library::PermutationGenerator</innerclass>
    <innerclass refid="de/d4a/classsamchon_1_1library_1_1ProgressEvent" prot="public">samchon::library::ProgressEvent</innerclass>
    <innerclass refid="df/d85/classsamchon_1_1library_1_1RWMutex" prot="public">samchon::library::RWMutex</innerclass>
    <innerclass refid="d9/d88/classsamchon_1_1library_1_1Semaphore" prot="public">samchon::library::Semaphore</innerclass>
    <innerclass refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire" prot="public">samchon::library::SharedAcquire</innerclass>
    <innerclass refid="d7/de5/classsamchon_1_1library_1_1SharedReadLock" prot="public">samchon::library::SharedReadLock</innerclass>
    <innerclass refid="da/d5f/classsamchon_1_1library_1_1SharedWriteLock" prot="public">samchon::library::SharedWriteLock</innerclass>
    <innerclass refid="d9/d2f/classsamchon_1_1library_1_1SQLi" prot="public">samchon::library::SQLi</innerclass>
    <innerclass refid="db/da3/classsamchon_1_1library_1_1SQLLiteConnector" prot="public">samchon::library::SQLLiteConnector</innerclass>
    <innerclass refid="de/def/classsamchon_1_1library_1_1SQLStatement" prot="public">samchon::library::SQLStatement</innerclass>
    <innerclass refid="d2/d53/classsamchon_1_1library_1_1StringUtil" prot="public">samchon::library::StringUtil</innerclass>
    <innerclass refid="da/dfd/classsamchon_1_1library_1_1TSQLi" prot="public">samchon::library::TSQLi</innerclass>
    <innerclass refid="d3/d69/classsamchon_1_1library_1_1TSQLStatement" prot="public">samchon::library::TSQLStatement</innerclass>
    <innerclass refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire" prot="public">samchon::library::UniqueAcquire</innerclass>
    <innerclass refid="de/d6f/classsamchon_1_1library_1_1UniqueReadLock" prot="public">samchon::library::UniqueReadLock</innerclass>
    <innerclass refid="d1/dc0/classsamchon_1_1library_1_1UniqueWriteLock" prot="public">samchon::library::UniqueWriteLock</innerclass>
    <innerclass refid="dc/d30/classsamchon_1_1library_1_1URLVariables" prot="public">samchon::library::URLVariables</innerclass>
    <innerclass refid="d5/d37/classsamchon_1_1library_1_1XML" prot="public">samchon::library::XML</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d8/dd4/namespacesamchon_1_1library_1a61841b64797cf8216dc58ae92adcee21" prot="public" static="no">
        <type><ref refid="d8/dd4/namespacesamchon_1_1library_1a769ee0a38fd5faebb2ca90fd295ce740" kindref="member">CriticalMap</ref>&lt; std::string, _Ty, _Pr &gt;</type>
        <definition>using CriticalDictionary =  CriticalMap&lt;std::string, _Ty, _Pr&gt;</definition>
        <argsstring></argsstring>
        <name>CriticalDictionary</name>
        <briefdescription>
<para>A Dictionary ensures concurrency. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d6/d32/classsamchon_1_1library_1_1CriticalAllocator" kindref="compound">library::CriticalAllocator</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/CriticalDictionary.hpp" line="16" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/CriticalDictionary.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/dd4/namespacesamchon_1_1library_1a2d3c3a1b5e1a6302ebcd5fa8e2fa7e42" prot="public" static="no">
        <type>std::list&lt; _Ty, <ref refid="d6/d32/classsamchon_1_1library_1_1CriticalAllocator" kindref="compound">CriticalAllocator</ref>&lt; _Ty &gt;&gt;</type>
        <definition>using CriticalList =  std::list&lt;_Ty, CriticalAllocator&lt;_Ty&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>CriticalList</name>
        <briefdescription>
<para>A std::list ensures concurrency. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d6/d32/classsamchon_1_1library_1_1CriticalAllocator" kindref="compound">library::CriticalAllocator</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/CriticalList.hpp" line="18" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/CriticalList.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/dd4/namespacesamchon_1_1library_1a769ee0a38fd5faebb2ca90fd295ce740" prot="public" static="no">
        <type><ref refid="d1/d4e/classsamchon_1_1Map" kindref="compound">Map</ref>&lt; _Kty, _Ty, _Pr, <ref refid="d6/d32/classsamchon_1_1library_1_1CriticalAllocator" kindref="compound">CriticalAllocator</ref>&lt; std::pair&lt; const std::string, _Ty &gt;&gt;&gt;</type>
        <definition>using CriticalMap =  Map&lt;_Kty, _Ty, _Pr, CriticalAllocator&lt;std::pair&lt;const std::string, _Ty&gt;&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>CriticalMap</name>
        <briefdescription>
<para>A <ref refid="d1/d4e/classsamchon_1_1Map" kindref="compound">Map</ref> ensures concurrency. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d6/d32/classsamchon_1_1library_1_1CriticalAllocator" kindref="compound">library::CriticalAllocator</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/CriticalMap.hpp" line="18" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/CriticalMap.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/dd4/namespacesamchon_1_1library_1aea31f3119ce260a5601db057d6f514ab" prot="public" static="no">
        <type>Set&lt; _Ty, _Pr, <ref refid="d6/d32/classsamchon_1_1library_1_1CriticalAllocator" kindref="compound">CriticalAllocator</ref>&lt; _Ty &gt;&gt;</type>
        <definition>using CriticalSet =  Set&lt;_Ty, _Pr, CriticalAllocator&lt;_Ty&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>CriticalSet</name>
        <briefdescription>
<para>A Set ensures concurrency. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d6/d32/classsamchon_1_1library_1_1CriticalAllocator" kindref="compound">library::CriticalAllocator</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/CriticalSet.hpp" line="18" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/CriticalSet.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/dd4/namespacesamchon_1_1library_1ab666bd6672777de917cc9a5b5e94d20c" prot="public" static="no">
        <type>std::vector&lt; _Ty, <ref refid="d6/d32/classsamchon_1_1library_1_1CriticalAllocator" kindref="compound">CriticalAllocator</ref>&lt; _Ty &gt;&gt;</type>
        <definition>using CriticalVector =  std::vector&lt;_Ty, CriticalAllocator&lt;_Ty&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>CriticalVector</name>
        <briefdescription>
<para>A std::vector ensures concurrency. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d6/d32/classsamchon_1_1library_1_1CriticalAllocator" kindref="compound">library::CriticalAllocator</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/CriticalVector.hpp" line="18" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/CriticalVector.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/dd4/namespacesamchon_1_1library_1a28b09b862589c02120500d4096f154a9" prot="public" static="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d5/d37/classsamchon_1_1library_1_1XML" kindref="compound">XML</ref> &gt; &gt;</type>
        <definition>typedef std::vector&lt;std::shared_ptr&lt;XML&gt; &gt; XMLList</definition>
        <argsstring></argsstring>
        <name>XMLList</name>
        <briefdescription>
<para>A list of <ref refid="d5/d37/classsamchon_1_1library_1_1XML" kindref="compound">XML</ref>, tags are same. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/XMLList.hpp" line="19" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/XMLList.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d8/dd4/namespacesamchon_1_1library_1a4631e3238ad3f514fcd7a0691ff82adc" prot="public" static="no" mutable="no">
        <type>class SAMCHON_FRAMEWORK_API</type>
        <definition>class SAMCHON_FRAMEWORK_API XML</definition>
        <argsstring></argsstring>
        <name>XML</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/XMLList.hpp" line="336" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/XMLList.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Package of libraries. </para>    </briefdescription>
    <detaileddescription>
<para>The library package supports some classes for package of protocol and nam-tree. </para><para>Furthermore, library package provides some utility libraries, which are not being supported by standard library (STL). Those can be helpful for users and those are like STL, independent from operating systems, so that can compile in any operating system. </para><para>The library package can be divided into some sectinos. </para><para><itemizedlist>
<listitem>
<para><heading level="3">Common libraries. </heading>
</para><para></para><para>Common containers with utility methods. </para><para></para><para><image type="html" name="library_common.png"></image>
 <image type="latex" name="library_common.png"></image>
</para><para></para></listitem>
<listitem>
<para><heading level="3">Mathmatical libaries. </heading>
</para><para></para><para>Utilty classes for mathmatical methods, or libraries of case generator and genetic algorithm. In those mathmatical part, lots of examples are supported. </para><para></para><para><image type="html" name="library_math.png"></image>
 <image type="latex" name="library_math.png"></image>
</para><para></para></listitem>
<listitem>
<para><heading level="3">Critical section libraries. </heading>
</para><para></para><para>Classes handling critical section, like <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> and <ref refid="d9/d88/classsamchon_1_1library_1_1Semaphore" kindref="compound">Semaphore</ref> which are not supported in STL yet. </para><para></para><para></para><para>Of course, rw_mutex is already defined in linux C, semaphore is already defined in MFC. But they are dependent on their own operating system, so that cannot compile in multiple operating systems. It&apos;s the reason why Samchon Framework provides those classes. </para><para></para><para></para><para>Furthermore, unique and shared lock of those critical section classes, which are managing locking and unlocking, and critical allocator are provided. </para><para></para><para><image type="html" name="library_critical_section.png"></image>
 <image type="latex" name="library_critical_section.png"></image>
</para><para></para></listitem>
<listitem>
<para><heading level="3">Data I/O libraries. </heading>
</para><para></para><para>Provides libraries about data I/O.</para><para></para><para><ref refid="d9/d2f/classsamchon_1_1library_1_1SQLi" kindref="compound">SQLi</ref> and <ref refid="de/def/classsamchon_1_1library_1_1SQLStatement" kindref="compound">SQLStatement</ref> are the ODBC drivier designed to follow principles of OOP by adapter pattern. <ref refid="d5/d37/classsamchon_1_1library_1_1XML" kindref="compound">XML</ref> class is designed to follow composite relationship. </para><para></para><para><image type="html" name="library_data.png"></image>
 <image type="latex" name="library_data.png"></image>
</para><para></para></listitem>
<listitem>
<para><heading level="3"><ref refid="d2/d56/classsamchon_1_1library_1_1Event" kindref="compound">Event</ref> libraries. </heading>
</para><para></para><para>Libraries representing events and dispatching those events, which are running on background, with own exclusive thread. </para><para></para><para></para><para>But there&apos;s something to notice. Since C++11, calling member method of a class by new thread passing by static method and void pointer is recommended to avoid. By guidance of the STL, using std::thread and std::bind will be better. As that reason, <ref refid="d2/d56/classsamchon_1_1library_1_1Event" kindref="compound">Event</ref> and <ref refid="d3/d9b/classsamchon_1_1library_1_1EventDispatcher" kindref="compound">EventDispatcher</ref> can be depreciated in next generation of Samchon Framework. </para><para></para><para><image type="html" name="library_event.png"></image>
 <image type="latex" name="library_event.png"></image>
</para><para></para></listitem>
<listitem>
<para><heading level="3">File-tree libraries. </heading>
</para><para></para><para>A module for expressing folder and file instances. The objects in file-tree module are realized by <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">protocol::Entity</ref>.</para><para></para><para>They have recursive and hierarchical relationship and created by Factory class (<ref refid="d6/d60/classsamchon_1_1library_1_1FTFactory" kindref="compound">FTFactory</ref>, factory pattern). Those objects can be archived in and loaded from Database. Using the pre-defined methods interaction with Databse, you can not only express real file and folder instances but also realize virtual file system. </para><para></para><para></para><para>Classes in the Module of file-tree are all abstract, but package nam-tree can be an example inheriting and having real model from those abstract classes. </para><para></para><para><image type="html" name="library_file_tree.png"></image>
 <image type="latex" name="library_file_tree.png"></image>
</para><para></para></listitem>
</itemizedlist>
</para><para><simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/documentation/library.hpp" line="85" column="1"/>
  </compounddef>
</doxygen>
