<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="d8/de4/classsamchon_1_1WeakString" kind="class" language="C++" prot="public">
    <compoundname>samchon::WeakString</compoundname>
    <includes refid="d8/d3d/WeakString_8hpp" local="no">WeakString.hpp</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="d8/de4/classsamchon_1_1WeakString_1a6f4bf0424f9ede24b62af1b96658f863" prot="private" static="yes" mutable="no">
        <type>const std::vector&lt; std::string &gt;</type>
        <definition>const vector&lt; std::string &gt; SPACE_ARRAY</definition>
        <argsstring></argsstring>
        <name>SPACE_ARRAY</name>
        <initializer>= { &quot; &quot;, &quot;\t&quot;, &quot;\r&quot;, &quot;\n&quot; }</initializer>
        <briefdescription>
<para>An array containing whitespaces. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="38" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="d8/de4/classsamchon_1_1WeakString_1a03aff983f503a71029aecb707175b2ed" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t npos</definition>
        <argsstring></argsstring>
        <name>npos</name>
        <initializer>= -1</initializer>
        <briefdescription>
<para>Maximum value for size_t. </para>        </briefdescription>
        <detaileddescription>
<para>npos is a static member constant value with the greatest possible value for an element of type size_t. </para><para>This value, when used as the value for a len (or sublen) parameter in string&apos;s member functions, means &quot;until the end of the string&quot;. As a return value, it is usually used to indicate no matches. </para><para>This constant is defined with a value of -1, which because size_t is an unsigned integral type, it is the largest possible representable value for this type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="53" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d8/de4/classsamchon_1_1WeakString_1a87cb119678e603084928af555fe13e36" prot="private" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
<para>Referenced characters&apos;s pointer of begining position. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="59" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/de4/classsamchon_1_1WeakString_1a5f31775800bbb46b35b5791def1f3acc" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <briefdescription>
<para>(Specified) size of referenced characters </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="64" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a85acd9337356cbb9777b2ce49bc2f741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WeakString</definition>
        <argsstring>()</argsstring>
        <name>WeakString</name>
        <briefdescription>
<para>Default Constructor does not reference any character. </para>        </briefdescription>
        <detaileddescription>
<para>Constructs an empty string, with zero size </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="74" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="18" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1ade765cdbc359c5ac5c4bae9a97bce0cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WeakString</definition>
        <argsstring>(const char *data, size_t size)</argsstring>
        <name>WeakString</name>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Constructor by characters with specified size. </para>        </briefdescription>
        <detaileddescription>
<para>Constructs by characters to be referenced with limited size. </para><para>Although the original size of data is over the specified size, you can limit referencing size of the characters </para><para><itemizedlist>
<listitem><para>Referencing a part of characters</para></listitem>
</itemizedlist>
<simplesect kind="warning"><para><ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> only references. Be careful about destruction of the characters (data)</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Target characters to be referenced by string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Specified limit-size of characters to be referenced. </para><para>If the specified size is greater than original size, it will be ignored </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="95" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="23" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a14ff3a3ac95a5663c78f4ed4af6048fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WeakString</definition>
        <argsstring>(const char *begin, const char *end)</argsstring>
        <name>WeakString</name>
        <param>
          <type>const char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Constructor by characters of begin and end. </para>        </briefdescription>
        <detaileddescription>
<para>Constructs by characters to be referenced with its end position. </para><para>Although the original end point of data is over the specified end, you can limit end point of the characters. </para><para><itemizedlist>
<listitem><para>Referencing a part of characters</para></listitem>
</itemizedlist>
<simplesect kind="warning"><para><ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> only references. Be careful about destruction of the characters (data).</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Target characters to be referenced by string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Specified end point of characters to be referenced. </para><para>If the specified end point is greater than original end point, it will be ignored. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="116" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a03ea1887df2a076eb6546a99f2bcccdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WeakString</definition>
        <argsstring>(const char *data)</argsstring>
        <name>WeakString</name>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Constructor by characters. </para>        </briefdescription>
        <detaileddescription>
<para>References the null-terminated character sequence pointed by ptr</para><para><simplesect kind="warning"><para><ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> only references. Be careful about destruction of the characeters (data) </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Target characters to be referenced by string </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="125" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="32" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1ad72749b9f6e148578908cb0084a1d00c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WeakString</definition>
        <argsstring>(const char &amp;ch)</argsstring>
        <name>WeakString</name>
        <param>
          <type>const char &amp;</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Constructor by a single character. </para>        </briefdescription>
        <detaileddescription>
<para>References a single character</para><para><simplesect kind="warning"><para><ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> only references. Be careful about destruction of the characeter (data) </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ch</parametername>
</parameternamelist>
<parameterdescription>
<para>Target character to be referenced by string </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="134" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="41" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1ab18789d1c7e6565496f4ec13fbd0a700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WeakString</definition>
        <argsstring>(std::initializer_list&lt; char &gt; &amp;il)</argsstring>
        <name>WeakString</name>
        <param>
          <type>std::initializer_list&lt; char &gt; &amp;</type>
          <declname>il</declname>
        </param>
        <briefdescription>
<para>Constructor by a initializer list. </para>        </briefdescription>
        <detaileddescription>
<para>References initializer list of character</para><para><simplesect kind="warning"><para><ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> only references. Be careful about destruction of the characeters (data) </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>il</parametername>
</parameternamelist>
<parameterdescription>
<para>Target initializer list of characters to be referenced by string </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="143" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="46" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1aa753ad86fb6cf10b454ac77cf857ca35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WeakString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>WeakString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Constructor by string. </para>        </briefdescription>
        <detaileddescription>
<para>References whole chracters of the string</para><para><simplesect kind="warning"><para><ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> only references. Be careful about destruction of the string </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Target string to be referenced by string </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="152" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="55" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1ab8bc840c6563304b1aad68a347330c19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto data</definition>
        <argsstring>() const  -&gt; const char *</argsstring>
        <name>data</name>
        <briefdescription>
<para>Get string data; referenced characeters. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to an array that contains a null-terminated sequence of characters representing the current value of the string object</para><para><simplesect kind="warning"><para>Returned pointer&apos;s size can be longer than string&apos;s specified size if the string references only a part of the characters </para></simplesect>
<simplesect kind="return"><para>A pointer of characters being referenced by the string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="168" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1ac4dde158d6dd302ea028acb582e9b67a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto size</definition>
        <argsstring>() const  -&gt; size_t</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns size of the characters which are being referenced. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the length of the string, in terms of number of referenced characters</para><para><simplesect kind="return"><para>size of characters being referenced by string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="176" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1ab470b2ad7999f03109171a7416d12e3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto empty</definition>
        <argsstring>() const  -&gt; bool</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Tests wheter string is emtpy. </para>        </briefdescription>
        <detaileddescription>
<para>Returns wheter characters&apos; size is zero or not. </para><para>Of course, string references nothing, then returns false, too. </para><para><simplesect kind="return"><para>Wheter size is zero or not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="187" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a469fa5c6c4355c98637ebc1d4b174f87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto at</definition>
        <argsstring>(size_t index) const  -&gt; const char &amp;</argsstring>
        <name>at</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get character of string  Returns a const reference to the character at the specified position. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const reference of character at the specified index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="195" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a4ee6ef2600bc591e86719d3a08f7379d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto operator[]</definition>
        <argsstring>(size_t index) const  -&gt; const char &amp;</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get character of string  Returns a const reference to the character at the specified position. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const reference of character at the specified index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="200" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1ab7a19c8185f7bd25ae66442151e5bbf2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto find</definition>
        <argsstring>(const WeakString &amp;delim, size_t startIndex=NULL) const  -&gt; size_t</argsstring>
        <name>find</name>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>delim</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>startIndex</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Finds first occurence in string. </para>        </briefdescription>
        <detaileddescription>
<para>Finds the string after startIndex and returns the position of first occurence of delim. </para><para>If delim is not found, returns -1 (npos) </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delim</parametername>
</parameternamelist>
<parameterdescription>
<para>The substring of the string which to find </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified starting index of find. Default is 0 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of first occurence of the specified substring or -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="217" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="90" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1aad9f61cb90bd9d704b0ff0619974f2d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto rfind</definition>
        <argsstring>(const WeakString &amp;delim, size_t endIndex=SIZE_MAX) const  -&gt; size_t</argsstring>
        <name>rfind</name>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>delim</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>endIndex</declname>
          <defval>SIZE_MAX</defval>
        </param>
        <briefdescription>
<para>Finds last occurence in string. </para>        </briefdescription>
        <detaileddescription>
<para>Finds the string before endIndex and returns the position of last occurence of delim. If delim is not found, returns -1 (npos)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delim</parametername>
</parameternamelist>
<parameterdescription>
<para>The substring of the string which to find </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified last index of find. Default is <ref refid="d8/de4/classsamchon_1_1WeakString_1ac4dde158d6dd302ea028acb582e9b67a" kindref="member">size()</ref> - 1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of first occurence of the specified substring or -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="230" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="102" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a791a73d5f954cc22ce1b05c7aeb72727" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto finds</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;delims, size_t startIndex=0) const  -&gt; IndexPair&lt; WeakString &gt;</argsstring>
        <name>finds</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>delims</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>startIndex</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Finds first occurence in string. </para>        </briefdescription>
        <detaileddescription>
<para>Finds first occurence position of each delim in the string after startIndex and returns the minimum position of them.</para><para><simplesect kind="note"><para><itemizedlist>
<listitem><para>If startIndex is not specified, then starts from 0. </para></listitem>
<listitem><para>If failed to find any substring, returns -1 (npos)</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delims</parametername>
</parameternamelist>
<parameterdescription>
<para>The substrings of target(str) which to find </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified starting index of find. Default is 0 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pair&lt;size_t := position, string := matched substring&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="247" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="120" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a468809400fbde7b6fcc0a0181db8022b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto finds</definition>
        <argsstring>(const std::vector&lt; WeakString &gt; &amp;delims, size_t startIndex=0) const  -&gt; IndexPair&lt; WeakString &gt;</argsstring>
        <name>finds</name>
        <param>
          <type>const std::vector&lt; <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &gt; &amp;</type>
          <declname>delims</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>startIndex</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="248" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="128" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1adc9be720056faa134c23cd4ffa2cad37" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto rfinds</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;delims, size_t endIndex=SIZE_MAX) const  -&gt; IndexPair&lt; WeakString &gt;</argsstring>
        <name>rfinds</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>delims</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>endIndex</declname>
          <defval>SIZE_MAX</defval>
        </param>
        <briefdescription>
<para>Finds last occurence in string. </para>        </briefdescription>
        <detaileddescription>
<para>Finds last occurence position of each delim in the string before endIndex and returns the maximum position of them.</para><para><simplesect kind="note"><para><itemizedlist>
<listitem><para>If index is not specified, then starts str.size() - 1 </para></listitem>
<listitem><para>If failed to find any substring, returns -1 (npos)</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delims</parametername>
</parameternamelist>
<parameterdescription>
<para>The substrings of target(str) which to find </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified starting index of find. Default is <ref refid="d8/de4/classsamchon_1_1WeakString_1ac4dde158d6dd302ea028acb582e9b67a" kindref="member">size()</ref> - 1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pair&lt;size_t := position, string := matched substring&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="265" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="140" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1afdddb95372d1206024bea4d227d8debc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto rfinds</definition>
        <argsstring>(const std::vector&lt; WeakString &gt; &amp;delims, size_t endIndex=SIZE_MAX) const  -&gt; IndexPair&lt; WeakString &gt;</argsstring>
        <name>rfinds</name>
        <param>
          <type>const std::vector&lt; <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &gt; &amp;</type>
          <declname>delims</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>endIndex</declname>
          <defval>SIZE_MAX</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="266" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="148" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a81719f76c59a56abf690eb56cc76585d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto substr</definition>
        <argsstring>(size_t startIndex, size_t endIndex=SIZE_MAX) const  -&gt; WeakString</argsstring>
        <name>substr</name>
        <param>
          <type>size_t</type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>endIndex</declname>
          <defval>SIZE_MAX</defval>
        </param>
        <briefdescription>
<para>Generates a substring. </para>        </briefdescription>
        <detaileddescription>
<para>Extracts a substring consisting of the characters starts from startIndex and with a size specified size.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Index of the first character. </para><para>If startIndex is greater than endIndex, those will be swapped. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>endIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Number of characters to include in substring. </para><para>If the specified size is greater than last index of characeters, it will be shrinked. </para><para><simplesect kind="return"><para>Sub string by specified index and size </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="286" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="173" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a67aaad8e8e7c1eb82efa68405f477626" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto substring</definition>
        <argsstring>(size_t startIndex, size_t size=SIZE_MAX) const  -&gt; WeakString</argsstring>
        <name>substring</name>
        <param>
          <type>size_t</type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defval>SIZE_MAX</defval>
        </param>
        <briefdescription>
<para>Generates a substring. </para>        </briefdescription>
        <detaileddescription>
<para>Extracts a substring consisting of the character specified by startIndex and all characters up to endIndex - 1. </para><para><itemizedlist>
<listitem><para>If endIndex is not specified, string::size() will be used instead. </para></listitem>
<listitem><para>If endIndex is greater than startIndex, then those will be swapped</para></listitem>
</itemizedlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Index of the first character. </para><para>If startIndex is greater than endIndex, those will be swapped. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Index of the last character - 1. </para><para>If not specified, then string::size() will be used instead. </para><para><simplesect kind="return"><para>Sub string by specified index(es) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="306" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="180" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1add086e67e45d8f9c4aa5adfa2b093c2a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto between</definition>
        <argsstring>(const WeakString &amp;start={}, const WeakString &amp;end={}) const  -&gt; WeakString</argsstring>
        <name>between</name>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>start</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>end</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Generates a substring. </para>        </briefdescription>
        <detaileddescription>
<para>Extracts a substring consisting of the characters from specified start to end. </para><para>It&apos;s same with substring( ? = (str.find(start) + start.size()), find(end, ?) ) </para><para><itemizedlist>
<listitem><para>between("ABCD[EFGH]IJK", "[", "]") =&gt; "EFGH"</para></listitem>
</itemizedlist>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>If start is not specified, extracts from begin of the string to end </para></listitem>
<listitem><para>If end is not specified, extracts from start to end of the string </para></listitem>
<listitem><para>If start and end are all omitted, returns str, itself.</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>A string for separating substring at the front </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>A string for separating substring at the end </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>substring by specified terms </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="326" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="193" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1abaaeec30466e397791dcc467006fed40" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto split</definition>
        <argsstring>(const WeakString &amp;delim) const  -&gt; std::vector&lt; WeakString &gt;</argsstring>
        <name>split</name>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
<para>Generates substrings. </para>        </briefdescription>
        <detaileddescription>
<para>Splits a string in to an array of substrings dividing by the specified delimiter</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delim</parametername>
</parameternamelist>
<parameterdescription>
<para>The pattern which specifies where to split the string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of substrings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="335" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="209" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a09e212a8700b90abfeb4de79ef1e80fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto betweens</definition>
        <argsstring>(const WeakString &amp;start={}, const WeakString &amp;end={}) const  -&gt; std::vector&lt; WeakString &gt;</argsstring>
        <name>betweens</name>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>start</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>end</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Generates substrings. </para>        </briefdescription>
        <detaileddescription>
<para>Splits a string into an array of substrings dividing by delimeters of start and end. </para><para>It&apos;s the array of substrings adjusted the between. </para><para><simplesect kind="note"><para><itemizedlist>
<listitem><para>If start is omitted, it&apos;s same with the split by endStr not having last item </para></listitem>
<listitem><para>If end is omitted, it&apos;s same with the split by startStr not having first item </para></listitem>
<listitem><para>If start and end are all omitted, returns string, itself</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
A string for separating substring at the front. </para><para>If omitted, it&apos;s same with split(end) not having last item. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
A string for separating substring at the end. </para><para>If omitted, it&apos;s same with split(start) not having first item. </para><para><simplesect kind="return"><para>An array of substrings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="357" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="234" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a275cf101177b195684cd178c5029991b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto trim</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;delims) const  -&gt; WeakString</argsstring>
        <name>trim</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>delims</declname>
        </param>
        <briefdescription>
<para>Removes all designated characters from the beginning and end of the specified string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delims</parametername>
</parameternamelist>
<parameterdescription>
<para>Designated character(s) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Updated string where designated characters was removed from the beginning and end </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="368" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="371" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a08ef09c4fd9e9ab5567e160d8845d0b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto ltrim</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;delims) const  -&gt; WeakString</argsstring>
        <name>ltrim</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>delims</declname>
        </param>
        <briefdescription>
<para>Removes all designated characters from the beginning of the specified string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delims</parametername>
</parameternamelist>
<parameterdescription>
<para>Designated character(s) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Updated string where designated characters was removed from the beginning </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="376" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="379" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1acedb1c4deac52f1220cb35173deabf79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto rtrim</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;delims) const  -&gt; WeakString</argsstring>
        <name>rtrim</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>delims</declname>
        </param>
        <briefdescription>
<para>Removes all designated characters from the end of the specified string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delims</parametername>
</parameternamelist>
<parameterdescription>
<para>Designated character(s) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Updated string where designated characters was removed from the end </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="384" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="387" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a4bf796473d47bcc5495648b0264be1a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto trim</definition>
        <argsstring>() const  -&gt; WeakString</argsstring>
        <name>trim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="386" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="345" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1ae44eb7b5977cf30f8529c3ecc3705aaf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto ltrim</definition>
        <argsstring>() const  -&gt; WeakString</argsstring>
        <name>ltrim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="387" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="349" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a54f6837f2ae691d5f1e48e3c79dc9ef7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto rtrim</definition>
        <argsstring>() const  -&gt; WeakString</argsstring>
        <name>rtrim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="388" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="353" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1ae8e91d24b07cf67ee31ea8bc22ad758c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto trim</definition>
        <argsstring>(const WeakString &amp;delim) const  -&gt; WeakString</argsstring>
        <name>trim</name>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="390" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="358" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1ad1c713c81e38a9402940b8642ebd384b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto ltrim</definition>
        <argsstring>(const WeakString &amp;delim) const  -&gt; WeakString</argsstring>
        <name>ltrim</name>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="391" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="362" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a580f984bfc4df9635c84077086da22b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto rtrim</definition>
        <argsstring>(const WeakString &amp;delim) const  -&gt; WeakString</argsstring>
        <name>rtrim</name>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="392" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1aea78abc472f7bc88e761a8ac83089af8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto trim</definition>
        <argsstring>(const std::vector&lt; WeakString &gt; &amp;delims) const  -&gt; WeakString</argsstring>
        <name>trim</name>
        <param>
          <type>const std::vector&lt; <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &gt; &amp;</type>
          <declname>delims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="394" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="284" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a8efb01ee74a7ddfb096d224840d754c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto ltrim</definition>
        <argsstring>(const std::vector&lt; WeakString &gt; &amp;delims) const  -&gt; WeakString</argsstring>
        <name>ltrim</name>
        <param>
          <type>const std::vector&lt; <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &gt; &amp;</type>
          <declname>delims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="395" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="288" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a215277c56c16a2e092ade7fe1c0ced62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto rtrim</definition>
        <argsstring>(const std::vector&lt; WeakString &gt; &amp;delims) const  -&gt; WeakString</argsstring>
        <name>rtrim</name>
        <param>
          <type>const std::vector&lt; <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &gt; &amp;</type>
          <declname>delims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="396" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="315" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1afab244a3be811371b9b569b97616bd25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto replace</definition>
        <argsstring>(const WeakString &amp;before, const WeakString &amp;after) const  -&gt; std::string</argsstring>
        <name>replace</name>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>before</declname>
        </param>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>after</declname>
        </param>
        <briefdescription>
<para>Replace portion of string once. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>A specific word you want to be replaced </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>A specific word you want to replace </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string specific word is replaced once </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="408" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="399" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a76d8038a01203148c625803bd1ada3e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto replaceAll</definition>
        <argsstring>(const WeakString &amp;before, const WeakString &amp;after) const  -&gt; std::string</argsstring>
        <name>replaceAll</name>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>before</declname>
        </param>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>after</declname>
        </param>
        <briefdescription>
<para>Returns a string specified word is replaced. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>A specific word you want to be replaced </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>A specific word you want to replace </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string specified word is replaced </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="417" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="415" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1adae3219f32e951d1a6e20206063badb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto replaceAll</definition>
        <argsstring>(const std::vector&lt; std::pair&lt; std::string, std::string &gt;&gt; &amp;pairs) const  -&gt; std::string</argsstring>
        <name>replaceAll</name>
        <param>
          <type>const std::vector&lt; std::pair&lt; std::string, std::string &gt;&gt; &amp;</type>
          <declname>pairs</declname>
        </param>
        <briefdescription>
<para>Returns a string specified words are replaced. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Target string to replace </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pairs</parametername>
</parameternamelist>
<parameterdescription>
<para>A specific word&apos;s pairs you want to replace and to be replaced </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string specified words are replaced </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="426" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="420" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a4907cccbaec1abfe23a9565994ec51ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto replaceAll</definition>
        <argsstring>(const std::vector&lt; std::pair&lt; WeakString, WeakString &gt;&gt; &amp;pairs) const  -&gt; std::string</argsstring>
        <name>replaceAll</name>
        <param>
          <type>const std::vector&lt; std::pair&lt; <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref>, <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &gt;&gt; &amp;</type>
          <declname>pairs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="427" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="428" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1ae880770f2578006f67d9578573acfe68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto toLowerCase</definition>
        <argsstring>() const  -&gt; std::string</argsstring>
        <name>toLowerCase</name>
        <briefdescription>
<para>Convert uppercase letters to lowercase. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a string that all uppercase characters are converted to lowercase.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wstr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target string to convert uppercase to lowercase </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string converted to lowercase </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="436" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="488" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1aeece710376755a383bd9fba4e96ee9db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto toUpperCase</definition>
        <argsstring>() const  -&gt; std::string</argsstring>
        <name>toUpperCase</name>
        <briefdescription>
<para>Convert uppercase letters to lowercase. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a string all lowercase characters are converted to uppercase.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Target string to convert lowercase to uppercase </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string converted to uppercase </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="445" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="497" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1a7e87fa22870f7fccfef2a73b011f9545" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto operator==</definition>
        <argsstring>(const WeakString &amp;str) const  -&gt; bool</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="450" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="510" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1af74e3b372b35154c0ec27c6d8f8f38b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto operator&lt;</definition>
        <argsstring>(const WeakString &amp;str) const  -&gt; bool</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="451" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="521" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1ad8e66886ebd664b9f2a3adeb34e65727" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto str</definition>
        <argsstring>() const  -&gt; std::string</argsstring>
        <name>str</name>
        <briefdescription>
<para>Get the string content. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a string object with a copy of the current contents in the <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref>.</para><para><simplesect kind="return"><para>A new string copied from the <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="463" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="543" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="d8/de4/classsamchon_1_1WeakString_1aec21c2daaac19676aa46134f63b471c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>operator std::string</definition>
        <argsstring>()</argsstring>
        <name>operator std::string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="464" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.cpp" bodystart="547" bodyend="550"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A string class only references characeters, reference only. </para>    </briefdescription>
    <detaileddescription>
<para>WeakSring does not consider any construction, modification and destruction of characters. </para><para>Thus, you can have greater advantages than std::string on the side of performance and memory, but of course, you can&apos;t modify the characeters at all. </para><para><image type="html" name="library_string.png"></image>
 <image type="latex" name="library_string.png"></image>
</para><para><simplesect kind="warning"><para><itemizedlist>
<listitem><para><ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> not copy(strcpy) characeters but only references characeters. Be careful about destruction of the characters being referenced by the <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> </para></listitem>
<listitem><para><ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> will be used for basic data type in most case. Avoid to use <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> by pre-definition in header (*.hpp)</para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" line="33" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/WeakString.hpp" bodystart="32" bodyend="465"/>
    <listofallmembers>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a469fa5c6c4355c98637ebc1d4b174f87" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>at</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1add086e67e45d8f9c4aa5adfa2b093c2a" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>between</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a09e212a8700b90abfeb4de79ef1e80fe" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>betweens</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1ab8bc840c6563304b1aad68a347330c19" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>data</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a87cb119678e603084928af555fe13e36" prot="private" virt="non-virtual"><scope>samchon::WeakString</scope><name>data_</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1ab470b2ad7999f03109171a7416d12e3e" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>empty</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1ab7a19c8185f7bd25ae66442151e5bbf2" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>find</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a791a73d5f954cc22ce1b05c7aeb72727" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>finds</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a468809400fbde7b6fcc0a0181db8022b" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>finds</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a08ef09c4fd9e9ab5567e160d8845d0b3" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>ltrim</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1ae44eb7b5977cf30f8529c3ecc3705aaf" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>ltrim</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1ad1c713c81e38a9402940b8642ebd384b" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>ltrim</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a8efb01ee74a7ddfb096d224840d754c0" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>ltrim</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a03aff983f503a71029aecb707175b2ed" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>npos</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1aec21c2daaac19676aa46134f63b471c1" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>operator std::string</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1af74e3b372b35154c0ec27c6d8f8f38b1" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>operator&lt;</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a7e87fa22870f7fccfef2a73b011f9545" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>operator==</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a4ee6ef2600bc591e86719d3a08f7379d" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>operator[]</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1afab244a3be811371b9b569b97616bd25" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>replace</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a76d8038a01203148c625803bd1ada3e8" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>replaceAll</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1adae3219f32e951d1a6e20206063badb1" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>replaceAll</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a4907cccbaec1abfe23a9565994ec51ba" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>replaceAll</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1aad9f61cb90bd9d704b0ff0619974f2d7" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>rfind</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1adc9be720056faa134c23cd4ffa2cad37" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>rfinds</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1afdddb95372d1206024bea4d227d8debc" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>rfinds</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1acedb1c4deac52f1220cb35173deabf79" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>rtrim</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a54f6837f2ae691d5f1e48e3c79dc9ef7" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>rtrim</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a580f984bfc4df9635c84077086da22b8" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>rtrim</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a215277c56c16a2e092ade7fe1c0ced62" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>rtrim</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1ac4dde158d6dd302ea028acb582e9b67a" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>size</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a5f31775800bbb46b35b5791def1f3acc" prot="private" virt="non-virtual"><scope>samchon::WeakString</scope><name>size_</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a6f4bf0424f9ede24b62af1b96658f863" prot="private" virt="non-virtual"><scope>samchon::WeakString</scope><name>SPACE_ARRAY</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1abaaeec30466e397791dcc467006fed40" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>split</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1ad8e66886ebd664b9f2a3adeb34e65727" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>str</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a81719f76c59a56abf690eb56cc76585d" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>substr</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a67aaad8e8e7c1eb82efa68405f477626" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>substring</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1ae880770f2578006f67d9578573acfe68" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>toLowerCase</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1aeece710376755a383bd9fba4e96ee9db" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>toUpperCase</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a275cf101177b195684cd178c5029991b" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>trim</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a4bf796473d47bcc5495648b0264be1a4" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>trim</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1ae8e91d24b07cf67ee31ea8bc22ad758c" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>trim</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1aea78abc472f7bc88e761a8ac83089af8" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>trim</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a85acd9337356cbb9777b2ce49bc2f741" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>WeakString</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1ade765cdbc359c5ac5c4bae9a97bce0cc" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>WeakString</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a14ff3a3ac95a5663c78f4ed4af6048fe" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>WeakString</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1a03ea1887df2a076eb6546a99f2bcccdb" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>WeakString</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1ad72749b9f6e148578908cb0084a1d00c" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>WeakString</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1ab18789d1c7e6565496f4ec13fbd0a700" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>WeakString</name></member>
      <member refid="d8/de4/classsamchon_1_1WeakString_1aa753ad86fb6cf10b454ac77cf857ca35" prot="public" virt="non-virtual"><scope>samchon::WeakString</scope><name>WeakString</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
