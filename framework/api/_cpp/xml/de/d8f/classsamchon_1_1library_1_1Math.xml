<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="de/d8f/classsamchon_1_1library_1_1Math" kind="class" language="C++" prot="public">
    <compoundname>samchon::library::Math</compoundname>
    <includes refid="d8/df1/Math_8hpp" local="no">Math.hpp</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="de/d8f/classsamchon_1_1library_1_1Math_1ab587ba72a9c23f238cb4fd70e2fdb545" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double E</definition>
        <argsstring></argsstring>
        <name>E</name>
        <initializer>= exp(1.0)</initializer>
        <briefdescription>
<para>Exponent. </para>        </briefdescription>
        <detaileddescription>
<para>A mathematical constant for the base of natural logarithms, expressed as e. The approximate value of e is 2.71828182845905. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="36" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/d8f/classsamchon_1_1library_1_1Math_1a952eac791b596a61bba0a133a3bb439f" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double PI</definition>
        <argsstring></argsstring>
        <name>PI</name>
        <initializer>= 3.141592653589793</initializer>
        <briefdescription>
<para>¥ð, Number Pi </para>        </briefdescription>
        <detaileddescription>
<para>A mathematical constant for the ratio of the circumference of a circle to its diameter, expressed as pi, with a value of 3.141592653589793. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="45" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/d8f/classsamchon_1_1library_1_1Math_1aa4ae7c64775070011fae8d5610ae1a12" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double LN2</definition>
        <argsstring></argsstring>
        <name>LN2</name>
        <initializer>= 1.0 / log2(<ref refid="de/d8f/classsamchon_1_1library_1_1Math_1ab587ba72a9c23f238cb4fd70e2fdb545" kindref="member">E</ref>)</initializer>
        <briefdescription>
<para>log<subscript>e</subscript>2 </para>        </briefdescription>
        <detaileddescription>
<para>A mathematical constant for the natural logarithm of 2, expressed as log<subscript>e</subscript>2, with an approximate value of 0.6931471805599453. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="54" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/d8f/classsamchon_1_1library_1_1Math_1ae8e1e9f2443e5e3a26fa9f12c7729095" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double LN10</definition>
        <argsstring></argsstring>
        <name>LN10</name>
        <initializer>= 1.0 / log10(<ref refid="de/d8f/classsamchon_1_1library_1_1Math_1ab587ba72a9c23f238cb4fd70e2fdb545" kindref="member">E</ref>)</initializer>
        <briefdescription>
<para>log<subscript>e</subscript>10 </para>        </briefdescription>
        <detaileddescription>
<para>A mathematical constant for the natural logarithm of 10, expressed as log<subscript>e</subscript>10, with an approximate value of 2.302585092994046. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="63" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/d8f/classsamchon_1_1library_1_1Math_1a7314186604a194f9909a2ac6b4f26961" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double LOG2E</definition>
        <argsstring></argsstring>
        <name>LOG2E</name>
        <initializer>= log2(<ref refid="de/d8f/classsamchon_1_1library_1_1Math_1ab587ba72a9c23f238cb4fd70e2fdb545" kindref="member">E</ref>)</initializer>
        <briefdescription>
<para>log<subscript>2</subscript>e </para>        </briefdescription>
        <detaileddescription>
<para>A mathematical constant for the base-2 logarithm of the constant e, expressed as log<subscript>2</subscript>e, with an approximate value of 1.442695040888963387. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="72" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/d8f/classsamchon_1_1library_1_1Math_1afbd85d02ce588f833bac185f84cbeec6" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double LOG10E</definition>
        <argsstring></argsstring>
        <name>LOG10E</name>
        <initializer>= log10(<ref refid="de/d8f/classsamchon_1_1library_1_1Math_1ab587ba72a9c23f238cb4fd70e2fdb545" kindref="member">E</ref>)</initializer>
        <briefdescription>
<para>log<subscript>10</subscript>e </para>        </briefdescription>
        <detaileddescription>
<para>A mathematical constant for the base-10 logarithm of the constant e (<ref refid="de/d8f/classsamchon_1_1library_1_1Math_1ab587ba72a9c23f238cb4fd70e2fdb545" kindref="member">Math.E</ref>), expressed as log<subscript>10</subscript>e, with an approximate value of 0.4342944819032518. The Math.log() method computes the natural logarithm of a number. Multiply the result of Math.log() by <ref refid="de/d8f/classsamchon_1_1library_1_1Math_1afbd85d02ce588f833bac185f84cbeec6" kindref="member">Math.LOG10E</ref> to obtain the base-10 logarithm. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="83" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/d8f/classsamchon_1_1library_1_1Math_1a50b83913dc7bb4f2daee3bef1e928d08" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double SQRT1_2</definition>
        <argsstring></argsstring>
        <name>SQRT1_2</name>
        <initializer>= sqrt(.5)</initializer>
        <briefdescription>
<para>Squart root of 0.5. </para>        </briefdescription>
        <detaileddescription>
<para>A mathematical constant for the square root of one-half, with an approximate value of 0.7071067811865476. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="93" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/d8f/classsamchon_1_1library_1_1Math_1a0dac55511b8235578f5364bcd618056f" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double SQRT2</definition>
        <argsstring></argsstring>
        <name>SQRT2</name>
        <initializer>= sqrt(2.0)</initializer>
        <briefdescription>
<para>Squart root of 2. </para>        </briefdescription>
        <detaileddescription>
<para>A mathematical constant for the square root of 2, with an approximate value of 1.4142135623730951. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="102" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="de/d8f/classsamchon_1_1library_1_1Math_1a3e509be3d40a5848b84a4a4c468f367b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto random</definition>
        <argsstring>() -&gt; double</argsstring>
        <name>random</name>
        <briefdescription>
<para>Get a random value. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a random value following uniform distribution <simplesect kind="return"><para>The random value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="113" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.cpp" bodystart="38" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="de/d8f/classsamchon_1_1library_1_1Math_1a4608d85f4f8fdf5cfebf61ac63c81b79" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto degree_to_radian</definition>
        <argsstring>(double) -&gt; double</argsstring>
        <name>degree_to_radian</name>
        <param>
          <type>double</type>
          <defname>val</defname>
        </param>
        <briefdescription>
<para>Convert degree to radian. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="121" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.cpp" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="de/d8f/classsamchon_1_1library_1_1Math_1afbb4acc719f2b5b6db6952baaa0a6d92" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto radian_to_degree</definition>
        <argsstring>(double) -&gt; double</argsstring>
        <name>radian_to_degree</name>
        <param>
          <type>double</type>
          <defname>val</defname>
        </param>
        <briefdescription>
<para>Convert radian to degree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="126" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.cpp" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="de/d8f/classsamchon_1_1library_1_1Math_1a4e34d4878afed62d77752b1847253a68" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Cont</type>
          </param>
          <param>
            <type>typename _Ty</type>
            <defval>_Cont::value_type</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto minimum</definition>
        <argsstring>(const _Cont &amp;container) -&gt; IndexPair&lt; _Ty &gt;</argsstring>
        <name>minimum</name>
        <param>
          <type>const _Cont &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Calculate minimum value with its index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Cont</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Value type of the container. </para><para>Do not modify the default template argument. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>Container to find its minimum value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair of minimum value and its index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="143" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="143" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="de/d8f/classsamchon_1_1library_1_1Math_1aadb9a0f7583c89e3db836c32d6ae8630" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Cont</type>
          </param>
          <param>
            <type>typename _Ty</type>
            <defval>_Cont::value_type</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto maximum</definition>
        <argsstring>(const _Cont &amp;container) -&gt; IndexPair&lt; _Ty &gt;</argsstring>
        <name>maximum</name>
        <param>
          <type>const _Cont &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Calculate maximum value with its index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Cont</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Value type of the container. </para><para>Do not modify the default template argument. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>Container to find its minimum value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pair of maximum value and its index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="174" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="174" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="de/d8f/classsamchon_1_1library_1_1Math_1a1eef0c92683eff3840c25046ec0e3300" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Cont</type>
          </param>
          <param>
            <type>typename _Ty</type>
            <defval>_Cont::value_type</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto mean</definition>
        <argsstring>(const _Cont &amp;container) -&gt; double</argsstring>
        <name>mean</name>
        <param>
          <type>const _Cont &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Calculate average. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Cont</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Value type of the container. </para><para>Do not modify the default template argument. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>Container to find its mean </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Average(mean) of the contaier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="205" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="205" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="de/d8f/classsamchon_1_1library_1_1Math_1ac3495c5c454d2d06442d6458fa7c1771" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Cont</type>
          </param>
          <param>
            <type>typename _Ty</type>
            <defval>_Cont::value_type</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto median</definition>
        <argsstring>(const _Cont &amp;container) -&gt; double</argsstring>
        <name>median</name>
        <param>
          <type>const _Cont &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Get median value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Cont</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Value type of the container. </para><para>Do not modify the default template argument. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>Container to find its median </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Median value of the container </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="226" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="226" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="de/d8f/classsamchon_1_1library_1_1Math_1ac8389d28b7a677721a21311bc197b66d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Cont</type>
          </param>
          <param>
            <type>typename _Ty</type>
            <defval>_Cont::value_type</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto mode</definition>
        <argsstring>(const _Cont &amp;container) -&gt; _Ty</argsstring>
        <name>mode</name>
        <param>
          <type>const _Cont &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Find mode value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Cont</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Value type of the container. </para><para>Do not modify the default template argument. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>Container to find its mode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Most appeared value in the container </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="258" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="258" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="de/d8f/classsamchon_1_1library_1_1Math_1adfa8cc12bd801acebb0c103c775e815c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Cont</type>
          </param>
          <param>
            <type>typename _Ty</type>
            <defval>_Cont::value_type</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto stdev_p</definition>
        <argsstring>(const _Cont &amp;container) -&gt; double</argsstring>
        <name>stdev_p</name>
        <param>
          <type>const _Cont &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Square root of a variance_p. </para>        </briefdescription>
        <detaileddescription>
<para><formula id="0">$\sqrt{(x_2-x_1)^2+(y_2-y_1)^2}$</formula> </para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Cont</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Value type of the container. </para><para>Do not modify the default template argument. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>Container to find its standard deviation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Standard deviation of the container </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="282" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="de/d8f/classsamchon_1_1library_1_1Math_1ae2d49d84541a08ddaefb35b6826e5e97" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Cont</type>
          </param>
          <param>
            <type>typename _Ty</type>
            <defval>_Cont::value_type</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto stdev_s</definition>
        <argsstring>(const _Cont &amp;container) -&gt; double</argsstring>
        <name>stdev_s</name>
        <param>
          <type>const _Cont &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Square root of a variance_s. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Cont</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Value type of the container. </para><para>Do not modify the default template argument. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>Container to find its variance </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Variance of the container </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="293" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="293" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="de/d8f/classsamchon_1_1library_1_1Math_1a97eacd7519d1ba94952e701ebf3453b8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Cont</type>
          </param>
          <param>
            <type>typename _Ty</type>
            <defval>_Cont::value_type</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto variance_p</definition>
        <argsstring>(const _Cont &amp;container) -&gt; double</argsstring>
        <name>variance_p</name>
        <param>
          <type>const _Cont &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Calculate standard deviation for all population. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Cont</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Value type of the container. </para><para>Do not modify the default template argument. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>Container to find its standard deviation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Standard deviation of the container </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="310" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="310" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="de/d8f/classsamchon_1_1library_1_1Math_1af5b8a662f913ce15cbcb6951ad5ecd8f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Cont</type>
          </param>
          <param>
            <type>typename _Ty</type>
            <defval>_Cont::value_type</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto variance_s</definition>
        <argsstring>(const _Cont &amp;container) -&gt; double</argsstring>
        <name>variance_s</name>
        <param>
          <type>const _Cont &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Calculate variance for sample. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Cont</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Value type of the container. </para><para>Do not modify the default template argument. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>Container to find its variance </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Variance of the container </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="333" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="333" bodyend="342"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Utility of <ref refid="de/d8f/classsamchon_1_1library_1_1Math" kindref="compound">Math</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>Provides some static values and mathmatical methods. </para><para><image type="html" name="library_math.png"></image>
 <image type="latex" name="library_math.png"></image>
</para><para><simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" line="24" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/Math.hpp" bodystart="23" bodyend="343"/>
    <listofallmembers>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1a4608d85f4f8fdf5cfebf61ac63c81b79" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>degree_to_radian</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1ab587ba72a9c23f238cb4fd70e2fdb545" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>E</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1ae8e1e9f2443e5e3a26fa9f12c7729095" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>LN10</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1aa4ae7c64775070011fae8d5610ae1a12" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>LN2</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1afbd85d02ce588f833bac185f84cbeec6" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>LOG10E</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1a7314186604a194f9909a2ac6b4f26961" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>LOG2E</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1aadb9a0f7583c89e3db836c32d6ae8630" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>maximum</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1a1eef0c92683eff3840c25046ec0e3300" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>mean</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1ac3495c5c454d2d06442d6458fa7c1771" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>median</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1a4e34d4878afed62d77752b1847253a68" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>minimum</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1ac8389d28b7a677721a21311bc197b66d" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>mode</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1a952eac791b596a61bba0a133a3bb439f" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>PI</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1afbb4acc719f2b5b6db6952baaa0a6d92" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>radian_to_degree</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1a3e509be3d40a5848b84a4a4c468f367b" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>random</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1a50b83913dc7bb4f2daee3bef1e928d08" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>SQRT1_2</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1a0dac55511b8235578f5364bcd618056f" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>SQRT2</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1adfa8cc12bd801acebb0c103c775e815c" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>stdev_p</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1ae2d49d84541a08ddaefb35b6826e5e97" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>stdev_s</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1a97eacd7519d1ba94952e701ebf3453b8" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>variance_p</name></member>
      <member refid="de/d8f/classsamchon_1_1library_1_1Math_1af5b8a662f913ce15cbcb6951ad5ecd8f" prot="public" virt="non-virtual"><scope>samchon::library::Math</scope><name>variance_s</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
