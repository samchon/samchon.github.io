<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="de/d6f/classsamchon_1_1library_1_1UniqueReadLock" kind="class" language="C++" prot="public">
    <compoundname>samchon::library::UniqueReadLock</compoundname>
    <includes refid="d5/da5/UniqueReadLock_8hpp" local="no">UniqueReadLock.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="de/d6f/classsamchon_1_1library_1_1UniqueReadLock_1acaa0dbeb896e84794224771734b15d5e" prot="private" static="no" mutable="no">
        <type>const <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> *</type>
        <definition>const RWMutex* mtx</definition>
        <argsstring></argsstring>
        <name>mtx</name>
        <briefdescription>
<para>Managed mutex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueReadLock.hpp" line="45" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueReadLock.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/d6f/classsamchon_1_1library_1_1UniqueReadLock_1a0774f698e7c923fe33adcfe95cdf9e73" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool isLocked</definition>
        <argsstring></argsstring>
        <name>isLocked</name>
        <briefdescription>
<para>Whether the mutex was locked by UniqueLock. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueReadLock.hpp" line="50" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueReadLock.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="de/d6f/classsamchon_1_1library_1_1UniqueReadLock_1ad0cdb29e8f3745fd3299ade9d7ccffc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UniqueReadLock</definition>
        <argsstring>(const RWMutex &amp;, bool=true)</argsstring>
        <name>UniqueReadLock</name>
        <param>
          <type>const <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> &amp;</type>
          <defname>mtx</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>doLock</defname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Construct from mutex. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mtx</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutex to manage </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>doLock</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to lock directly or not </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueReadLock.hpp" line="62" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueReadLock.cpp" bodystart="7" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="de/d6f/classsamchon_1_1library_1_1UniqueReadLock_1ab952918f5f4bb7632f715ba95727fbbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UniqueReadLock</definition>
        <argsstring>(const UniqueReadLock &amp;)=delete</argsstring>
        <name>UniqueReadLock</name>
        <param>
          <type>const <ref refid="de/d6f/classsamchon_1_1library_1_1UniqueReadLock" kindref="compound">UniqueReadLock</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Prohibited Copy Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire" kindref="compound">UniqueAcquire</ref> can&apos;t be copied. Use pointer, reference instead. </para><para>If what you want is UniqueAcquire(s) references each other and unlock when all related <ref refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire" kindref="compound">UniqueAcquire</ref> objects are destructed, <ref refid="d7/d8e/classsamchon_1_1library_1_1SharedAcquire" kindref="compound">SharedAcquire</ref> is the best way. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Tried object to copy. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueReadLock.hpp" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d6f/classsamchon_1_1library_1_1UniqueReadLock_1a854b387e1da66b747a3208051cfe6692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UniqueReadLock</definition>
        <argsstring>(UniqueReadLock &amp;&amp;)</argsstring>
        <name>UniqueReadLock</name>
        <param>
          <type><ref refid="de/d6f/classsamchon_1_1library_1_1UniqueReadLock" kindref="compound">UniqueReadLock</ref> &amp;&amp;</type>
          <defname>obj</defname>
        </param>
        <briefdescription>
<para>Move Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>An</parametername>
</parameternamelist>
<parameterdescription>
<para>object to move </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueReadLock.hpp" line="81" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueReadLock.cpp" bodystart="15" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="de/d6f/classsamchon_1_1library_1_1UniqueReadLock_1a41a2f19bf4ff6acbd2f39d071301d434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~UniqueReadLock</definition>
        <argsstring>()</argsstring>
        <name>~UniqueReadLock</name>
        <briefdescription>
<para>Default Destructor. </para>        </briefdescription>
        <detaileddescription>
<para>If read lock has done by the UniqueLock, unlock it </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueReadLock.hpp" line="87" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueReadLock.cpp" bodystart="25" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="de/d6f/classsamchon_1_1library_1_1UniqueReadLock_1adb935251a59a654ff19259005a8ed7f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lock</definition>
        <argsstring>() const </argsstring>
        <name>lock</name>
        <briefdescription>
<para>Lock on read. </para>        </briefdescription>
        <detaileddescription>
<para>Increases a reading count. </para><para>When write_lock is on a progress, wait until write_unlock to be called. </para><para><itemizedlist>
<listitem><para>Reading can be done by multiple sections. </para></listitem>
<listitem><para>Reading can&apos;t be done when writing.</para></listitem>
</itemizedlist>
<simplesect kind="warning"><para>You&apos;ve to call read_unlock when the reading work is terminated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueReadLock.hpp" line="95" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueReadLock.cpp" bodystart="34" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="de/d6f/classsamchon_1_1library_1_1UniqueReadLock_1ab896fcbef7ce95ee1dc6a8c633240ee6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void unlock</definition>
        <argsstring>() const </argsstring>
        <name>unlock</name>
        <briefdescription>
<para>Unlock of read. </para>        </briefdescription>
        <detaileddescription>
<para>Decreases a reading count. </para><para>When write_lock had done after read_lock, it continues by read_unlock if the reading count was 1 (read_unlock makes the count to be zero). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueReadLock.hpp" line="100" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueReadLock.cpp" bodystart="44" bodyend="53"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Unique lock for reading. </para>    </briefdescription>
    <detaileddescription>
<para>A <ref refid="d1/df7/classsamchon_1_1library_1_1UniqueAcquire" kindref="compound">UniqueAcquire</ref> is an object manages a <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> with unique ownership in both states. </para><para><itemizedlist>
<listitem><para>locked </para></listitem>
<listitem><para>unlocked</para></listitem>
</itemizedlist>
</para><para>On construction (or by move-assigning to it), the object locks a <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> object on reading side, for whose locking and unlocking operations becomes responsible. </para><para>This class guarantees a unlocked status on destruction (even if not called explicitly). Therefore it is especially useful as an object with automatic duration, as it guarantees the <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> object is properly unlocked in case an exception is thrown. </para><para>Referenced comments of std::unique_lock </para><para><itemizedlist>
<listitem><para><ulink url="http://www.cplusplus.com/reference/mutex/unique_lock/">http://www.cplusplus.com/reference/mutex/unique_lock/</ulink></para></listitem>
</itemizedlist>
<image type="html" name="library_critical_section.png"></image>
 <image type="latex" name="library_critical_section.png"></image>
</para><para><simplesect kind="note"><para>Though, that the <ref refid="de/d6f/classsamchon_1_1library_1_1UniqueReadLock" kindref="compound">UniqueReadLock</ref> object does not manage the lifetime of the <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> object in any way: the duration of the <ref refid="df/d85/classsamchon_1_1library_1_1RWMutex" kindref="compound">RWMutex</ref> object shall extend at least until the destruction of the <ref refid="de/d6f/classsamchon_1_1library_1_1UniqueReadLock" kindref="compound">UniqueReadLock</ref> that manages it.</para></simplesect>
<simplesect kind="see"><para><ref refid="d8/dd4/namespacesamchon_1_1library" kindref="compound">samchon::library</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="2809">
        <label>UniqueReadLock</label>
        <link refid="de/d6f/classsamchon_1_1library_1_1UniqueReadLock"/>
        <childnode refid="2810" relation="usage">
          <edgelabel>mtx</edgelabel>
        </childnode>
      </node>
      <node id="2810">
        <label>RWMutex</label>
        <link refid="df/d85/classsamchon_1_1library_1_1RWMutex"/>
      </node>
    </collaborationgraph>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueReadLock.hpp" line="40" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/library/UniqueReadLock.hpp" bodystart="39" bodyend="106"/>
    <listofallmembers>
      <member refid="de/d6f/classsamchon_1_1library_1_1UniqueReadLock_1a0774f698e7c923fe33adcfe95cdf9e73" prot="private" virt="non-virtual"><scope>samchon::library::UniqueReadLock</scope><name>isLocked</name></member>
      <member refid="de/d6f/classsamchon_1_1library_1_1UniqueReadLock_1adb935251a59a654ff19259005a8ed7f7" prot="public" virt="non-virtual"><scope>samchon::library::UniqueReadLock</scope><name>lock</name></member>
      <member refid="de/d6f/classsamchon_1_1library_1_1UniqueReadLock_1acaa0dbeb896e84794224771734b15d5e" prot="private" virt="non-virtual"><scope>samchon::library::UniqueReadLock</scope><name>mtx</name></member>
      <member refid="de/d6f/classsamchon_1_1library_1_1UniqueReadLock_1ad0cdb29e8f3745fd3299ade9d7ccffc9" prot="public" virt="non-virtual"><scope>samchon::library::UniqueReadLock</scope><name>UniqueReadLock</name></member>
      <member refid="de/d6f/classsamchon_1_1library_1_1UniqueReadLock_1ab952918f5f4bb7632f715ba95727fbbc" prot="public" virt="non-virtual"><scope>samchon::library::UniqueReadLock</scope><name>UniqueReadLock</name></member>
      <member refid="de/d6f/classsamchon_1_1library_1_1UniqueReadLock_1a854b387e1da66b747a3208051cfe6692" prot="public" virt="non-virtual"><scope>samchon::library::UniqueReadLock</scope><name>UniqueReadLock</name></member>
      <member refid="de/d6f/classsamchon_1_1library_1_1UniqueReadLock_1ab896fcbef7ce95ee1dc6a8c633240ee6" prot="public" virt="non-virtual"><scope>samchon::library::UniqueReadLock</scope><name>unlock</name></member>
      <member refid="de/d6f/classsamchon_1_1library_1_1UniqueReadLock_1a41a2f19bf4ff6acbd2f39d071301d434" prot="public" virt="non-virtual"><scope>samchon::library::UniqueReadLock</scope><name>~UniqueReadLock</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
