<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="de/dc0/namespacesamchon_1_1protocol_1_1master" kind="namespace" language="C++">
    <compoundname>samchon::protocol::master</compoundname>
    <innerclass refid="d2/d26/classsamchon_1_1protocol_1_1master_1_1DistributedClient" prot="public">samchon::protocol::master::DistributedClient</innerclass>
    <innerclass refid="d3/db6/classsamchon_1_1protocol_1_1master_1_1DistributedClientArray" prot="public">samchon::protocol::master::DistributedClientArray</innerclass>
    <innerclass refid="d9/ddf/classsamchon_1_1protocol_1_1master_1_1DistributedClientArrayMediator" prot="public">samchon::protocol::master::DistributedClientArrayMediator</innerclass>
    <innerclass refid="dd/d60/classsamchon_1_1protocol_1_1master_1_1DistributedClientServerMediator" prot="public">samchon::protocol::master::DistributedClientServerMediator</innerclass>
    <innerclass refid="d7/da8/classsamchon_1_1protocol_1_1master_1_1DistributedServer" prot="public">samchon::protocol::master::DistributedServer</innerclass>
    <innerclass refid="d0/d26/classsamchon_1_1protocol_1_1master_1_1DistributedServerArray" prot="public">samchon::protocol::master::DistributedServerArray</innerclass>
    <innerclass refid="d4/d48/classsamchon_1_1protocol_1_1master_1_1DistributedServerArrayMediator" prot="public">samchon::protocol::master::DistributedServerArrayMediator</innerclass>
    <innerclass refid="d0/d1d/classsamchon_1_1protocol_1_1master_1_1DistributedSlaveServerMediator" prot="public">samchon::protocol::master::DistributedSlaveServerMediator</innerclass>
    <innerclass refid="d5/d46/classsamchon_1_1protocol_1_1master_1_1DistributedSlaveSystemMediator" prot="public">samchon::protocol::master::DistributedSlaveSystemMediator</innerclass>
    <innerclass refid="db/d2d/classsamchon_1_1protocol_1_1master_1_1DistributedSystem" prot="public">samchon::protocol::master::DistributedSystem</innerclass>
    <innerclass refid="d3/d88/classsamchon_1_1protocol_1_1master_1_1DistributedSystemArray" prot="public">samchon::protocol::master::DistributedSystemArray</innerclass>
    <innerclass refid="dc/d8b/classsamchon_1_1protocol_1_1master_1_1DistributedSystemArrayMediator" prot="public">samchon::protocol::master::DistributedSystemArrayMediator</innerclass>
    <innerclass refid="d1/d16/classsamchon_1_1protocol_1_1master_1_1DistributedSystemRole" prot="public">samchon::protocol::master::DistributedSystemRole</innerclass>
    <innerclass refid="de/d14/classsamchon_1_1protocol_1_1master_1_1DSInvokeHistory" prot="public">samchon::protocol::master::DSInvokeHistory</innerclass>
    <innerclass refid="d8/d75/classsamchon_1_1protocol_1_1master_1_1DSInvokeHistoryList" prot="public">samchon::protocol::master::DSInvokeHistoryList</innerclass>
    <innerclass refid="d9/dda/classsamchon_1_1protocol_1_1master_1_1ParallelClient" prot="public">samchon::protocol::master::ParallelClient</innerclass>
    <innerclass refid="d1/dc7/classsamchon_1_1protocol_1_1master_1_1ParallelClientArray" prot="public">samchon::protocol::master::ParallelClientArray</innerclass>
    <innerclass refid="d4/d53/classsamchon_1_1protocol_1_1master_1_1ParallelClientArrayMediator" prot="public">samchon::protocol::master::ParallelClientArrayMediator</innerclass>
    <innerclass refid="d1/da1/classsamchon_1_1protocol_1_1master_1_1ParallelServer" prot="public">samchon::protocol::master::ParallelServer</innerclass>
    <innerclass refid="d3/d5d/classsamchon_1_1protocol_1_1master_1_1ParallelServerArray" prot="public">samchon::protocol::master::ParallelServerArray</innerclass>
    <innerclass refid="db/d8b/classsamchon_1_1protocol_1_1master_1_1ParallelServerArrayMediator" prot="public">samchon::protocol::master::ParallelServerArrayMediator</innerclass>
    <innerclass refid="d4/dcf/classsamchon_1_1protocol_1_1master_1_1ParallelSlaveClientMediator" prot="public">samchon::protocol::master::ParallelSlaveClientMediator</innerclass>
    <innerclass refid="db/dfd/classsamchon_1_1protocol_1_1master_1_1ParallelSlaveServerMediator" prot="public">samchon::protocol::master::ParallelSlaveServerMediator</innerclass>
    <innerclass refid="df/db1/classsamchon_1_1protocol_1_1master_1_1ParallelSlaveSystemMediator" prot="public">samchon::protocol::master::ParallelSlaveSystemMediator</innerclass>
    <innerclass refid="d9/d6b/classsamchon_1_1protocol_1_1master_1_1ParallelSystem" prot="public">samchon::protocol::master::ParallelSystem</innerclass>
    <innerclass refid="d8/d9c/classsamchon_1_1protocol_1_1master_1_1ParallelSystemArray" prot="public">samchon::protocol::master::ParallelSystemArray</innerclass>
    <innerclass refid="d3/d18/classsamchon_1_1protocol_1_1master_1_1ParallelSystemArrayMediator" prot="public">samchon::protocol::master::ParallelSystemArrayMediator</innerclass>
    <innerclass refid="d9/dae/classsamchon_1_1protocol_1_1master_1_1PRInvokeHistory" prot="public">samchon::protocol::master::PRInvokeHistory</innerclass>
    <innerclass refid="df/d50/classsamchon_1_1protocol_1_1master_1_1PRInvokeHistoryArray" prot="public">samchon::protocol::master::PRInvokeHistoryArray</innerclass>
    <innerclass refid="df/d18/classsamchon_1_1protocol_1_1master_1_1PRMasterHistory" prot="public">samchon::protocol::master::PRMasterHistory</innerclass>
    <briefdescription>
<para>Package for external system, within the framework of master. </para>    </briefdescription>
    <detaileddescription>
<para><image type="html" name="distributed_and_parallel_processing_system.png"></image>
 <image type="latex" name="distributed_and_parallel_processing_system.png"></image>
</para><para>In master package, provides distributed and parallel processing system modules which are in framework of master. With classes in master package, you can realize any type of distributed or parallel processing system in master side, even how enormouse scale those have. </para><para><heading level="5">Distributed Processing System </heading>
</para><para>A distributed processing system of master, a master (<ref refid="d3/d88/classsamchon_1_1protocol_1_1master_1_1DistributedSystemArray" kindref="compound">master::DistributedSystemArray</ref>) allocates roles (<ref refid="d1/d16/classsamchon_1_1protocol_1_1master_1_1DistributedSystemRole" kindref="compound">master::DistributedSystemRole</ref>) to systems (<ref refid="db/d2d/classsamchon_1_1protocol_1_1master_1_1DistributedSystem" kindref="compound">master::DistributedSystem</ref>). User does not consider about which roles are allocated to which systems. User just accesses to a <emphasis>role</emphasis> and send or reply message from those roles.</para><para><itemizedlist>
<listitem>
<para>It&apos;s the proxy pattern have mentioned in external system </para><para><ref refid="df/d42/classsamchon_1_1protocol_1_1ExternalSystem" kindref="compound">ExternalSystem</ref> objects are managed by <ref refid="d9/dc6/classsamchon_1_1protocol_1_1ExternalSystemArray" kindref="compound">ExternalSystemArray</ref> and the <ref refid="d9/dc6/classsamchon_1_1protocol_1_1ExternalSystemArray" kindref="compound">ExternalSystemArray</ref> can access to a role belongs to a system directly. When you send an <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message to <ref refid="d9/dc6/classsamchon_1_1protocol_1_1ExternalSystemArray" kindref="compound">ExternalSystemArray</ref>, the <ref refid="d9/dc6/classsamchon_1_1protocol_1_1ExternalSystemArray" kindref="compound">ExternalSystemArray</ref> finds matched <ref refid="d4/db7/classsamchon_1_1protocol_1_1ExternalSystemRole" kindref="compound">ExternalSystemRole</ref> and the <ref refid="d4/db7/classsamchon_1_1protocol_1_1ExternalSystemRole" kindref="compound">ExternalSystemRole</ref> shifts the network I/O responsibility to belonged <ref refid="df/d42/classsamchon_1_1protocol_1_1ExternalSystem" kindref="compound">ExternalSystem</ref>. This relationship called &quot;Proxy Pattern&quot;. By the pattern, &quot;Proxy&quot;, you can concentrate on roles irrespective of where each role is belonged to. </para><para></para><para><itemizedlist>
<listitem>
<para><ref refid="d9/dc6/classsamchon_1_1protocol_1_1ExternalSystemArray_1ae0f466a169b2d23786a2f94ac908672c" kindref="member">ExternalSystemArray::sendData()</ref> -&gt; ExternalSystemRole(Proxy)::sendData() -&gt; <ref refid="d3/dc8/classsamchon_1_1protocol_1_1IClient_1a7e9e36d7847d933abbf3b1eda35aab0d" kindref="member">ExternalSystem::sendData()</ref>  </para></listitem>
<listitem>
<para><ref refid="df/d42/classsamchon_1_1protocol_1_1ExternalSystem_1a5b0e5be870f2d6a26004a8e637a1ce6c" kindref="member">ExternalSystem::replyData()</ref> -&gt; ExternalSystemRole(Proxy)::replyData()  </para></listitem>
</itemizedlist>
</para></listitem>
</itemizedlist>
</para><para>However, unlike the case of managing roles from <ref refid="d9/dc6/classsamchon_1_1protocol_1_1ExternalSystemArray" kindref="compound">ExternalSystemArray</ref>, in <ref refid="d3/d88/classsamchon_1_1protocol_1_1master_1_1DistributedSystemArray" kindref="compound">DistributedSystemArray</ref>, roles can be allocated in multiple systems duplicately. And the roles can be moved to another systems. Those management and allocation of roles are determined by estimation of performance of each system, and required performance of each role. </para><para><image type="html" name="protocol_master_distributed_system.png"></image>
 <image type="latex" name="protocol_master_distributed_system.png"></image>
</para><para><heading level="5">Parallel Processing System </heading>
</para><para>Unlike distributed processing system, the parallel processing system is not complicate. It has very simple logic. About requested processes, master(master::ParallelSystemArray) allocates each process to each slave system by their own performance index have estimated. </para><para><image type="html" name="protocol_master_parallel_system.png"></image>
 <image type="latex" name="protocol_master_parallel_system.png"></image>
</para><para><simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/documentation/master.hpp" line="59" column="1"/>
  </compounddef>
</doxygen>
