<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="da/da0/classsamchon_1_1example_1_1packer_1_1Packer" kind="class" language="C++" prot="public">
    <compoundname>samchon::example::packer::Packer</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::vector&lt; std::shared_ptr&lt; WrapperArray &gt; &gt;</basecompoundref>
    <includes refid="d9/dd9/Packer_8hpp" local="no">Packer.hpp</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="da/da0/classsamchon_1_1example_1_1packer_1_1Packer_1af49aabc65e0ae5b1fddc9a050eb1e043" prot="private" static="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d4/dfe/classsamchon_1_1example_1_1packer_1_1WrapperArray" kindref="compound">WrapperArray</ref> &gt; &gt;</type>
        <definition>typedef std::vector&lt;std::shared_ptr&lt;WrapperArray&gt; &gt; super</definition>
        <argsstring></argsstring>
        <name>super</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.hpp" line="36" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="da/da0/classsamchon_1_1example_1_1packer_1_1Packer_1abba5ba2b7a43c836554b39cbff2002da" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="df/d73/classsamchon_1_1example_1_1packer_1_1Product" kindref="compound">Product</ref> &gt; *</type>
        <definition>std::vector&lt;Product&gt;* productArray</definition>
        <argsstring></argsstring>
        <name>productArray</name>
        <briefdescription>
<para>Prodcut(s) to package in some Wrapper(s) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.hpp" line="41" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/da0/classsamchon_1_1example_1_1packer_1_1Packer_1aa3c448aa41125f33cf449870e5b5a5cc" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="dc/d06/classsamchon_1_1example_1_1packer_1_1Wrapper" kindref="compound">Wrapper</ref> &gt; *</type>
        <definition>std::vector&lt;Wrapper&gt;* wrapperArray</definition>
        <argsstring></argsstring>
        <name>wrapperArray</name>
        <briefdescription>
<para>Type of Wrapper(s) to be used for packaging. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.hpp" line="46" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="da/da0/classsamchon_1_1example_1_1packer_1_1Packer_1afc348d4a387863473bdbe997438df522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Packer</definition>
        <argsstring>(std::vector&lt; Product &gt; *, std::vector&lt; Wrapper &gt; *)</argsstring>
        <name>Packer</name>
        <param>
          <type>std::vector&lt; <ref refid="df/d73/classsamchon_1_1example_1_1packer_1_1Product" kindref="compound">Product</ref> &gt; *</type>
          <defname>productArray</defname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="dc/d06/classsamchon_1_1example_1_1packer_1_1Wrapper" kindref="compound">Wrapper</ref> &gt; *</type>
          <defname>wrapperArray</defname>
        </param>
        <briefdescription>
<para>Construct from products and wrapper. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>productArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Product(s) to input some <ref refid="dc/d06/classsamchon_1_1example_1_1packer_1_1Wrapper" kindref="compound">Wrapper</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wrapperArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of Wrapper(s) to be used </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.hpp" line="58" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.cpp" bodystart="13" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="da/da0/classsamchon_1_1example_1_1packer_1_1Packer_1a6d9162023924b148bdf343e485d1cc2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Packer</definition>
        <argsstring>(const Packer &amp;)</argsstring>
        <name>Packer</name>
        <param>
          <type>const <ref refid="da/da0/classsamchon_1_1example_1_1packer_1_1Packer" kindref="compound">Packer</ref> &amp;</type>
          <defname>packer</defname>
        </param>
        <briefdescription>
<para>Copy Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Copy constructor of <ref refid="da/da0/classsamchon_1_1example_1_1packer_1_1Packer" kindref="compound">Packer</ref> does not copy children items. </para><para>Only copies member variables(productArray, wrapperArray) of <ref refid="da/da0/classsamchon_1_1example_1_1packer_1_1Packer" kindref="compound">Packer</ref>&apos;s. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.hpp" line="67" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.cpp" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="da/da0/classsamchon_1_1example_1_1packer_1_1Packer_1aa5f96dceae0a01376ab1001f038abf9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void optimize</definition>
        <argsstring>()</argsstring>
        <name>optimize</name>
        <briefdescription>
<para>Find the best packaging method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.hpp" line="75" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.cpp" bodystart="30" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="da/da0/classsamchon_1_1example_1_1packer_1_1Packer_1a53cb7f8d98234bd90072bf504f318301" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto calcPrice</definition>
        <argsstring>() const  -&gt; int</argsstring>
        <name>calcPrice</name>
        <briefdescription>
<para>Calculate price of the wrappers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.hpp" line="80" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.cpp" bodystart="73" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="da/da0/classsamchon_1_1example_1_1packer_1_1Packer_1a22a175a3f828497e884c688f7a9aaadb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto toString</definition>
        <argsstring>() const  -&gt; std::string</argsstring>
        <name>toString</name>
        <briefdescription>
<para>Return a string represents an packaging method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.hpp" line="88" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.cpp" bodystart="85" bodyend="92"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A packer planning the best packaging. </para>    </briefdescription>
    <detaileddescription>
<para>Retrieves the solution of packaging by combination permuation and factorial case. </para><para><image type="html" name="example_packer.png"></image>
 <image type="latex" name="example_packer.png"></image>
</para><para><simplesect kind="warning"><para></para></simplesect>
Be careful about number of products and wrappers. </para><para>The time complexity of <ref refid="da/da0/classsamchon_1_1example_1_1packer_1_1Packer" kindref="compound">Packer</ref> overs O(m^n). Elapsed time of calculation increases enourmously. Do not use <ref refid="da/da0/classsamchon_1_1example_1_1packer_1_1Packer" kindref="compound">Packer</ref> if the digits of number of products or wrappers overs 2. </para><para><simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.hpp" line="34" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/examples/packer/Packer.hpp" bodystart="32" bodyend="89"/>
    <listofallmembers>
      <member refid="da/da0/classsamchon_1_1example_1_1packer_1_1Packer_1a53cb7f8d98234bd90072bf504f318301" prot="public" virt="non-virtual"><scope>samchon::example::packer::Packer</scope><name>calcPrice</name></member>
      <member refid="da/da0/classsamchon_1_1example_1_1packer_1_1Packer_1aa5f96dceae0a01376ab1001f038abf9f" prot="public" virt="non-virtual"><scope>samchon::example::packer::Packer</scope><name>optimize</name></member>
      <member refid="da/da0/classsamchon_1_1example_1_1packer_1_1Packer_1afc348d4a387863473bdbe997438df522" prot="public" virt="non-virtual"><scope>samchon::example::packer::Packer</scope><name>Packer</name></member>
      <member refid="da/da0/classsamchon_1_1example_1_1packer_1_1Packer_1a6d9162023924b148bdf343e485d1cc2c" prot="public" virt="non-virtual"><scope>samchon::example::packer::Packer</scope><name>Packer</name></member>
      <member refid="da/da0/classsamchon_1_1example_1_1packer_1_1Packer_1abba5ba2b7a43c836554b39cbff2002da" prot="private" virt="non-virtual"><scope>samchon::example::packer::Packer</scope><name>productArray</name></member>
      <member refid="da/da0/classsamchon_1_1example_1_1packer_1_1Packer_1af49aabc65e0ae5b1fddc9a050eb1e043" prot="private" virt="non-virtual"><scope>samchon::example::packer::Packer</scope><name>super</name></member>
      <member refid="da/da0/classsamchon_1_1example_1_1packer_1_1Packer_1a22a175a3f828497e884c688f7a9aaadb" prot="public" virt="non-virtual"><scope>samchon::example::packer::Packer</scope><name>toString</name></member>
      <member refid="da/da0/classsamchon_1_1example_1_1packer_1_1Packer_1aa3c448aa41125f33cf449870e5b5a5cc" prot="private" virt="non-virtual"><scope>samchon::example::packer::Packer</scope><name>wrapperArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
