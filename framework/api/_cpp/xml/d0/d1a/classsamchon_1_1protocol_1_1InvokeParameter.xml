<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter" kind="class" language="C++" prot="public">
    <compoundname>samchon::protocol::InvokeParameter</compoundname>
    <basecompoundref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" prot="public" virt="virtual">Entity</basecompoundref>
    <includes refid="d3/da5/InvokeParameter_8hpp" local="no">InvokeParameter.hpp</includes>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a104926358701ef3fbb99555948b9754d" prot="protected" static="no">
        <type><ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref></type>
        <definition>typedef Entity super</definition>
        <argsstring></argsstring>
        <name>super</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="64" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a5ac998eac5fec3b0e6611a91f3c48c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class EntityGroup&lt; std::vector&lt; std::shared_ptr&lt; InvokeParameter &gt; &gt;, InvokeParameter &gt;</definition>
        <argsstring></argsstring>
        <name>EntityGroup&lt; std::vector&lt; std::shared_ptr&lt; InvokeParameter &gt; &gt;, InvokeParameter &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="200" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a307986ecb1ba0c4d88be25c6e24f8522" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Invoke</definition>
        <argsstring></argsstring>
        <name>Invoke</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="60" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a267c8c225065b89b9cd2b19e9dbb1846" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class IClient</definition>
        <argsstring></argsstring>
        <name>IClient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="61" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a9b45b3e13bd9167aab02e17e08916231" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>A name can represent the parameter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="69" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a75b160f574a0be26114bae2c7686a5e1" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
<para>Type of the parameter. </para>        </briefdescription>
        <detaileddescription>
<para>List of pre-defined types </para><para><itemizedlist>
<listitem><para>number </para></listitem>
<listitem><para>string </para></listitem>
<listitem><para>XML </para></listitem>
<listitem><para><ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> </para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="81" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a5d55e2558544e2ad2ea0b54f8e3d41fc" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string str</definition>
        <argsstring></argsstring>
        <name>str</name>
        <briefdescription>
<para>A string value if the type is &quot;string&quot; or &quot;number&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="86" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1ab26b3aa45d6cce710d89386260f584a2" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="d5/d37/classsamchon_1_1library_1_1XML" kindref="compound">library::XML</ref> &gt;</type>
        <definition>std::shared_ptr&lt;library::XML&gt; xml</definition>
        <argsstring></argsstring>
        <name>xml</name>
        <briefdescription>
<para>An XML object if the type is &quot;XML&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="91" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a412e5a3d03930674f9dc87d29a476d60" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> &gt;</type>
        <definition>std::unique_ptr&lt;ByteArray&gt; byteArray</definition>
        <argsstring></argsstring>
        <name>byteArray</name>
        <briefdescription>
<para>A binary value if the type is &quot;ByteArray&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="96" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a01ced39182f4b8fcafefeee439fbd678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>InvokeParameter</definition>
        <argsstring>(const std::string &amp;, const std::string &amp;, const std::string &amp;)</argsstring>
        <name>InvokeParameter</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
<para>Construct from arguments. </para>        </briefdescription>
        <detaileddescription>
<para>Specifies all arguments of an <ref refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter" kindref="compound">InvokeParameter</ref>. You can specify a custom type, that is not one of number or string, but value of the type must be enable to expressed by a string. </para><para>If you want to express an object or container group, use XML instead; <emphasis>Invoke::InvokeParameter(string, XML)</emphasis>. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>A name can represent the <ref refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter" kindref="compound">InvokeParameter</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of value in the <ref refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter" kindref="compound">InvokeParameter</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>A value capsuled by a string </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1acd5f25c367f774d1e45935220cfdd932" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>InvokeParameter</definition>
        <argsstring>(const std::string &amp;name, const _Ty &amp;val)</argsstring>
        <name>InvokeParameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const _Ty &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Construct with its name and a value. </para>        </briefdescription>
        <detaileddescription>
<para>Type of the <ref refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter" kindref="compound">InvokeParameter</ref> will be determined automatically. </para><para>Type supported in the template constructor: </para><para><itemizedlist>
<listitem>
<para>number  <itemizedlist>
<listitem>
<para>(unsigned) short  </para></listitem>
<listitem>
<para>(unsigned) long  </para></listitem>
<listitem>
<para>(unsigned) long long  </para></listitem>
<listitem>
<para>(unsigned) int  </para></listitem>
<listitem>
<para>float  </para></listitem>
<listitem>
<para>double  </para></listitem>
<listitem>
<para>long double  </para></listitem>
</itemizedlist>
</para></listitem>
<listitem>
<para>string  <itemizedlist>
<listitem>
<para>std::string  </para></listitem>
<listitem>
<para><ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref>  </para></listitem>
</itemizedlist>
</para></listitem>
<listitem>
<para>XML  <itemizedlist>
<listitem>
<para>std::shared_ptr&lt;library::XML&gt;  </para></listitem>
<listitem>
<para><ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref>; <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity_1ae1c1e56eb0b3e41f12170628475a7d2a" kindref="member">protocol::Entity::toXML()</ref>  </para></listitem>
</itemizedlist>
</para></listitem>
<listitem>
<para><ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref>  </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="152" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" bodystart="152" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a55c10e498395cab84c2666fbde289d69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>InvokeParameter</definition>
        <argsstring>(const std::string &amp;, const char *)</argsstring>
        <name>InvokeParameter</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a02f6d317a6a822c0435d4aa1dcd86f1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>InvokeParameter</definition>
        <argsstring>(const std::string &amp;, std::string &amp;&amp;)</argsstring>
        <name>InvokeParameter</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <param>
          <type>std::string &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Construct from the name and a moved string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a60f8345ff9ad4f327ec806fb34ce2b63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>InvokeParameter</definition>
        <argsstring>(const std::string &amp;, ByteArray &amp;&amp;)</argsstring>
        <name>InvokeParameter</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <param>
          <type><ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Construct from name and a moved <ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a7d285bdb1bd9d0366862baa4fb9a7660" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual ~InvokeParameter</definition>
        <argsstring>()=default</argsstring>
        <name>~InvokeParameter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a8083eb5e1b4528069982a49abe45205f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>auto</type>
        <definition>auto key</definition>
        <argsstring>() const  -&gt; std::string override</argsstring>
        <name>key</name>
        <reimplements refid="d0/d3e/classsamchon_1_1protocol_1_1Entity_1a5f7b0261859ce45be6fc2cef64026183">key</reimplements>
        <briefdescription>
<para>Get a key that can identify the <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> uniquely. </para>        </briefdescription>
        <detaileddescription>
<para>If identifier of the <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> is not atomic value, returns a string represents the composite identifier. If identifier of the <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> is not string, converts the identifier to string and returns the string. </para><para><simplesect kind="return"><para>An identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="209" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a6b7b6b48103d6ea43f89f4e748527390" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto getName</definition>
        <argsstring>() const  -&gt; std::string</argsstring>
        <name>getName</name>
        <briefdescription>
<para>Get name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="214" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1aee0a39703a17b4628f8606d1563a2d3f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto getType</definition>
        <argsstring>() const  -&gt; std::string</argsstring>
        <name>getType</name>
        <briefdescription>
<para>Get type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="219" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a453b3d2a161870dcd5e7b0677ce5abf4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto getValue</definition>
        <argsstring>() const  -&gt; _Ty</argsstring>
        <name>getValue</name>
        <briefdescription>
<para>Get value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of value to get </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="226" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" bodystart="226" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a91a671e661b273c9cf93c58abd486efb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>auto</type>
        <definition>auto getValue</definition>
        <argsstring>() const  -&gt; WeakString</argsstring>
        <name>getValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="236" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a9d9aafa6b1d8c760c98ae863e0f98383" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>auto</type>
        <definition>auto getValue</definition>
        <argsstring>() const  -&gt; std::shared_ptr&lt; library::XML &gt;</argsstring>
        <name>getValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1ace3c01637e32a5da881de14bf09438ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>auto</type>
        <definition>auto getValue</definition>
        <argsstring>() const  -&gt; ByteArray</argsstring>
        <name>getValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a286e4cff138b52c0b29ea00b80e3ea04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto getvalueAsXML</definition>
        <argsstring>() const  -&gt; std::shared_ptr&lt; library::XML &gt;</argsstring>
        <name>getvalueAsXML</name>
        <briefdescription>
<para>Get value as XML object. </para>        </briefdescription>
        <detaileddescription>
<para>Same with getValue&lt; std::shared_ptr&lt;library::XML&gt; &gt;(); </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="244" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a5c00ee648baf98b21df91d9a3a3b5af5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto referValue</definition>
        <argsstring>() const  -&gt; const _Ty &amp;</argsstring>
        <name>referValue</name>
        <briefdescription>
<para>Reference value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of value to reference </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a0c49916e8f9c163e8131912487a88850" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>auto</type>
        <definition>auto referValue</definition>
        <argsstring>() const  -&gt; const std::string &amp;</argsstring>
        <name>referValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="252" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1ad32d9c3bb04157ef28f29e021c3dfc70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>auto</type>
        <definition>auto referValue</definition>
        <argsstring>() const  -&gt; const ByteArray &amp;</argsstring>
        <name>referValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1afc0bb385fc15e63af50b9c3cc5eb30ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto moveValue</definition>
        <argsstring>() -&gt; _Ty</argsstring>
        <name>moveValue</name>
        <briefdescription>
<para>Move value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_Ty</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of value to move </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a03bc4f227bb2d0baeb1115b377c5286b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>auto</type>
        <definition>auto moveValue</definition>
        <argsstring>() -&gt; std::string</argsstring>
        <name>moveValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="261" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1ab7187d00dee9b52bc6b68a0e9fd1093a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>auto</type>
        <definition>auto moveValue</definition>
        <argsstring>() -&gt; ByteArray</argsstring>
        <name>moveValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a4dd2fa5b4badc3c9ed47366a2615f12b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void construct_by_varadic_template</definition>
        <argsstring>(const string &amp;str)</argsstring>
        <name>construct_by_varadic_template</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" line="89" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1abe405036c777574898d35c26c693b314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void construct_by_varadic_template</definition>
        <argsstring>(const shared_ptr&lt; XML &gt; &amp;xml)</argsstring>
        <name>construct_by_varadic_template</name>
        <param>
          <type>const shared_ptr&lt; <ref refid="d5/d37/classsamchon_1_1library_1_1XML" kindref="compound">XML</ref> &gt; &amp;</type>
          <declname>xml</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" line="105" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="105" bodyend="109"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a4e1fcae8ed7edf7a1b27238ab0bfaeb3" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Ty</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void construct_by_varadic_template</definition>
        <argsstring>(const _Ty &amp;val)</argsstring>
        <name>construct_by_varadic_template</name>
        <param>
          <type>const _Ty &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="177" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" bodystart="177" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a7bab4035f64eb6f9e84a4189e53a7b48" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void construct_by_varadic_template</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>construct_by_varadic_template</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a0b50eed915e182836c33d244376d61dc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void construct_by_varadic_template</definition>
        <argsstring>(const WeakString &amp;)</argsstring>
        <name>construct_by_varadic_template</name>
        <param>
          <type>const <ref refid="d8/de4/classsamchon_1_1WeakString" kindref="compound">WeakString</ref> &amp;</type>
          <defname>str</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="187" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="94" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1ab305f38fecfdccf1e392275bfe93a706" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void construct_by_varadic_template</definition>
        <argsstring>(const ByteArray &amp;)</argsstring>
        <name>construct_by_varadic_template</name>
        <param>
          <type>const <ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> &amp;</type>
          <defname>byteArray</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="188" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a5745e69177724df89289b18faa7c4e57" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void construct_by_varadic_template</definition>
        <argsstring>(const std::shared_ptr&lt; library::XML &gt; &amp;)</argsstring>
        <name>construct_by_varadic_template</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d5/d37/classsamchon_1_1library_1_1XML" kindref="compound">library::XML</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a80a4940be8972c94c8d4357033e770d6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void construct_by_varadic_template</definition>
        <argsstring>(const Entity &amp;)</argsstring>
        <name>construct_by_varadic_template</name>
        <param>
          <type>const <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> &amp;</type>
          <defname>entity</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="191" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="110" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a56deda89a7bfefe60525d1033fab8da7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>InvokeParameter</definition>
        <argsstring>()</argsstring>
        <name>InvokeParameter</name>
        <briefdescription>
<para>Default Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="199" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a4c4b7d9441b10a734e8ce75e67d0375c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void construct</definition>
        <argsstring>(std::shared_ptr&lt; library::XML &gt;) override</argsstring>
        <name>construct</name>
        <reimplements refid="d0/d3e/classsamchon_1_1protocol_1_1Entity_1ac1489c595f4d9e9ceb6fb91463ae195c">construct</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d5/d37/classsamchon_1_1library_1_1XML" kindref="compound">library::XML</ref> &gt;</type>
        </param>
        <briefdescription>
<para>Construct data of the <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> from an XML object. </para>        </briefdescription>
        <detaileddescription>
<para>Overrides the <ref refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a4c4b7d9441b10a734e8ce75e67d0375c" kindref="member">construct()</ref> method and fetch data of member variables from the XML. </para><para>By recommended guidance, data representing member variables are contained in properties of the put XML object. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xml</parametername>
</parameternamelist>
<parameterdescription>
<para>An xml used to construct data of entity </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="200" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="58" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a0d5dbbc77713e17d25b3c1eedaec50cf" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto reservedByteArraySize</definition>
        <argsstring>() const  -&gt; size_t</argsstring>
        <name>reservedByteArraySize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="202" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a11167e86109652642aba9c8cde636a08" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setByteArray</definition>
        <argsstring>(ByteArray &amp;&amp;)</argsstring>
        <name>setByteArray</name>
        <param>
          <type><ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref> &amp;&amp;</type>
          <defname>byteArray</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="203" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1aa55bc231502ef8e0dd9a9c274d028ac9" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>auto</type>
        <definition>auto TAG</definition>
        <argsstring>() const  -&gt; std::string override</argsstring>
        <name>TAG</name>
        <reimplements refid="d0/d3e/classsamchon_1_1protocol_1_1Entity_1a974f48d92f0ef494a8d2c879f82c6426">TAG</reimplements>
        <briefdescription>
<para>A tag name when represented by XML. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A tag name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="268" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1ac0248fcb25b3fa4f463d545005fdcbf3" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>auto</type>
        <definition>auto toXML</definition>
        <argsstring>() const  -&gt; std::shared_ptr&lt; library::XML &gt; override</argsstring>
        <name>toXML</name>
        <reimplements refid="d0/d3e/classsamchon_1_1protocol_1_1Entity_1ae1c1e56eb0b3e41f12170628475a7d2a">toXML</reimplements>
        <briefdescription>
<para>Get an XML object represents the <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns an XML object that can represents the <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> containing member variables into properties. </para><para>A member variable (not object, but atomic value like number, string or date) is categorized as a property within the framework of entity side. Thus, when overriding a <ref refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1ac0248fcb25b3fa4f463d545005fdcbf3" kindref="member">toXML()</ref> method and archiving member variables to an XML object to return, puts each variable to be a property belongs to only an XML object. </para><para>Don&apos;t archive the member variable of atomic value to XML::value causing enormouse creation of XML objects to number of member variables. An <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref> must be represented by only an XML instance (tag). </para><para><table rows="2" cols="2"><row>
<entry thead="yes"><para>Standard Usage  </para></entry><entry thead="yes"><para>Non-standard usage abusing value   </para></entry></row>
<row>
<entry thead="no"><para>&lt;memberList&gt;<linebreak/>
 <nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> &lt;member id=&apos;jhnam88&apos; name=&apos;Jeongho+Nam&apos; birthdate=&apos;1988-03-11&apos; /&gt;<linebreak/>
 <nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> &lt;member id=&apos;master&apos; name=&apos;Administartor&apos; birthdate=&apos;2011-07-28&apos; /&gt;<linebreak/>
 &lt;/memberList&gt;  </para></entry><entry thead="no"><para>&lt;member&gt;<linebreak/>
 <nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> &lt;id&gt;jhnam88&lt;/id&gt;<linebreak/>
 <nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> &lt;name&gt;Jeongho+Nam&lt;/name&gt;<linebreak/>
 <nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/> &lt;birthdate&gt;1988-03-11&lt;/birthdate&gt;<linebreak/>
 &lt;/member&gt;   </para></entry></row>
</table>
</para><para><simplesect kind="return"><para>An XML object representing the <ref refid="d0/d3e/classsamchon_1_1protocol_1_1Entity" kindref="compound">Entity</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="270" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="177" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a10199da9e0302eafc2ece201c78b1237" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto toSQL</definition>
        <argsstring>() const  -&gt; std::string</argsstring>
        <name>toSQL</name>
        <briefdescription>
<para>Get a string of sql statement used to archive history log. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="275" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.cpp" bodystart="200" bodyend="212"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A parameter of an <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>A parameter with its name, type and value in an <ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">Invoke</ref> message. </para><para><ref refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter" kindref="compound">InvokeParameter</ref> supports 4 types pre-defined. </para><para><itemizedlist>
<listitem><para>number </para></listitem>
<listitem><para>string </para></listitem>
<listitem><para>XML </para></listitem>
<listitem><para><ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref></para></listitem>
</itemizedlist>
</para><para>You can specify <ref refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter" kindref="compound">InvokeParameter</ref> to have some type which is not one of the basic 4 types, but values of the custom type must be enable to expressed by one of those types; number, string, XML and <ref refid="dc/d37/classsamchon_1_1ByteArray" kindref="compound">ByteArray</ref>. </para><para><image type="html" name="protocol_invoke.png"></image>
 <image type="latex" name="protocol_invoke.png"></image>
</para><para><simplesect kind="note"><para></para></simplesect>
A member variable void* representing any type of value is depreciated. </para><para>Since C++11, method of void pointer (Declare a variable as void pointer whose type can not specified. And convert the pointer type to specified one for each case) is recommended to avoid. </para><para>As that reason, the <emphasis>void <emphasis>value</emphasis> was a candidate to be depreciated or to be replaced to <emphasis>boost::any</emphasis>. And the <emphasis>void</emphasis> value</emphasis> is really depreciated since version v1.0. </para><para><simplesect kind="see"><para><ref refid="d8/d82/classsamchon_1_1protocol_1_1Invoke" kindref="compound">protocol::Invoke</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d64/namespacesamchon_1_1protocol" kindref="compound">samchon::protocol</ref> </para></simplesect>
<simplesect kind="author"><para>Jeongho Nam </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1944">
        <label>InvokeParameter</label>
        <link refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter"/>
        <childnode refid="1945" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1945">
        <label>Entity</label>
        <link refid="d0/d3e/classsamchon_1_1protocol_1_1Entity"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1946">
        <label>InvokeParameter</label>
        <link refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter"/>
        <childnode refid="1947" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1947">
        <label>Entity</label>
        <link refid="d0/d3e/classsamchon_1_1protocol_1_1Entity"/>
      </node>
    </collaborationgraph>
    <location file="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" line="58" column="1" bodyfile="D:/OneDrive/Project/Samchon/framework/cpp/samchon/protocol/InvokeParameter.hpp" bodystart="56" bodyend="276"/>
    <listofallmembers>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a412e5a3d03930674f9dc87d29a476d60" prot="protected" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>byteArray</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a4c4b7d9441b10a734e8ce75e67d0375c" prot="protected" virt="virtual"><scope>samchon::protocol::InvokeParameter</scope><name>construct</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a4e1fcae8ed7edf7a1b27238ab0bfaeb3" prot="protected" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>construct_by_varadic_template</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a7bab4035f64eb6f9e84a4189e53a7b48" prot="protected" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>construct_by_varadic_template</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a0b50eed915e182836c33d244376d61dc" prot="protected" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>construct_by_varadic_template</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1ab305f38fecfdccf1e392275bfe93a706" prot="protected" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>construct_by_varadic_template</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a5745e69177724df89289b18faa7c4e57" prot="protected" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>construct_by_varadic_template</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a80a4940be8972c94c8d4357033e770d6" prot="protected" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>construct_by_varadic_template</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a4dd2fa5b4badc3c9ed47366a2615f12b" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>construct_by_varadic_template</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1abe405036c777574898d35c26c693b314" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>construct_by_varadic_template</name></member>
      <member refid="d0/d3e/classsamchon_1_1protocol_1_1Entity_1afb4718a8ca5b822cf88129ae04240489" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>Entity</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a6b7b6b48103d6ea43f89f4e748527390" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>getName</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1aee0a39703a17b4628f8606d1563a2d3f" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>getType</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a453b3d2a161870dcd5e7b0677ce5abf4" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>getValue</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a91a671e661b273c9cf93c58abd486efb" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>getValue</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a9d9aafa6b1d8c760c98ae863e0f98383" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>getValue</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1ace3c01637e32a5da881de14bf09438ca" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>getValue</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a286e4cff138b52c0b29ea00b80e3ea04" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>getvalueAsXML</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a01ced39182f4b8fcafefeee439fbd678" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>InvokeParameter</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1acd5f25c367f774d1e45935220cfdd932" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>InvokeParameter</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a55c10e498395cab84c2666fbde289d69" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>InvokeParameter</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a02f6d317a6a822c0435d4aa1dcd86f1a" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>InvokeParameter</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a60f8345ff9ad4f327ec806fb34ce2b63" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>InvokeParameter</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a56deda89a7bfefe60525d1033fab8da7" prot="protected" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>InvokeParameter</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a8083eb5e1b4528069982a49abe45205f" prot="public" virt="virtual"><scope>samchon::protocol::InvokeParameter</scope><name>key</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1afc0bb385fc15e63af50b9c3cc5eb30ed" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>moveValue</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a03bc4f227bb2d0baeb1115b377c5286b" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>moveValue</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1ab7187d00dee9b52bc6b68a0e9fd1093a" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>moveValue</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a9b45b3e13bd9167aab02e17e08916231" prot="protected" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>name</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a5c00ee648baf98b21df91d9a3a3b5af5" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>referValue</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a0c49916e8f9c163e8131912487a88850" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>referValue</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1ad32d9c3bb04157ef28f29e021c3dfc70" prot="public" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>referValue</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a0d5dbbc77713e17d25b3c1eedaec50cf" prot="protected" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>reservedByteArraySize</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a11167e86109652642aba9c8cde636a08" prot="protected" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>setByteArray</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a5d55e2558544e2ad2ea0b54f8e3d41fc" prot="protected" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>str</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a104926358701ef3fbb99555948b9754d" prot="protected" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>super</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1aa55bc231502ef8e0dd9a9c274d028ac9" prot="protected" virt="virtual"><scope>samchon::protocol::InvokeParameter</scope><name>TAG</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a10199da9e0302eafc2ece201c78b1237" prot="protected" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>toSQL</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1ac0248fcb25b3fa4f463d545005fdcbf3" prot="protected" virt="virtual"><scope>samchon::protocol::InvokeParameter</scope><name>toXML</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a75b160f574a0be26114bae2c7686a5e1" prot="protected" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>type</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1ab26b3aa45d6cce710d89386260f584a2" prot="protected" virt="non-virtual"><scope>samchon::protocol::InvokeParameter</scope><name>xml</name></member>
      <member refid="d0/d3e/classsamchon_1_1protocol_1_1Entity_1a07d18d40fa0c4b4f1341cfddc0b600dd" prot="public" virt="virtual"><scope>samchon::protocol::InvokeParameter</scope><name>~Entity</name></member>
      <member refid="d0/d1a/classsamchon_1_1protocol_1_1InvokeParameter_1a7d285bdb1bd9d0366862baa4fb9a7660" prot="public" virt="virtual"><scope>samchon::protocol::InvokeParameter</scope><name>~InvokeParameter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
