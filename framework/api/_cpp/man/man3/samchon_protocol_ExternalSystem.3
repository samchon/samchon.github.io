.TH "ExternalSystem" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ExternalSystem \- A network driver for an external system\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ExternalSystem\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBExternalSystem\fP ()"
.br
.RI "\fIDefault Constructor\&. \fP"
.ti -1c
.RI "virtual void \fBconstruct\fP (std::shared_ptr< \fBlibrary::XML\fP >) override"
.br
.RI "\fIConstruct data of the \fBEntity\fP from an XML object\&. \fP"
.ti -1c
.RI "virtual void \fBstart\fP ()=0"
.br
.RI "\fIStart interaction\&. \fP"
.ti -1c
.RI "virtual auto \fBkey\fP () const  \-> std::string override"
.br
.RI "\fIGet a key that can identify the \fBEntity\fP uniquely\&. \fP"
.ti -1c
.RI "virtual void \fBreplyData\fP (std::shared_ptr< \fBInvoke\fP >) override"
.br
.RI "\fIHandling replied message from an external system\&. \fP"
.ti -1c
.RI "virtual auto \fBTAG\fP () const  \-> std::string override"
.br
.RI "\fIA tag name when represented by XML\&. \fP"
.ti -1c
.RI "virtual auto \fBCHILD_TAG\fP () const  \-> std::string override"
.br
.RI "\fIA tag name of children\&. \fP"
.ti -1c
.RI "virtual auto \fBtoXML\fP () const  \-> std::shared_ptr< \fBlibrary::XML\fP > override"
.br
.RI "\fIGet an XML object represents the \fBEntityGroup\fP\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::string \fBname\fP"
.br
.RI "\fIA name can identify an external system\&. \fP"
.ti -1c
.RI "std::string \fBip\fP"
.br
.RI "\fIAn ip address of an external system\&. \fP"
.ti -1c
.RI "int \fBport\fP"
.br
.RI "\fIA port number of an external system\&. \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A network driver for an external system\&. 

\fBExternalSystem\fP is a boundary class interacting with an external system by network communication\&. Also, \fBExternalSystem\fP is an abstract class that a network role, which one is server and which one is client, is not determined yet\&. 
.PP
The \fBExternalSystem\fP has ExternalSystemRole(s) groupped methods, handling \fBInvoke\fP message interacting with the external system, by subject or unit of a moudle\&. The \fBExternalSystemRole\fP is categorized in a 'control'\&. 
.PP
 
.PP
\fBNote:\fP
.RS 4
.RE
.PP
The \fBExternalSystem\fP class takes a role of interaction with external system in network level\&. However, within a framework of Samchon Framework, a boundary class like the \fBExternalSystem\fP is not such important\&. You can find some evidence in a relationship between \fBExternalSystemArray\fP, \fBExternalSystem\fP and \fBExternalSystemRole\fP\&. 
.PP
Of course, the \fBExternalSystemRole\fP is belonged to an \fBExternalSystem\fP\&. However, if you access an \fBExternalSystemRole\fP from an \fBExternalSystemArray\fP directly, not passing by a belonged \fBExternalSystem\fP, and send an \fBInvoke\fP message even you're not knowing which \fBExternalSystem\fP is related in, it's called 'Proxy pattern'\&.
.PP
Like the explanation of 'Proxy pattern', you can utilize an \fBExternalSystemRole\fP as a proxy of an \fBExternalSystem\fP\&. With the pattern, you can only concentrate on \fBExternalSystemRole\fP itself, what to do with \fBInvoke\fP message, irrespective of the \fBExternalSystemRole\fP is belonged to which \fBExternalSystem\fP\&. 
.PP
\fBSee also:\fP
.RS 4
\fBsamchon::protocol\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void construct (std::shared_ptr< \fBlibrary::XML\fP > xml)\fC [override]\fP, \fC [virtual]\fP"

.PP
Construct data of the \fBEntity\fP from an XML object\&. Constructs the \fBEntityGroup\fP's own member variables only from the input XML object\&. 
.PP
Do not consider about constructing children \fBEntity\fP objects' data in \fBEntityGroup::construct()\fP\&. Those children \fBEntity\fP objects' data will constructed by their own \fBconstruct()\fP method\&. Even insertion of XML objects representing children are done by abstract method of \fBEntityGroup::toXML()\fP\&. 
.PP
Constructs only data of \fBEntityGroup\fP's own\&. 
.PP
\fB[Inherited]\fP
.RS 4
Construct data of the \fBEntity\fP from an XML object\&. 
.RE
.PP
Overrides the \fBconstruct()\fP method and fetch data of member variables from the XML\&. 
.PP
By recommended guidance, data representing member variables are contained in properties of the put XML object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxml\fP An xml used to construct data of entity 
.RE
.PP

.PP
Reimplemented from \fBEntityGroup< _Container, _ETy, _Ty >\fP\&.
.PP
Reimplemented in \fBDistributedSystem\fP, \fBParallelSystem\fP, \fBExternalServer\fP, \fBParallelServer\fP, and \fBDistributedServer\fP\&.
.SS "virtual void start ()\fC [pure virtual]\fP"

.PP
Start interaction\&. An abstract method starting interaction with an external system\&. 
.PP
If an external systems are a server, starts connection and listening Inovoke message, else clients, just starts listening only\&. You also can addict your own procudures of starting the driver, but if you directly override method of abstract \fBExternalSystem\fP, be careful about virtual inheritance\&. 
.PP
Implemented in \fBExternalServer\fP\&.
.SS "auto key () const \-> std::string\fC [override]\fP, \fC [virtual]\fP"

.PP
Get a key that can identify the \fBEntity\fP uniquely\&. If identifier of the \fBEntity\fP is not atomic value, returns a string represents the composite identifier\&. If identifier of the \fBEntity\fP is not string, converts the identifier to string and returns the string\&. 
.PP
\fBReturns:\fP
.RS 4
An identifier 
.RE
.PP

.PP
Reimplemented from \fBEntity\fP\&.
.SS "void replyData (std::shared_ptr< \fBInvoke\fP >)\fC [override]\fP, \fC [virtual]\fP"

.PP
Handling replied message from an external system\&. If there's a related \fBExternalSystemRole\fP, shifts responsibility to the \fBExternalSystemRole\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIinvoke\fP Replied \fBInvoke\fP message 
.RE
.PP

.PP
Reimplemented from \fBIProtocol\fP\&.
.PP
Reimplemented in \fBDistributedSystem\fP, \fBDistributedSlaveSystemMediator\fP, and \fBParallelSlaveSystemMediator\fP\&.
.SS "auto TAG () const \->  std::string\fC [override]\fP, \fC [virtual]\fP"

.PP
A tag name when represented by XML\&. 
.PP
\fBReturns:\fP
.RS 4
A tag name 
.RE
.PP

.PP
Implements \fBEntity\fP\&.
.PP
Reimplemented in \fBDistributedSlaveSystemMediator\fP, and \fBParallelSlaveSystemMediator\fP\&.
.SS "auto CHILD_TAG () const \->  std::string\fC [override]\fP, \fC [virtual]\fP"

.PP
A tag name of children\&. < TAG>
.br
      <CHILD_TAG />
.br
      <CHILD_TAG />
.br
 </TAG> 
.PP
Implements \fBIEntityGroup\fP\&.
.SS "auto toXML () const \-> std::shared_ptr<\fBlibrary::XML\fP>\fC [override]\fP, \fC [virtual]\fP"

.PP
Get an XML object represents the \fBEntityGroup\fP\&. Archives the \fBEntityGroup\fP's own member variables only to the returned XML object\&. 
.PP
Do not consider about archiving children \fBEntity\fP objects' data in \fBEntityGroup::toXML()\fP\&. Those children \fBEntity\fP objects will converted to XML object by their own \fBtoXML()\fP method\&. The insertion of XML objects representing children are done by abstract method of \fBEntityGroup::toXML()\fP\&. 
.PP
Archives only data of \fBEntityGroup\fP's own\&. 
.PP
\fB[Inherited]\fP
.RS 4
Get an XML object represents the \fBEntity\fP\&. 
.RE
.PP
Returns an XML object that can represents the \fBEntity\fP containing member variables into properties\&. 
.PP
A member variable (not object, but atomic value like number, string or date) is categorized as a property within the framework of entity side\&. Thus, when overriding a \fBtoXML()\fP method and archiving member variables to an XML object to return, puts each variable to be a property belongs to only an XML object\&. 
.PP
Don't archive the member variable of atomic value to XML::value causing enormouse creation of XML objects to number of member variables\&. An \fBEntity\fP must be represented by only an XML instance (tag)\&. 
.PP
Standard Usage  Non-standard usage abusing value   <memberList>
.br
      <member id='jhnam88' name='Jeongho+Nam' birthdate='1988-03-11' />
.br
      <member id='master' name='Administartor' birthdate='2011-07-28' />
.br
 </memberList>  <member>
.br
      <id>jhnam88</id>
.br
      <name>Jeongho+Nam</name>
.br
      <birthdate>1988-03-11</birthdate>
.br
 </member>   
.PP
\fBReturns:\fP
.RS 4
An XML object representing the \fBEntity\fP\&. 
.RE
.PP

.PP
Reimplemented from \fBEntityGroup< _Container, _ETy, _Ty >\fP\&.
.PP
Reimplemented in \fBDistributedSystem\fP, \fBParallelSystem\fP, \fBExternalServer\fP, \fBParallelServer\fP, and \fBDistributedServer\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "std::string name\fC [protected]\fP"

.PP
A name can identify an external system\&. The name must be unique in \fBExternalSystemArray\fP\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
