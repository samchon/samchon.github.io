.TH "InvokeParameter" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
InvokeParameter \- A parameter of an \fBInvoke\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <InvokeParameter\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBInvokeParameter\fP (const std::string &, const std::string &, const std::string &)"
.br
.RI "\fIConstruct from arguments\&. \fP"
.ti -1c
.RI "template<typename _Ty > \fBInvokeParameter\fP (const std::string &\fBname\fP, const _Ty &val)"
.br
.RI "\fIConstruct with its name and a value\&. \fP"
.ti -1c
.RI "\fBInvokeParameter\fP (const std::string &, std::string &&)"
.br
.RI "\fIConstruct from the name and a moved string\&. \fP"
.ti -1c
.RI "\fBInvokeParameter\fP (const std::string &, \fBByteArray\fP &&)"
.br
.RI "\fIConstruct from name and a moved \fBByteArray\fP\&. \fP"
.ti -1c
.RI "virtual auto \fBkey\fP () const  \-> std::string override"
.br
.RI "\fIGet a key that can identify the \fBEntity\fP uniquely\&. \fP"
.ti -1c
.RI "auto \fBgetName\fP () const  \-> std::string"
.br
.RI "\fIGet name\&. \fP"
.ti -1c
.RI "auto \fBgetType\fP () const  \-> std::string"
.br
.RI "\fIGet type\&. \fP"
.ti -1c
.RI "template<typename _Ty > auto \fBgetValue\fP () const  \-> _Ty"
.br
.RI "\fIGet value\&. \fP"
.ti -1c
.RI "auto \fBgetvalueAsXML\fP () const  \-> std::shared_ptr< \fBlibrary::XML\fP >"
.br
.RI "\fIGet value as XML object\&. \fP"
.ti -1c
.RI "template<typename _Ty > auto \fBreferValue\fP () const  \-> const _Ty &"
.br
.RI "\fIReference value\&. \fP"
.ti -1c
.RI "template<typename _Ty > auto \fBmoveValue\fP () \-> _Ty"
.br
.RI "\fIMove value\&. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBInvokeParameter\fP ()"
.br
.RI "\fIDefault Constructor\&. \fP"
.ti -1c
.RI "virtual void \fBconstruct\fP (std::shared_ptr< \fBlibrary::XML\fP >) override"
.br
.RI "\fIConstruct data of the \fBEntity\fP from an XML object\&. \fP"
.ti -1c
.RI "virtual auto \fBTAG\fP () const  \-> std::string override"
.br
.RI "\fIA tag name when represented by XML\&. \fP"
.ti -1c
.RI "virtual auto \fBtoXML\fP () const  \-> std::shared_ptr< \fBlibrary::XML\fP > override"
.br
.RI "\fIGet an XML object represents the \fBEntity\fP\&. \fP"
.ti -1c
.RI "auto \fBtoSQL\fP () const  \-> std::string"
.br
.RI "\fIGet a string of sql statement used to archive history log\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::string \fBname\fP"
.br
.RI "\fIA name can represent the parameter\&. \fP"
.ti -1c
.RI "std::string \fBtype\fP"
.br
.RI "\fIType of the parameter\&. \fP"
.ti -1c
.RI "std::string \fBstr\fP"
.br
.RI "\fIA string value if the type is 'string' or 'number'\&. \fP"
.ti -1c
.RI "std::shared_ptr< \fBlibrary::XML\fP > \fBxml\fP"
.br
.RI "\fIAn XML object if the type is 'XML'\&. \fP"
.ti -1c
.RI "std::unique_ptr< \fBByteArray\fP > \fBbyteArray\fP"
.br
.RI "\fIA binary value if the type is 'ByteArray'\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
A parameter of an \fBInvoke\fP\&. 

A parameter with its name, type and value in an \fBInvoke\fP message\&. 
.PP
\fBInvokeParameter\fP supports 4 types pre-defined\&. 
.PP
.PD 0
.IP "\(bu" 2
number 
.IP "\(bu" 2
string 
.IP "\(bu" 2
XML 
.IP "\(bu" 2
\fBByteArray\fP
.PP
.PP
You can specify \fBInvokeParameter\fP to have some type which is not one of the basic 4 types, but values of the custom type must be enable to expressed by one of those types; number, string, XML and \fBByteArray\fP\&. 
.PP
 
.PP
\fBNote:\fP
.RS 4
.RE
.PP
A member variable void* representing any type of value is depreciated\&. 
.PP
Since C++11, method of void pointer (Declare a variable as void pointer whose type can not specified\&. And convert the pointer type to specified one for each case) is recommended to avoid\&. 
.PP
As that reason, the \fIvoid \fIvalue\fP was a candidate to be depreciated or to be replaced to \fIboost::any\fP\&. And the \fIvoid\fP value\fP is really depreciated since version v1\&.0\&. 
.PP
\fBSee also:\fP
.RS 4
\fBprotocol::Invoke\fP 
.PP
\fBsamchon::protocol\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBInvokeParameter\fP (const std::string &, const std::string &, const std::string &)"

.PP
Construct from arguments\&. Specifies all arguments of an \fBInvokeParameter\fP\&. You can specify a custom type, that is not one of number or string, but value of the type must be enable to expressed by a string\&. 
.PP
If you want to express an object or container group, use XML instead; \fIInvoke::InvokeParameter(string, XML)\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP A name can represent the \fBInvokeParameter\fP 
.br
\fItype\fP Type of value in the \fBInvokeParameter\fP 
.br
\fIvalue\fP A value capsuled by a string 
.RE
.PP

.SS "\fBInvokeParameter\fP (const std::string & name, const _Ty & val)\fC [inline]\fP"

.PP
Construct with its name and a value\&. Type of the \fBInvokeParameter\fP will be determined automatically\&. 
.PP
Type supported in the template constructor: 
.PP
.PD 0
.IP "\(bu" 2
number  
.PD 0

.IP "  \(bu" 4
(unsigned) short  
.IP "  \(bu" 4
(unsigned) long  
.IP "  \(bu" 4
(unsigned) long long  
.IP "  \(bu" 4
(unsigned) int  
.IP "  \(bu" 4
float  
.IP "  \(bu" 4
double  
.IP "  \(bu" 4
long double  
.PP

.IP "\(bu" 2
string  
.PD 0

.IP "  \(bu" 4
std::string  
.IP "  \(bu" 4
\fBWeakString\fP  
.PP

.IP "\(bu" 2
XML  
.PD 0

.IP "  \(bu" 4
std::shared_ptr<library::XML>  
.IP "  \(bu" 4
\fBEntity\fP; \fBprotocol::Entity::toXML()\fP  
.PP

.IP "\(bu" 2
\fBByteArray\fP  
.PP
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_Ty\fP Type of value 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void construct (std::shared_ptr< \fBlibrary::XML\fP >)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Construct data of the \fBEntity\fP from an XML object\&. Overrides the \fBconstruct()\fP method and fetch data of member variables from the XML\&. 
.PP
By recommended guidance, data representing member variables are contained in properties of the put XML object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxml\fP An xml used to construct data of entity 
.RE
.PP

.PP
Implements \fBEntity\fP\&.
.SS "auto key () const \-> std::string\fC [override]\fP, \fC [virtual]\fP"

.PP
Get a key that can identify the \fBEntity\fP uniquely\&. If identifier of the \fBEntity\fP is not atomic value, returns a string represents the composite identifier\&. If identifier of the \fBEntity\fP is not string, converts the identifier to string and returns the string\&. 
.PP
\fBReturns:\fP
.RS 4
An identifier 
.RE
.PP

.PP
Reimplemented from \fBEntity\fP\&.
.SS "auto getValue () const \-> _Ty
			\fC [inline]\fP"

.PP
Get value\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_Ty\fP Type of value to get 
.RE
.PP

.SS "auto getvalueAsXML () const \-> std::shared_ptr<\fBlibrary::XML\fP>"

.PP
Get value as XML object\&. Same with getValue< std::shared_ptr<library::XML> >(); 
.SS "auto referValue () const \->  const _Ty &"

.PP
Reference value\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_Ty\fP Type of value to reference 
.RE
.PP

.SS "auto moveValue () \->  _Ty"

.PP
Move value\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_Ty\fP Type of value to move 
.RE
.PP

.SS "auto TAG () const \->  std::string\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
A tag name when represented by XML\&. 
.PP
\fBReturns:\fP
.RS 4
A tag name 
.RE
.PP

.PP
Implements \fBEntity\fP\&.
.SS "auto toXML () const \-> std::shared_ptr<\fBlibrary::XML\fP>\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Get an XML object represents the \fBEntity\fP\&. Returns an XML object that can represents the \fBEntity\fP containing member variables into properties\&. 
.PP
A member variable (not object, but atomic value like number, string or date) is categorized as a property within the framework of entity side\&. Thus, when overriding a \fBtoXML()\fP method and archiving member variables to an XML object to return, puts each variable to be a property belongs to only an XML object\&. 
.PP
Don't archive the member variable of atomic value to XML::value causing enormouse creation of XML objects to number of member variables\&. An \fBEntity\fP must be represented by only an XML instance (tag)\&. 
.PP
Standard Usage  Non-standard usage abusing value   <memberList>
.br
      <member id='jhnam88' name='Jeongho+Nam' birthdate='1988-03-11' />
.br
      <member id='master' name='Administartor' birthdate='2011-07-28' />
.br
 </memberList>  <member>
.br
      <id>jhnam88</id>
.br
      <name>Jeongho+Nam</name>
.br
      <birthdate>1988-03-11</birthdate>
.br
 </member>   
.PP
\fBReturns:\fP
.RS 4
An XML object representing the \fBEntity\fP\&. 
.RE
.PP

.PP
Reimplemented from \fBEntity\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "std::string type\fC [protected]\fP"

.PP
Type of the parameter\&. List of pre-defined types 
.PP
.PD 0
.IP "\(bu" 2
number 
.IP "\(bu" 2
string 
.IP "\(bu" 2
XML 
.IP "\(bu" 2
\fBByteArray\fP 
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
