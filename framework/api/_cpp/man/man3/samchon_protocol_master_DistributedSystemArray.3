.TH "DistributedSystemArray" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DistributedSystemArray \- An array of distributed system drivers\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <DistributedSystemArray\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDistributedSystemArray\fP ()"
.br
.RI "\fIDefault Constructor\&. \fP"
.ti -1c
.RI "virtual void \fBconstruct\fP (std::shared_ptr< \fBlibrary::XML\fP >) override"
.br
.RI "\fIConstruct data of the \fBEntity\fP from an XML object\&. \fP"
.ti -1c
.RI "virtual void \fBstart\fP () override"
.br
.RI "\fIStart interaction\&. \fP"
.ti -1c
.RI "virtual void \fBallocateRoles\fP ()"
.br
.RI "\fIAllocate roles to each distributed processing system\&. \fP"
.ti -1c
.RI "auto \fBgetRole\fP (const std::string &) const  \-> std::shared_ptr< \fBDistributedSystemRole\fP >"
.br
.RI "\fIGet a role\&. \fP"
.ti -1c
.RI "virtual auto \fBtoXML\fP () const  \-> std::shared_ptr< \fBlibrary::XML\fP > override"
.br
.RI "\fIGet an XML object represents the \fBEntityGroup\fP\&. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual auto \fBcreateRole\fP (std::shared_ptr< \fBlibrary::XML\fP >) \-> \fBDistributedSystemRole\fP *=0"
.br
.RI "\fIFactory method of a \fBDistributedSystemRole\fP\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBDictionary\fP< std::shared_ptr< \fBDistributedSystemRole\fP > > \fBroleDictionary\fP"
.br
.RI "\fIA dictionary of role objects\&. \fP"
.ti -1c
.RI "struct \fBlibrary::GAParameters\fP \fBgaParameters\fP"
.br
.RI "\fIA structure of parameters for genetic algorithm\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
An array of distributed system drivers\&. 

\fBDistributedSystemArray\fP class is an \fBExternalSystemArray\fP and an abstract class containing and managing distributed system drivers within framework of master\&. The \fBDistributedSystemArray\fP class allocates \fBDistributedSystemRole\fP objects to \fBDistributedSystem\fP objects for optimization\&. 
.PP
Unlike the \fBExternalSystemRole\fP class which is dependent on an \fBExternalSystem\fP, \fBDistributedSystemRole\fP is not dependent on a \fBDistributedSystem\fP and even can be allocated to multiple \fBDistributedSystem\fP objects\&. Allocation of DistributedSystemRole(s) to DistributedSystem(s) is determined by estimation of performance index pursuing best distribution\&. If number of \fBDistributedSystem\fP and \fBDistributedSystemRole\fP objects is not a lot, optimize by combined permuation algorithm\&. Else the objects are a lot, the allocation will be optimized by genetic algorithm\&. 
.PP
 
.PP
\fB[Inherited]\fP
.RS 4

.RE
.PP
\fBExternalSystemArray\fP is an abstract class containing and managing external system drivers\&. 
.PP
Also, \fBExternalSystemArray\fP can access to ExternalSystemRole(s) directly\&. With the method, you can use an \fBExternalSystemRole\fP as 'logical proxy' of an \fBExternalSystem\fP\&. Of course, the \fBExternalSystemRole\fP is belonged to an \fBExternalSystem\fP\&. However, if you access an \fBExternalSystemRole\fP from an \fBExternalSystemArray\fP directly, not passing by a belonged \fBExternalSystem\fP, and send an \fBInvoke\fP message even you're not knowing which \fBExternalSystem\fP is related in, the \fBExternalSystemRole\fP acted a role of proxy\&. 
.PP
It's called as 'Proxy pattern'\&. With the pattern, you can only concentrate on \fBExternalSystemRole\fP itself, what to do with \fBInvoke\fP message, irrespective of the \fBExternalSystemRole\fP is belonged to which \fBExternalSystem\fP\&. 
.PP
.PD 0
.IP "\(bu" 2
\fBExternalSystemArray::getRole\fP('something')->sendData(invoke);
.PP
 
.PP
\fBSee also:\fP
.RS 4
\fBsamchon::protocol\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual void construct (std::shared_ptr< \fBlibrary::XML\fP > xml)\fC [override]\fP, \fC [virtual]\fP"

.PP
Construct data of the \fBEntity\fP from an XML object\&. Constructs the \fBEntityGroup\fP's own member variables only from the input XML object\&. 
.PP
Do not consider about constructing children \fBEntity\fP objects' data in \fBEntityGroup::construct()\fP\&. Those children \fBEntity\fP objects' data will constructed by their own \fBconstruct()\fP method\&. Even insertion of XML objects representing children are done by abstract method of \fBEntityGroup::toXML()\fP\&. 
.PP
Constructs only data of \fBEntityGroup\fP's own\&. 
.PP
\fB[Inherited]\fP
.RS 4
Construct data of the \fBEntity\fP from an XML object\&. 
.RE
.PP
Overrides the \fBconstruct()\fP method and fetch data of member variables from the XML\&. 
.PP
By recommended guidance, data representing member variables are contained in properties of the put XML object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxml\fP An xml used to construct data of entity 
.RE
.PP

.PP
Reimplemented from \fBEntityGroup< _Container, _ETy, _Ty >\fP\&.
.PP
Reimplemented in \fBDistributedSystemArrayMediator\fP, \fBDistributedClientArrayMediator\fP, and \fBDistributedClientArray\fP\&.
.SS "virtual auto createRole (std::shared_ptr< \fBlibrary::XML\fP >) \->  \fBDistributedSystemRole\fP *\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
Factory method of a \fBDistributedSystemRole\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIAn\fP XML object represents the role\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A new \fBDistributedSystemRole\fP\&. 
.RE
.PP

.SS "virtual void start ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Start interaction\&. An abstract method starting interaction with external systems\&. 
.PP
If external systems are servers, starts connection to them, else clients, opens a server and accepts the external systems\&. You can addict your own procudures of starting drivers, but if you directly override method of abstract \fBExternalSystemArray\fP, be careful about virtual inheritance\&. 
.PP
.PD 0
.IP "\(bu" 2
\fBDistributedClientArray::start()\fP calls \fBDistributedSystemArray::start()\fP and \fBExternalClientArray\fP:\fBstart()\fP 
.PP

.PP
Implements \fBExternalSystemArray\fP\&.
.PP
Reimplemented in \fBDistributedSystemArrayMediator\fP, \fBDistributedClientArrayMediator\fP, \fBDistributedClientArray\fP, \fBDistributedServerArrayMediator\fP, and \fBDistributedServerArray\fP\&.
.SS "virtual void allocateRoles ()\fC [virtual]\fP"

.PP
Allocate roles to each distributed processing system\&. Allocates \fBDistributedSystemRole\fP objects to Distributedsystem objects\&. The allocation will be done when: 
.PP
.PD 0
.IP "\(bu" 2
New distributed system (client) has connected\&. 
.IP "\(bu" 2
Ordinary distributed system is disconnected\&. 
.IP "\(bu" 2
Deviation of elapsed time of whole \fBDistributedSystem\fP overs limited value\&.
.PP

.SS "auto getRole (const std::string &) const \->  std::shared_ptr< \fBDistributedSystemRole\fP >"

.PP
Get a role\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP An identifier of an \fBDistributedSystemRole\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A shared pointer of specialized role 
.RE
.PP

.SS "virtual auto toXML () const \-> std::shared_ptr<\fBlibrary::XML\fP>\fC [override]\fP, \fC [virtual]\fP"

.PP
Get an XML object represents the \fBEntityGroup\fP\&. Archives the \fBEntityGroup\fP's own member variables only to the returned XML object\&. 
.PP
Do not consider about archiving children \fBEntity\fP objects' data in \fBEntityGroup::toXML()\fP\&. Those children \fBEntity\fP objects will converted to XML object by their own \fBtoXML()\fP method\&. The insertion of XML objects representing children are done by abstract method of \fBEntityGroup::toXML()\fP\&. 
.PP
Archives only data of \fBEntityGroup\fP's own\&. 
.PP
\fB[Inherited]\fP
.RS 4
Get an XML object represents the \fBEntity\fP\&. 
.RE
.PP
Returns an XML object that can represents the \fBEntity\fP containing member variables into properties\&. 
.PP
A member variable (not object, but atomic value like number, string or date) is categorized as a property within the framework of entity side\&. Thus, when overriding a \fBtoXML()\fP method and archiving member variables to an XML object to return, puts each variable to be a property belongs to only an XML object\&. 
.PP
Don't archive the member variable of atomic value to XML::value causing enormouse creation of XML objects to number of member variables\&. An \fBEntity\fP must be represented by only an XML instance (tag)\&. 
.PP
Standard Usage  Non-standard usage abusing value   <memberList>
.br
      <member id='jhnam88' name='Jeongho+Nam' birthdate='1988-03-11' />
.br
      <member id='master' name='Administartor' birthdate='2011-07-28' />
.br
 </memberList>  <member>
.br
      <id>jhnam88</id>
.br
      <name>Jeongho+Nam</name>
.br
      <birthdate>1988-03-11</birthdate>
.br
 </member>   
.PP
\fBReturns:\fP
.RS 4
An XML object representing the \fBEntity\fP\&. 
.RE
.PP

.PP
Reimplemented from \fBEntityGroup< _Container, _ETy, _Ty >\fP\&.
.PP
Reimplemented in \fBDistributedSystemArrayMediator\fP, \fBDistributedClientArrayMediator\fP, and \fBDistributedClientArray\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
