.TH "Invoke" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Invoke \- Standard message of network I/O\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Invoke\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBInvoke\fP ()"
.br
.RI "\fIDefault Constructor\&. \fP"
.ti -1c
.RI "\fBInvoke\fP (const std::string &\fBlistener\fP)"
.br
.RI "\fIConstruct from a listener\&. \fP"
.ti -1c
.RI "virtual void \fBconstruct\fP (std::shared_ptr< \fBlibrary::XML\fP >) override"
.br
.RI "\fIConstruct data of the \fBEntity\fP from an XML object\&. \fP"
.ti -1c
.RI "template<typename _Ty , typename\&.\&.\&. _Args> \fBInvoke\fP (const std::string &\fBlistener\fP, const _Ty &val, const _Args &\&.\&.\&.args)"
.br
.RI "\fIConstruct from arguments\&. \fP"
.ti -1c
.RI "auto \fBgetListener\fP () const  \-> std::string"
.br
.RI "\fIGet listener\&. \fP"
.ti -1c
.RI "void \fBsetListener\fP (const std::string &)"
.br
.RI "\fISet listener\&. \fP"
.ti -1c
.RI "virtual auto \fBTAG\fP () const  \-> std::string override"
.br
.RI "\fIA tag name when represented by XML\&. \fP"
.ti -1c
.RI "virtual auto \fBCHILD_TAG\fP () const  \-> std::string override"
.br
.RI "\fIA tag name of children\&. \fP"
.ti -1c
.RI "virtual auto \fBtoXML\fP () const  \-> std::shared_ptr< \fBlibrary::XML\fP > override"
.br
.RI "\fIGet an XML object represents the \fBEntityGroup\fP\&. \fP"
.ti -1c
.RI "auto \fBtoSQL\fP () const  \-> std::string"
.br
.RI "\fIGet a string of sql statement used to archive history log\&. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual auto \fBcreateChild\fP (std::shared_ptr< \fBlibrary::XML\fP >) \-> \fBInvokeParameter\fP *override"
.br
.RI "\fIFactory method of a child \fBEntity\fP\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::string \fBlistener\fP"
.br
.RI "\fIRepresent who listens, often be a function name\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Standard message of network I/O\&. 

\fBInvoke\fP is a class used in network I/O in protocol package of Samchon Framework\&. 
.PP
The \fBInvoke\fP message has an XML structure like the result screen of provided example in below\&. We can enjoy lots of benefits by the normalized and standardized message structure used in network I/O\&. 
.PP
The greatest advantage is that we can make any type of network system, even how the system is enourmously complicated\&. As network communication message is standardized, we only need to concentrate on logical relationships between network systems\&. We can handle each network system like a object (class) in OOD\&. And those relationships can be easily designed by using design pattern\&. 
.PP
In Samchon Framework, you can make any type of network system with basic 3 + 1 componenets (\fBIProtocol\fP, \fBIServer\fP and \fBIClient\fP + \fBServerConnector\fP), by implemens or inherits them, like designing classes of S/W architecture\&. 
.PP
 
.PP
\fBExample source\fP
.RS 4

.PP
.nf
1 #include <iostream>
2 
3 #include <samchon/library/XML\&.hpp>
4 #include <samchon/protocol/Invoke\&.hpp>
5 
6 using namespace std;
7 using namespace samchon;
8 using namespace samchon::library;
9 using namespace samchon::protocol;
10 
11 #ifdef _WIN64
12 #   ifdef _DEBUG
13 #       pragma comment(lib, "x64/Debug/SamchonFramework\&.lib")
14 #   else
15 #       pragma comment(lib, "x64/Release/SamchonFramework\&.lib")
16 #   endif
17 #else
18 #   ifdef _DEBUG
19 #       pragma comment(lib, "Debug/SamchonFramework\&.lib")
20 #   else
21 #       pragma comment(lib, "Release/SamchonFramework\&.lib")
22 #   endif
23 #endif
24 
25 void main()
26 {
27     string str = string("") +
28         "<memberList>\n" +
29         "   <member id='jhnam88' pass='1231' />\n" +
30         "   <member id='samchon' pass='1231'>Administrator</member>\n" +
31         "   <group>3</group>\n" +
32         "</memberList>";
33 
34     shared_ptr<XML> xml(new XML(str));
35     shared_ptr<Invoke> invoke(new Invoke("login", "jhnam88", "1231", 4, xml));
36 
37     cout << "Invoke to XML: " << endl;
38     cout << invoke->toXML()->toString() << endl << endl;
39 
40     cout << "-------------------------------------------------------------" << endl;
41     cout << "   Parameters" << endl;
42     cout << "-------------------------------------------------------------" << endl;
43     cout << "1st param: " << invoke->at(0)->getValue<string>() << endl;
44     cout << "2nd param: " << invoke->at(1)->getValue<string>() << endl;
45     cout << "3rd param: " << invoke->at(2)->getValue<string>() << endl;
46     cout << "4th param: " << endl << invoke->at(3)->getValue<shared_ptr<XML>>()->toString() << endl;
47 
48     system("pause");
49 }

.fi
.PP
.RE
.PP
.SS "Result of the example "
.PP
 
.PP
\fBSee also:\fP
.RS 4
\fBsamchon::protocol\fP 
.PP
\fBprotocol::IProtocol\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBInvoke\fP (const std::string & listener)"

.PP
Construct from a listener\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlistener\fP Represents who listens the \fBInvoke\fP message\&. Almost same with Function name 
.RE
.PP

.SS "\fBInvoke\fP (const std::string & listener, const _Ty & val, const _Args &\&.\&.\&. args)\fC [inline]\fP"

.PP
Construct from arguments\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_Ty\fP Type of an argument which represents a parameter 
.br
\fI_Args\fP Left varadic template arguments' types
.RE
.PP
.PP
Creates \fBInvoke\fP and InvokeParameter(s) at the same time by varadic template method\&. 
.PP
By the varadic template constructor, you can't specify name of each \fBInvokeParameter\fP, but specify type and value of each \fBInvokeParameter\fP\&. If you try to record the \fBInvoke\fP to Database, the name of \fBInvokeParameter\fP will be \fINULL\fP\&.
.PP
\fBNote:\fP
.RS 4
.RE
.PP
By the varadic template constructor, name of InovkeParameter(s) will be omitted\&. Because of name, an identifier of an \fBInvokeParameter\fP, is omitted, you can't access to \fBInvokeParameter\fP by \fBInvoke::has()\fP or \fBInvoke::get()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlistener\fP A string represents who listens the \fBInvoke\fP message\&. Almost same with name of a function\&. 
.br
\fIval\fP A value to be a parameter of \fBInvoke\fP 
.br
\fIargs\fP Left arguments to be parameters of \fBInvoke\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void construct (std::shared_ptr< \fBlibrary::XML\fP > xml)\fC [override]\fP, \fC [virtual]\fP"

.PP
Construct data of the \fBEntity\fP from an XML object\&. Constructs the \fBEntityGroup\fP's own member variables only from the input XML object\&. 
.PP
Do not consider about constructing children \fBEntity\fP objects' data in \fBEntityGroup::construct()\fP\&. Those children \fBEntity\fP objects' data will constructed by their own \fBconstruct()\fP method\&. Even insertion of XML objects representing children are done by abstract method of \fBEntityGroup::toXML()\fP\&. 
.PP
Constructs only data of \fBEntityGroup\fP's own\&. 
.PP
\fB[Inherited]\fP
.RS 4
Construct data of the \fBEntity\fP from an XML object\&. 
.RE
.PP
Overrides the \fBconstruct()\fP method and fetch data of member variables from the XML\&. 
.PP
By recommended guidance, data representing member variables are contained in properties of the put XML object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxml\fP An xml used to construct data of entity 
.RE
.PP

.PP
Reimplemented from \fBEntityGroup< _Container, _ETy, _Ty >\fP\&.
.SS "auto createChild (std::shared_ptr< \fBlibrary::XML\fP >) \->  \fBInvokeParameter\fP *override\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Factory method of a child \fBEntity\fP\&. \fBEntityGroup::createChild()\fP is a factory method creating a new child \fBEntity\fP which is belonged to the \fBEntityGroup\fP\&. This method is called by \fBEntityGroup::construct()\fP\&. The children construction methods \fBEntity::construct()\fP will be called by abstract method of the \fBEntityGroup::construct()\fP\&. 
.PP
\fBReturns:\fP
.RS 4
A new child \fBEntity\fP belongs to \fBEntityGroup\fP\&. 
.RE
.PP

.PP
Implements \fBEntityGroup< _Container, _ETy, _Ty >\fP\&.
.SS "auto TAG () const \->  std::string\fC [override]\fP, \fC [virtual]\fP"

.PP
A tag name when represented by XML\&. 
.PP
\fBReturns:\fP
.RS 4
A tag name 
.RE
.PP

.PP
Implements \fBEntity\fP\&.
.SS "auto CHILD_TAG () const \->  std::string\fC [override]\fP, \fC [virtual]\fP"

.PP
A tag name of children\&. < TAG>
.br
      <CHILD_TAG />
.br
      <CHILD_TAG />
.br
 </TAG> 
.PP
Implements \fBIEntityGroup\fP\&.
.SS "auto toXML () const \-> std::shared_ptr<\fBlibrary::XML\fP>\fC [override]\fP, \fC [virtual]\fP"

.PP
Get an XML object represents the \fBEntityGroup\fP\&. Archives the \fBEntityGroup\fP's own member variables only to the returned XML object\&. 
.PP
Do not consider about archiving children \fBEntity\fP objects' data in \fBEntityGroup::toXML()\fP\&. Those children \fBEntity\fP objects will converted to XML object by their own \fBtoXML()\fP method\&. The insertion of XML objects representing children are done by abstract method of \fBEntityGroup::toXML()\fP\&. 
.PP
Archives only data of \fBEntityGroup\fP's own\&. 
.PP
\fB[Inherited]\fP
.RS 4
Get an XML object represents the \fBEntity\fP\&. 
.RE
.PP
Returns an XML object that can represents the \fBEntity\fP containing member variables into properties\&. 
.PP
A member variable (not object, but atomic value like number, string or date) is categorized as a property within the framework of entity side\&. Thus, when overriding a \fBtoXML()\fP method and archiving member variables to an XML object to return, puts each variable to be a property belongs to only an XML object\&. 
.PP
Don't archive the member variable of atomic value to XML::value causing enormouse creation of XML objects to number of member variables\&. An \fBEntity\fP must be represented by only an XML instance (tag)\&. 
.PP
Standard Usage  Non-standard usage abusing value   <memberList>
.br
      <member id='jhnam88' name='Jeongho+Nam' birthdate='1988-03-11' />
.br
      <member id='master' name='Administartor' birthdate='2011-07-28' />
.br
 </memberList>  <member>
.br
      <id>jhnam88</id>
.br
      <name>Jeongho+Nam</name>
.br
      <birthdate>1988-03-11</birthdate>
.br
 </member>   
.PP
\fBReturns:\fP
.RS 4
An XML object representing the \fBEntity\fP\&. 
.RE
.PP

.PP
Reimplemented from \fBEntityGroup< _Container, _ETy, _Ty >\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
