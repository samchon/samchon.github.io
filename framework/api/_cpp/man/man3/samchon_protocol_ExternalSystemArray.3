.TH "ExternalSystemArray" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ExternalSystemArray \- An array of ExternalSystem(s)\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ExternalSystemArray\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBExternalSystemArray\fP ()"
.br
.RI "\fIDefault Constructor\&. \fP"
.ti -1c
.RI "virtual void \fBstart\fP ()=0"
.br
.RI "\fIStart interaction\&. \fP"
.ti -1c
.RI "auto \fBhasRole\fP (const std::string &) const  \-> bool"
.br
.RI "\fITest whether has a role\&. \fP"
.ti -1c
.RI "auto \fBgetRole\fP (const std::string &) const  \-> std::shared_ptr< \fBExternalSystemRole\fP >"
.br
.RI "\fIGet a role\&. \fP"
.ti -1c
.RI "virtual void \fBsendData\fP (std::shared_ptr< \fBInvoke\fP >) override"
.br
.RI "\fISends an \fBInvoke\fP message to related ExternalSystem(s)\&. \fP"
.ti -1c
.RI "virtual void \fBreplyData\fP (std::shared_ptr< \fBInvoke\fP >) override"
.br
.RI "\fIHandle replied \fBInvoke\fP message\&. \fP"
.ti -1c
.RI "virtual auto \fBTAG\fP () const  \-> std::string override"
.br
.RI "\fIA tag name when represented by XML\&. \fP"
.ti -1c
.RI "virtual auto \fBCHILD_TAG\fP () const  \-> std::string override"
.br
.RI "\fIA tag name of children\&. \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
An array of ExternalSystem(s)\&. 

\fBExternalSystemArray\fP is an abstract class containing and managing external system drivers\&. 
.PP
Also, \fBExternalSystemArray\fP can access to ExternalSystemRole(s) directly\&. With the method, you can use an \fBExternalSystemRole\fP as 'logical proxy' of an \fBExternalSystem\fP\&. Of course, the \fBExternalSystemRole\fP is belonged to an \fBExternalSystem\fP\&. However, if you access an \fBExternalSystemRole\fP from an \fBExternalSystemArray\fP directly, not passing by a belonged \fBExternalSystem\fP, and send an \fBInvoke\fP message even you're not knowing which \fBExternalSystem\fP is related in, the \fBExternalSystemRole\fP acted a role of proxy\&. 
.PP
It's called as 'Proxy pattern'\&. With the pattern, you can only concentrate on \fBExternalSystemRole\fP itself, what to do with \fBInvoke\fP message, irrespective of the \fBExternalSystemRole\fP is belonged to which \fBExternalSystem\fP\&. 
.PP
.PD 0
.IP "\(bu" 2
\fBExternalSystemArray::getRole\fP('something')->sendData(invoke);
.PP
 
.PP
\fBSee also:\fP
.RS 4
\fBsamchon::protocol\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual void start ()\fC [pure virtual]\fP"

.PP
Start interaction\&. An abstract method starting interaction with external systems\&. 
.PP
If external systems are servers, starts connection to them, else clients, opens a server and accepts the external systems\&. You can addict your own procudures of starting drivers, but if you directly override method of abstract \fBExternalSystemArray\fP, be careful about virtual inheritance\&. 
.PP
.PD 0
.IP "\(bu" 2
DistributedClientArray::start() calls DistributedSystemArray::start() and \fBExternalClientArray\fP:\fBstart()\fP 
.PP

.PP
Implemented in \fBDistributedSystemArray\fP, \fBDistributedSystemArrayMediator\fP, \fBParallelSystemArrayMediator\fP, \fBExternalClientArray\fP, \fBDistributedClientArrayMediator\fP, \fBParallelClientArrayMediator\fP, \fBDistributedClientArray\fP, \fBDistributedServerArrayMediator\fP, \fBParallelServerArrayMediator\fP, \fBDistributedServerArray\fP, and \fBExternalServerArray\fP\&.
.SS "auto hasRole (const std::string & name) const \-> bool"

.PP
Test whether has a role\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP Name of an \fBExternalSystemRole\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether has or not 
.RE
.PP

.SS "auto getRole (const std::string & name) const \-> std::shared_ptr<\fBExternalSystemRole\fP>"

.PP
Get a role\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP Name of an \fBExternalSystemRole\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A shared pointer of specialized role 
.RE
.PP

.SS "void sendData (std::shared_ptr< \fBInvoke\fP >)\fC [override]\fP, \fC [virtual]\fP"

.PP
Sends an \fBInvoke\fP message to related ExternalSystem(s)\&. If listener of the \fBInvoke\fP message is registered on some ExternalSystemRole(s), sends the \fBInvoke\fP message to related ExternalSystem(s) (containing the ExternalSystemRole(s))\&. If cannot find any \fBExternalSystemRole\fP, sends the \fBInvoke\fP message to all ExternalSystem(s) belongs to the \fBExternalSystemArray\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinvoke\fP \fBInvoke\fP message to send 
.RE
.PP

.PP
Reimplemented from \fBIProtocol\fP\&.
.SS "void replyData (std::shared_ptr< \fBInvoke\fP >)\fC [override]\fP, \fC [virtual]\fP"

.PP
Handle replied \fBInvoke\fP message\&. Nothing is defined in the \fBExternalSystemArray::replyData()\fP\&. It's only for avoid the method to have a status 'not overriden, abstract'\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinvoke\fP \fBInvoke\fP message to send 
.RE
.PP

.PP
Reimplemented from \fBIProtocol\fP\&.
.SS "auto TAG () const \->  std::string\fC [override]\fP, \fC [virtual]\fP"

.PP
A tag name when represented by XML\&. 
.PP
\fBReturns:\fP
.RS 4
A tag name 
.RE
.PP

.PP
Implements \fBEntity\fP\&.
.SS "auto CHILD_TAG () const \->  std::string\fC [override]\fP, \fC [virtual]\fP"

.PP
A tag name of children\&. < TAG>
.br
      <CHILD_TAG />
.br
      <CHILD_TAG />
.br
 </TAG> 
.PP
Implements \fBIEntityGroup\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
