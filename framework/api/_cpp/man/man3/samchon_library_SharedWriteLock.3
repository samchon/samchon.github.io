.TH "SharedWriteLock" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SharedWriteLock \- Shared lock from a \fBRWMutex\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SharedWriteLock\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSharedWriteLock\fP (\fBRWMutex\fP &, bool=true)"
.br
.RI "\fIConstruct from \fBRWMutex\fP\&. \fP"
.ti -1c
.RI "\fBSharedWriteLock\fP (const \fBSharedWriteLock\fP &)"
.br
.RI "\fICopy Constructor\&. \fP"
.ti -1c
.RI "\fBSharedWriteLock\fP (\fBSharedWriteLock\fP &&)"
.br
.RI "\fIMove Constructor\&. \fP"
.ti -1c
.RI "\fB~SharedWriteLock\fP ()"
.br
.RI "\fIDefault Destructor\&. \fP"
.ti -1c
.RI "void \fBlock\fP ()"
.br
.RI "\fILock on writing\&. \fP"
.ti -1c
.RI "void \fBunlock\fP ()"
.br
.RI "\fIUnlock on writing\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBRWMutex\fP * \fBsemaphore\fP"
.br
.RI "\fIManaged \fBRWMutex\fP\&. \fP"
.ti -1c
.RI "std::atomic< size_t > * \fBreference\fP"
.br
.RI "\fIReferencing count sharing same \fBRWMutex\fP\&. \fP"
.ti -1c
.RI "std::atomic< bool > * \fBisLocked\fP"
.br
.RI "\fIWhether the mutex was locked by \fBSharedWriteLock\fP\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Shared lock from a \fBRWMutex\fP\&. 

A \fBSharedWriteLock\fP is an object manages a \fBRWMutex\fP with shared ownership in both states\&. 
.PP
.PD 0
.IP "\(bu" 2
locked 
.IP "\(bu" 2
unlocked
.PP
.PP
On default construction, the object acquires a \fBRWMutex\fP object, for whose locking and unlocking operations becomes responsible\&. When copy constructions, responsibilities of locking and unlocking \fBRWMutex\fP are shared with copied with those \fBSharedWriteLock\fP objects\&. 
.PP
The class shared_lock is a general-purpose shared mutex ownership wrapper allowing deferred locking, timed locking and transfer of lock ownership\&. Locking a shared_lock locks the associated shared mutex in shared mode (to lock it in exclusive mode, std::unique_lock can be used) 
.PP
This class guarantees a unlocked status on destruction of all shared objects (even if not called explicitly)\&. Therefore it is especially useful as an object with automatic duration, as it guarantees the \fBRWMutex\fP object is properly unlocked in case an exception is thrown\&. 
.PP
Referenced comments of std::unique_lock 
.PP
.PD 0
.IP "\(bu" 2
http://www.cplusplus.com/reference/mutex/unique_lock/
.PP
 
.PP
\fBNote:\fP
.RS 4
.RE
.PP
Though, that the \fBSharedWriteLock\fP object does not manage the lifetime of the \fBRWMutex\fP object in any way: the duration of the \fBRWMutex\fP object shall extend at least until the destruction of the \fBSharedWriteLock\fP that manages it\&. 
.PP
\fBSee also:\fP
.RS 4
\fBlibrary::UniqueAcquire\fP 
.PP
\fBsamchon::library\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBSharedWriteLock\fP (\fBRWMutex\fP & semaphore, bool doLock = \fCtrue\fP)"

.PP
Construct from \fBRWMutex\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsemaphore\fP \fBRWMutex\fP to manage 
.br
\fIdoLock\fP Whether to lock directly or not 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void lock ()"

.PP
Lock on writing\&. Changes writing flag to true\&. 
.PP
If another write_lock or read_lock is on a progress, wait until them to be unlocked\&. 
.PP
.PD 0
.IP "\(bu" 2
Writing can be done by only a section at once\&. 
.IP "\(bu" 2
Writing can't be done when reading\&.
.PP
\fBNote:\fP
.RS 4
You've to call write_unlock when writing work was terminated\&. 
.RE
.PP

.SS "void unlock ()"

.PP
Unlock on writing\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
