.TH "XML" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
XML \- \fBXML\fP is a class representing xml object\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <XML\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBXML\fP ()"
.br
.RI "\fIDefault Constructor\&. \fP"
.ti -1c
.RI "\fBXML\fP (const \fBXML\fP &)"
.br
.RI "\fICopy Constructor\&. \fP"
.ti -1c
.RI "\fBXML\fP (\fBXML\fP &&)"
.br
.RI "\fIMove Constructor\&. \fP"
.ti -1c
.RI "\fBXML\fP (\fBWeakString\fP)"
.br
.RI "\fIConstructor by string\&. \fP"
.ti -1c
.RI "void \fBpush_back\fP (const \fBWeakString\fP &)"
.br
.RI "\fIAdd children xml objects by string representing them\&. \fP"
.ti -1c
.RI "void \fBpush_back\fP (const std::shared_ptr< \fBXML\fP >)"
.br
.RI "\fIAdd children xml\&. \fP"
.ti -1c
.RI "void \fBaddAllProperty\fP (const std::shared_ptr< \fBXML\fP >)"
.br
.RI "\fIAdd all properties from another \fBXML\fP\&. \fP"
.ti -1c
.RI "void \fBsetTag\fP (const std::string &)"
.br
.RI "\fISet tag (identifier) of the \fBXML\fP\&. \fP"
.ti -1c
.RI "template<typename _Ty > void \fBsetValue\fP (const _Ty &val)"
.br
.RI "\fISet value of the \fBXML\fP\&. \fP"
.ti -1c
.RI "template<typename _Ty > void \fBsetProperty\fP (const std::string &name, const _Ty &val)"
.br
.RI "\fISet a property with its key\&. \fP"
.ti -1c
.RI "void \fBeraseProperty\fP (const std::string &)"
.br
.RI "\fIErase a property by its key\&. \fP"
.ti -1c
.RI "void \fBclearProperties\fP ()"
.br
.RI "\fIRemove all properties in the \fBXML\fP\&. \fP"
.ti -1c
.RI "auto \fBgetTag\fP () const  \-> std::string"
.br
.RI "\fIGet key; identifer of the \fBXML\fP\&. \fP"
.ti -1c
.RI "template<class _Ty  = std::string> auto \fBgetValue\fP () const  \-> _Ty"
.br
.RI "\fIGet value of the \fBXML\fP\&. \fP"
.ti -1c
.RI "template<class _Ty  = std::string> auto \fBgetProperty\fP (const std::string &key) const  \-> _Ty"
.br
.RI "\fIGet property\&. \fP"
.ti -1c
.RI "auto \fBhasProperty\fP (const std::string &) const  \-> bool"
.br
.RI "\fITest wheter a property exists or not\&. \fP"
.ti -1c
.RI "auto \fBgetPropertyMap\fP () const  \-> const \fBMap\fP< std::string, std::string > &"
.br
.RI "\fIGet propertyMap\&. \fP"
.ti -1c
.RI "auto \fBtoString\fP (size_t level=0) const  \-> std::string"
.br
.RI "\fIGet the string content\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBXML\fP (\fBXML\fP *, \fBWeakString\fP &)"
.br
.RI "\fIProtected Constructor by string for child\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::string \fBtag\fP"
.br
.RI "\fITag name\&. \fP"
.ti -1c
.RI "std::string \fBvalue\fP"
.br
.RI "\fIValue of the \fBXML\fP\&. \fP"
.ti -1c
.RI "\fBMap\fP< std::string, std::string > \fBpropertyMap\fP"
.br
.RI "\fIProperties belongs to the \fBXML\fP\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
\fBXML\fP is a class representing xml object\&. 

The \fBXML\fP class provides methods and properties for working with \fBXML\fP objects\&. 
.PP
The \fBXML\fP class (along with the XMLList and Namespace) implements the powerful XML-handling standard defined in ECMAScript for \fBXML\fP (E4X) specification\&. 
.PP
\fBXML\fP class has a recursive, hierarchical relationship\&. 
.PP
All \fBXML\fP objects're managed by shared_ptr\&. 
.PP
.PD 0
.IP "\(bu" 2
\fBXML\fP contains XMLList from dictionary of shared pointer<XMLList> 
.IP "\(bu" 2
XMLList contains \fBXML\fP from vector of shared pointer<XML> 
.IP "\(bu" 2
Even if user creates an \fBXML\fP object directly, it's the basic principle to use shared pointer
.PP
 
.PP
\fBNote:\fP
.RS 4
.RE
.PP
Parsing comment is not supported yet\&. 
.PP
It's not recommeded to creating an \fBXML\fP object which is not being managed by shared pointer\&. 
.PP
\fBWarning:\fP
.RS 4
.RE
.PP
Do not abuse values for expressing member variables\&. 
.PP
Standard Usage Non-standard usage abusing value  <memberList>
.br
      <member id='jhnam88' name='Jeongho+Nam' birthdate='1988-03-11' />
.br
      <member id='master' name='Administartor' birthdate='2011-07-28' />
.br
 </memberList>  <member>
.br
      <id>jhnam88</id>
.br
      <name>Jeongho+Nam</name>
.br
      <birthdate>1988-03-11</birthdate>
.br
 </member>   
.PP
.PP
.nf
1 #include <iostream>
2 #include <vector>
3 #include <string>
4 
5 #include <samchon/library/XML\&.hpp>
6 
7 #ifdef _WIN64
8 #   ifdef _DEBUG
9 #       pragma comment(lib, "x64/Debug/SamchonFramework\&.lib")
10 #   else
11 #       pragma comment(lib, "x64/Release/SamchonFramework\&.lib")
12 #   endif
13 #else
14 #   ifdef _DEBUG
15 #       pragma comment(lib, "Debug/SamchonFramework\&.lib")
16 #   else
17 #       pragma comment(lib, "Release/SamchonFramework\&.lib")
18 #   endif
19 #endif
20 
21 using namespace std;
22 using namespace samchon::library;
23 
24 struct Member
25 {
26     string id;
27     string name;
28     int age;
29     int grade;
30 
31     auto toXML() const -> shared_ptr<XML>
32     {
33         shared_ptr<XML> xml(new XML());
34         xml->setTag("member");
35         xml->setProperty("id", id);
36         xml->setProperty("name", name);
37         xml->setProperty("age", age);
38         xml->setProperty("grade", grade);
39 
40         return xml;
41     };
42 };
43 
44 void main()
45 {
46     //DECLARE An XML WITH MEMBER_ARRAY TAG
47     shared_ptr<XML> xml(new XML());
48     xml->setTag("memberArray");
49     
50     //ADD MEMBER(S) TO XML
51     vector<struct Member> memberArray =
52     {
53         {"samchon", "Jeongho Nam", 27, 1},
54         {"gkyu", "Kwangkyu Ko", 25, 1},
55         {"guest", "John Doe", 99, 4}
56     };
57     for(size_t i = 0; i < memberArray\&.size(); i++)
58         xml->push_back( memberArray[i]\&.toXML() );
59 
60     //ADD FILE_LIST BY STRING DIRECTLY
61     xml->push_back
62     (
63         string("") +
64         "<fileList>\n" + 
65             "<file extension='pdf' name='API' />" +
66             "<file extension='pdf' name='Guidance+For+Developer'>Damaged</file>" + 
67             "<file extension='docx' name='Resume' />" +
68             "<file extension='jpg' name='My+House' />" +
69             "<file extension='xlsx' name='Grades' />" +
70         "</fileList>"
71     );
72 
73     cout << "-----------------------------------------------------------------" << endl;
74     cout << " Get Properties And Values" << endl;
75     cout << "-----------------------------------------------------------------" << endl;
76     cout << "Age of 2nd member: " << xml->get("member")->at(1)->getProperty<int>("age") << endl;
77     cout << "Age of 1st member: " << xml->get("member")->at(0)->getProperty("id") << endl << endl;
78 
79     cout << "File name and extension of 5th: "
80         << xml->get("fileList")->at(0)->get("file")->at(4)->getProperty("name") << "\&."
81         << xml->get("fileList")->at(0)->get("file")->at(4)->getProperty("extension") << endl;
82     cout << "Value of 2nd file: " << xml->get("fileList")->at(0)->get("file")->at(1)->getValue() << endl << endl;
83 
84     cout << "-----------------------------------------------------------------" << endl;
85     cout << " XML to String: " << endl;
86     cout << "-----------------------------------------------------------------" << endl;
87     cout << xml->toString() << endl;
88 
89     system("pause");
90 }
.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBsamchon::library\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBXML\fP ()"

.PP
Default Constructor\&. 
.PP
\fBWarning:\fP
.RS 4
Declare \fBXML\fP to managed by shared pointer 
.RE
.PP

.SS "\fBXML\fP (const \fBXML\fP & xml)"

.PP
Copy Constructor\&. Not copying (shared) pointer of children xml objects, but copying the real objects of children xml 
.SS "\fBXML\fP (\fBWeakString\fP wStr)"

.PP
Constructor by string\&. Parses a string so that constructs an \fBXML\fP object
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP A string representing xml object 
.RE
.PP
\fBWarning:\fP
.RS 4
Declare \fBXML\fP to managed by shared pointer 
.RE
.PP

.SS "\fBXML\fP (\fBXML\fP * parent, \fBWeakString\fP & str)\fC [private]\fP"

.PP
Protected Constructor by string for child\&. Parses a string so that creates an \fBXML\fP object It is called for creating children \fBXML\fP objects from parent \fBXML\fP object\&.
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent object who will contains this \fBXML\fP object 
.br
\fIstr\fP A string to be parsed 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void push_back (const \fBWeakString\fP & str)"

.PP
Add children xml objects by string representing them\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP A string representing xml objects whould be belonged to this \fBXML\fP 
.RE
.PP

.SS "void push_back (const std::shared_ptr< \fBXML\fP >)"

.PP
Add children xml\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxml\fP An xml object you want to add 
.RE
.PP

.SS "void addAllProperty (const std::shared_ptr< \fBXML\fP >)"

.PP
Add all properties from another \fBXML\fP\&. 
.PP
\fBCopies all properties from target to here\&.\fP
.RS 4

.RE
.PP
\fBWarning:\fP
.RS 4
Not a category of assign, but an insert\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIxml\fP Target xml object to deliver its properties 
.RE
.PP

.SS "void setTag (const std::string & tag)"

.PP
Set tag (identifier) of the \fBXML\fP\&. 
.PP
\fBSee also:\fP
.RS 4
\fBXML::tag\fP 
.RE
.PP

.SS "void setValue (const _Ty & val)\fC [inline]\fP"

.PP
Set value of the \fBXML\fP\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fI_Ty\fP Type of the value 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIval\fP The value to set
.RE
.PP
\fBWarning:\fP
.RS 4
Do not abuse values for expressing member variables Standard Usage Non-standard usage abusing value  <memberList>
.br
     <member id='jhnam88' name='Jeongho+Nam' birthdate='1988-03-11' />
.br
     <member id='master' name='Administartor' birthdate='2011-07-28' />
.br
 </memberList>  <member>
.br
 <id>jhnam88</id>
.br
 <name>Jeongho+Nam</name>
.br
 <birthdate>1988-03-11</birthdate>
.br
 </member>   
.RE
.PP

.SS "void eraseProperty (const std::string & tag)"

.PP
Erase a property by its key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The key of the property to erase 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIexception\fP Unable to find the element 
.RE
.PP

.SS "auto getTag () const \-> std::string"

.PP
Get key; identifer of the \fBXML\fP\&. 
.PP
\fBReturns:\fP
.RS 4
tag, identifer of the \fBXML\fP 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBXML::tag\fP 
.RE
.PP

.SS "auto toString (size_t level = \fC0\fP) const \-> std::string"

.PP
Get the string content\&. Returns a string representation of the \fBXML\fP and its all children
.PP
\fBReturns:\fP
.RS 4
A string representing the xml 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "std::string tag\fC [private]\fP"

.PP
Tag name\&. 
.PD 0

.IP "\(bu" 2
<\fBtag\fP label='property' />: tag => "tag" 
.IP "\(bu" 2
<\fBprice\fP high='1500' low='1300' open='1450' close='1320' />: tag => "price" 
.PP

.SS "std::string value\fC [private]\fP"

.PP
Value of the \fBXML\fP\&. 
.PD 0

.IP "\(bu" 2
<parameter name='age' type='int'>\fB26\fP</parameter>: value => 26 
.IP "\(bu" 2
<price high='1500' low='1300' open='1450' close='1320' />: tag => null 
.PP

.SS "\fBMap\fP<std::string, std::string> propertyMap\fC [private]\fP"

.PP
Properties belongs to the \fBXML\fP\&. A Dictionary of properties accessing each property by its key\&. 
.PD 0

.IP "\(bu" 2
<price \fBhigh='1500' low='1300' open='1450' close='1320'\fP />: propertyMap => {{"high": 1500}, {"low": 1300}, {"open": 1450}, {"close", 1320}} 
.IP "\(bu" 2
<member \fBid='jhnam88' name='Jeongho+Nam' comment='Hello\&.+My+name+is+Jeongho+Nam'\fP >: propertyMap => {{"id", "jhnam88"}, {"name", "Jeongho Nam"}, {"comment", "Hello\&. My name is Jeongho Nam"}} 
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
