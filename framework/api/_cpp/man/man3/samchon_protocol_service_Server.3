.TH "Server" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Server \- A server for (cloud) service\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Server\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBServer\fP ()"
.br
.RI "\fIDefault Constructor\&. \fP"
.ti -1c
.RI "auto \fBsize\fP () const  \-> size_t"
.br
.RI "\fISize of User(s)\&. \fP"
.ti -1c
.RI "auto \fBbegin\fP () const  \-> const_iterator"
.br
.RI "\fIA const iterator of begin\&. \fP"
.ti -1c
.RI "auto \fBend\fP () const  \-> const_iterator"
.br
.RI "\fIA const iterator of end\&. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual auto \fBNAME\fP () const  \-> std::string=0"
.br
.RI "\fIA name can be an identifier of a cloud server\&. \fP"
.ti -1c
.RI "virtual auto \fBcreateUser\fP () \-> \fBUser\fP *=0"
.br
.RI "\fIFactory method of \fBUser\fP\&. \fP"
.ti -1c
.RI "virtual void \fBaddClient\fP (Socket *) override"
.br
.RI "\fIHandling connection of a client\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBlibrary::SQLi\fP * \fBsqli\fP"
.br
.RI "\fISQLi for archiving log\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBDictionary\fP< std::shared_ptr< \fBIPUserPair\fP > > \fBipMap\fP"
.br
.RI "\fIDictionary of issuer of session ID of each ip\&. \fP"
.ti -1c
.RI "size_t \fBsequence\fP"
.br
.RI "\fISequence for issuing session ID\&. \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A server for (cloud) service\&. 

A server class representing the real physical server of a cloud\&. 
.PP
The \fBServer\fP is very good for development of a cloud server\&. You can use web or flex as (physical) client\&. The usage is very simple\&. In the class \fBServer\fP, what you need to do are overriding getter of port number and factory method creating an \fBUser\fP\&. 
.PP
 
.PP
\fBNote:\fP
.RS 4
Override those methods\&. 
.PD 0

.IP "\(bu" 2
\fBServer::NAME()\fP 
.IP "\(bu" 2
\fBServer::PORT()\fP 
.IP "\(bu" 2
\fBServer::createUser()\fP
.PP
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsamchon::protocol\fP 
.PP
\fBsamchon::protocol::service\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "auto begin () const \-> const_iterator"

.PP
A const iterator of begin\&. 
.PP
\fBNote:\fP
.RS 4
Be careful about concurrency 
.RE
.PP

.SS "auto end () const \-> const_iterator"

.PP
A const iterator of end\&. 
.PP
\fBNote:\fP
.RS 4
Be careful about concurrency 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
