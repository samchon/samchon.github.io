.TH "samchon::library" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
samchon::library \- Package of libraries\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBBase64\fP"
.br
.RI "\fIUtility class for base64 format's en-decoding\&. \fP"
.ti -1c
.RI "class \fBCaseGenerator\fP"
.br
.RI "\fICase generator\&. \fP"
.ti -1c
.RI "class \fBCharset\fP"
.br
.RI "\fIA utility class supporting conversion between multiple character-sets\&. \fP"
.ti -1c
.RI "class \fBCombinedPermutationGenerator\fP"
.br
.RI "\fIA combined-permutation case generator\&. \fP"
.ti -1c
.RI "class \fBCriticalAllocator\fP"
.br
.RI "\fIAn allocator ensuring concurrency\&. \fP"
.ti -1c
.RI "class \fBDate\fP"
.br
.RI "\fI\fBDate\fP (year, month, day in month) \fP"
.ti -1c
.RI "class \fBDatetime\fP"
.br
.RI "\fI\fBDate\fP and time\&. \fP"
.ti -1c
.RI "class \fBErrorEvent\fP"
.br
.RI "\fI\fBEvent\fP representing an error\&. \fP"
.ti -1c
.RI "class \fBEvent\fP"
.br
.RI "\fIRepresent an event running on background\&. \fP"
.ti -1c
.RI "class \fBEventDispatcher\fP"
.br
.RI "\fIAbstract class for dispatching \fBEvent\fP\&. \fP"
.ti -1c
.RI "class \fBFactorialGenerator\fP"
.br
.RI "\fIFactorical case generator\&. \fP"
.ti -1c
.RI "class \fBFTByteFile\fP"
.br
.RI "\fIA binary file\&. \fP"
.ti -1c
.RI "class \fBFTFactory\fP"
.br
.RI "\fIA Factory and manager for file-tree\&. \fP"
.ti -1c
.RI "class \fBFTFile\fP"
.br
.RI "\fIA file\&. \fP"
.ti -1c
.RI "class \fBFTFolder\fP"
.br
.RI "\fIA folder\&. \fP"
.ti -1c
.RI "class \fBFTInstance\fP"
.br
.RI "\fIAn interface of file-tree\&. \fP"
.ti -1c
.RI "class \fBFTTextFile\fP"
.br
.RI "\fIA text file\&. \fP"
.ti -1c
.RI "struct \fBGAParameters\fP"
.br
.RI "\fIA structure containing parameters of genetic algorithm\&. \fP"
.ti -1c
.RI "class \fBGAPopulation\fP"
.br
.RI "\fIA population of a generation in G\&.A\&. \fP"
.ti -1c
.RI "class \fBGeneticAlgorithm\fP"
.br
.RI "\fIA genetic algorithm class\&. \fP"
.ti -1c
.RI "class \fBHTTPLoader\fP"
.br
.RI "\fIA http, web-page loader\&. \fP"
.ti -1c
.RI "class \fBIOperator\fP"
.br
.RI "\fIInterface for comparision operator\&. \fP"
.ti -1c
.RI "class \fBMath\fP"
.br
.RI "\fIUtility of \fBMath\fP\&. \fP"
.ti -1c
.RI "class \fBMySQLi\fP"
.br
.RI "\fIA SQL interface for My-SQL\&. \fP"
.ti -1c
.RI "class \fBPermutationGenerator\fP"
.br
.RI "\fIA permutation case generator\&. \fP"
.ti -1c
.RI "class \fBProgressEvent\fP"
.br
.RI "\fI\fBEvent\fP representing a progress\&. \fP"
.ti -1c
.RI "class \fBRWMutex\fP"
.br
.RI "\fIrw_mutex \fP"
.ti -1c
.RI "class \fBSemaphore\fP"
.br
.RI "\fIA semaphore\&. \fP"
.ti -1c
.RI "class \fBSharedAcquire\fP"
.br
.RI "\fIShared acquire from a \fBSemaphore\fP\&. \fP"
.ti -1c
.RI "class \fBSharedReadLock\fP"
.br
.RI "\fIShared lock from a \fBRWMutex\fP\&. \fP"
.ti -1c
.RI "class \fBSharedWriteLock\fP"
.br
.RI "\fIShared lock from a \fBRWMutex\fP\&. \fP"
.ti -1c
.RI "class \fBSQLi\fP"
.br
.RI "\fIA SQL interface; DBMS connector\&. \fP"
.ti -1c
.RI "class \fBSQLStatement\fP"
.br
.RI "\fIA sql statement\&. \fP"
.ti -1c
.RI "class \fBStringUtil\fP"
.br
.RI "\fIUtility class for string\&. \fP"
.ti -1c
.RI "class \fBTSQLi\fP"
.br
.RI "\fIA SQL interface for T-SQL\&. \fP"
.ti -1c
.RI "class \fBTSQLStatement\fP"
.br
.RI "\fIA t-sql statement\&. \fP"
.ti -1c
.RI "class \fBUniqueAcquire\fP"
.br
.RI "\fIUnique acquire from a \fBSemaphore\fP\&. \fP"
.ti -1c
.RI "class \fBUniqueReadLock\fP"
.br
.RI "\fIUnique lock for reading\&. \fP"
.ti -1c
.RI "class \fBUniqueWriteLock\fP"
.br
.RI "\fIUnique lock for writing\&. \fP"
.ti -1c
.RI "class \fBURLVariables\fP"
.br
.RI "\fI\fBURLVariables\fP class is for representing variables of HTTP\&. \fP"
.ti -1c
.RI "class \fBXML\fP"
.br
.RI "\fI\fBXML\fP is a class representing xml object\&. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "template<typename _Ty , typename _Pr  = std::less<std::string>> using \fBCriticalDictionary\fP = \fBCriticalMap\fP< std::string, _Ty, _Pr >"
.br
.RI "\fIA Dictionary ensures concurrency\&. \fP"
.ti -1c
.RI "template<typename _Ty > using \fBCriticalList\fP = std::list< _Ty, \fBCriticalAllocator\fP< _Ty >>"
.br
.RI "\fIA std::list ensures concurrency\&. \fP"
.ti -1c
.RI "template<typename _Kty , typename _Ty , typename _Pr  = std::less<_Kty>> using \fBCriticalMap\fP = \fBMap\fP< _Kty, _Ty, _Pr, \fBCriticalAllocator\fP< std::pair< const std::string, _Ty >>>"
.br
.RI "\fIA \fBMap\fP ensures concurrency\&. \fP"
.ti -1c
.RI "template<typename _Ty , typename _Pr  = std::less<_Ty>> using \fBCriticalSet\fP = Set< _Ty, _Pr, \fBCriticalAllocator\fP< _Ty >>"
.br
.RI "\fIA Set ensures concurrency\&. \fP"
.ti -1c
.RI "template<typename _Ty > using \fBCriticalVector\fP = std::vector< _Ty, \fBCriticalAllocator\fP< _Ty >>"
.br
.RI "\fIA std::vector ensures concurrency\&. \fP"
.ti -1c
.RI "typedef std::vector< std::shared_ptr< \fBXML\fP > > \fBXMLList\fP"
.br
.RI "\fIA list of \fBXML\fP, tags are same\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Package of libraries\&. 

The library package supports some classes for package of protocol and nam-tree\&. 
.PP
Furthermore, library package provides some utility libraries, which are not being supported by standard library (STL)\&. Those can be helpful for users and those are like STL, independent from operating systems, so that can compile in any operating system\&. 
.PP
The library package can be divided into some sectinos\&. 
.PP
.PD 0
.IP "\(bu" 2
.SS "Common libraries\&. "
.PP
.PP
Common containers with utility methods\&. 
.PP
.PP
 
.PP

.IP "\(bu" 2
.SS "Mathmatical libaries\&. "
.PP
.PP
Utilty classes for mathmatical methods, or libraries of case generator and genetic algorithm\&. In those mathmatical part, lots of examples are supported\&. 
.PP
.PP
 
.PP

.IP "\(bu" 2
.SS "Critical section libraries\&. "
.PP
.PP
Classes handling critical section, like \fBRWMutex\fP and \fBSemaphore\fP which are not supported in STL yet\&. 
.PP
.PP
.PP
Of course, rw_mutex is already defined in linux C, semaphore is already defined in MFC\&. But they are dependent on their own operating system, so that cannot compile in multiple operating systems\&. It's the reason why Samchon Framework provides those classes\&. 
.PP
.PP
.PP
Furthermore, unique and shared lock of those critical section classes, which are managing locking and unlocking, and critical allocator are provided\&. 
.PP
.PP
 
.PP

.IP "\(bu" 2
.SS "Data I/O libraries\&. "
.PP
.PP
Provides libraries about data I/O\&.
.PP
.PP
\fBSQLi\fP and \fBSQLStatement\fP are the ODBC drivier designed to follow principles of OOP by adapter pattern\&. \fBXML\fP class is designed to follow composite relationship\&. 
.PP
.PP
 
.PP

.IP "\(bu" 2
.SS "\fBEvent\fP libraries\&. "
.PP
.PP
Libraries representing events and dispatching those events, which are running on background, with own exclusive thread\&. 
.PP
.PP
.PP
But there's something to notice\&. Since C++11, calling member method of a class by new thread passing by static method and void pointer is recommended to avoid\&. By guidance of the STL, using std::thread and std::bind will be better\&. As that reason, \fBEvent\fP and \fBEventDispatcher\fP can be depreciated in next generation of Samchon Framework\&. 
.PP
.PP
 
.PP

.IP "\(bu" 2
.SS "File-tree libraries\&. "
.PP
.PP
A module for expressing folder and file instances\&. The objects in file-tree module are realized by \fBprotocol::Entity\fP\&.
.PP
.PP
They have recursive and hierarchical relationship and created by Factory class (\fBFTFactory\fP, factory pattern)\&. Those objects can be archived in and loaded from Database\&. Using the pre-defined methods interaction with Databse, you can not only express real file and folder instances but also realize virtual file system\&. 
.PP
.PP
.PP
Classes in the Module of file-tree are all abstract, but package nam-tree can be an example inheriting and having real model from those abstract classes\&. 
.PP
.PP
 
.PP

.PP
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Typedef Documentation"
.PP 
.SS "using \fBCriticalDictionary\fP =  \fBCriticalMap\fP<std::string, _Ty, _Pr>"

.PP
A Dictionary ensures concurrency\&. 
.PP
\fBSee also:\fP
.RS 4
\fBlibrary::CriticalAllocator\fP 
.PP
\fBsamchon::library\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SS "using \fBCriticalList\fP =  std::list<_Ty, \fBCriticalAllocator\fP<_Ty>>"

.PP
A std::list ensures concurrency\&. 
.PP
\fBSee also:\fP
.RS 4
\fBlibrary::CriticalAllocator\fP 
.PP
\fBsamchon::library\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SS "using \fBCriticalMap\fP =  \fBMap\fP<_Kty, _Ty, _Pr, \fBCriticalAllocator\fP<std::pair<const std::string, _Ty>>>"

.PP
A \fBMap\fP ensures concurrency\&. 
.PP
\fBSee also:\fP
.RS 4
\fBlibrary::CriticalAllocator\fP 
.PP
\fBsamchon::library\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SS "using \fBCriticalSet\fP =  Set<_Ty, _Pr, \fBCriticalAllocator\fP<_Ty>>"

.PP
A Set ensures concurrency\&. 
.PP
\fBSee also:\fP
.RS 4
\fBlibrary::CriticalAllocator\fP 
.PP
\fBsamchon::library\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SS "using \fBCriticalVector\fP =  std::vector<_Ty, \fBCriticalAllocator\fP<_Ty>>"

.PP
A std::vector ensures concurrency\&. 
.PP
\fBSee also:\fP
.RS 4
\fBlibrary::CriticalAllocator\fP 
.PP
\fBsamchon::library\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SS "typedef std::vector<std::shared_ptr<\fBXML\fP> > \fBXMLList\fP"

.PP
A list of \fBXML\fP, tags are same\&. 
.PP
\fBSee also:\fP
.RS 4
\fBsamchon::library\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
