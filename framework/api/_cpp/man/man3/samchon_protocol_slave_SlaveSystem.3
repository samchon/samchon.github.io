.TH "SlaveSystem" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SlaveSystem \- A slave system\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SlaveSystem\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSlaveSystem\fP ()"
.br
.RI "\fIDefault Constructor\&. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fB_replyData\fP (std::shared_ptr< \fBInvoke\fP >) override"
.br
.RI "\fIPre-processor for reporting elapsed time\&. \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A slave system\&. 

\fBSlaveSystem\fP, literally, means a slave system belongs to a maste system\&. 
.PP
The \fBSlaveSystem\fP class is used in opposite side system of \fBmaster::DistributedSystem\fP and \fBmaster::ParallelSystem\fP and reports elapsed time of each commmand (by \fBInvoke\fP message) for estimation of its performance\&. 
.PP
\fB[Inherited]\fP
.RS 4

.RE
.PP
\fBExternalSystem\fP is a boundary class interacting with an external system by network communication\&. Also, \fBExternalSystem\fP is an abstract class that a network role, which one is server and which one is client, is not determined yet\&. 
.PP
The \fBExternalSystem\fP has ExternalSystemRole(s) groupped methods, handling \fBInvoke\fP message interacting with the external system, by subject or unit of a moudle\&. The \fBExternalSystemRole\fP is categorized in a 'control'\&. 
.PP
 
.PP
\fBNote:\fP
.RS 4
.RE
.PP
The \fBExternalSystem\fP class takes a role of interaction with external system in network level\&. However, within a framework of Samchon Framework, a boundary class like the \fBExternalSystem\fP is not such important\&. You can find some evidence in a relationship between \fBExternalSystemArray\fP, \fBExternalSystem\fP and \fBExternalSystemRole\fP\&. 
.PP
Of course, the \fBExternalSystemRole\fP is belonged to an \fBExternalSystem\fP\&. However, if you access an \fBExternalSystemRole\fP from an \fBExternalSystemArray\fP directly, not passing by a belonged \fBExternalSystem\fP, and send an \fBInvoke\fP message even you're not knowing which \fBExternalSystem\fP is related in, it's called 'Proxy pattern'\&.
.PP
Like the explanation of 'Proxy pattern', you can utilize an \fBExternalSystemRole\fP as a proxy of an \fBExternalSystem\fP\&. With the pattern, you can only concentrate on \fBExternalSystemRole\fP itself, what to do with \fBInvoke\fP message, irrespective of the \fBExternalSystemRole\fP is belonged to which \fBExternalSystem\fP\&. 
.PP
\fBSee also:\fP
.RS 4
\fBsamchon::protocol\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual void _replyData (std::shared_ptr< \fBInvoke\fP >)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Pre-processor for reporting elapsed time\&. 
.PP
\fB[Inherited]\fP
.RS 4

.RE
.PP
You can realize a pre-processing about the replied \fBInvoke\fP message by overriding the \fBIClient::_replyData()\fP\&. 
.PP
Archiving a history log, filtering and truncating, let handling the message with a new thread, calculating performance by estimating elapsed time about the \fBInvoke\fP message, and so on\&. Anything you can define pre-processing works before \fBIProtocol::replyData()\fP\&. 
.PD 0

.IP "\(bu" 2
Archive history log -> cloud service 
.IP "\(bu" 2
Estimating performance -> distributed and parallel processing system
.PP
\fBParameters:\fP
.RS 4
\fIinvoke\fP An invoke message to be pre-processed and shifted to \fBIProtocol::replyData()\fP\&. 
.RE
.PP

.PP
Reimplemented from \fBIClient\fP\&.
.PP
Reimplemented in \fBParallelSystem\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
