.TH "ISQLEntity" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ISQLEntity \- An interface supporting DB-I/O\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ISQLEntity\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBISQLEntity\fP ()"
.br
.RI "\fIDefault Constructor\&. \fP"
.ti -1c
.RI "virtual void \fBload\fP (std::shared_ptr< \fBlibrary::SQLStatement\fP > stmt)"
.br
.RI "\fILoad data of entity from DB\&. \fP"
.ti -1c
.RI "virtual void \fBarchive\fP (std::shared_ptr< \fBlibrary::SQLStatement\fP > stmt)"
.br
.RI "\fIArchive data of entity to DB\&. \fP"
.ti -1c
.RI "virtual auto \fBtoSQL\fP () const  \-> std::string"
.br
.RI "\fIGet a sql-statement string represents the entity\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
An interface supporting DB-I/O\&. 

\fBISQLEntity\fP is an interface for interacting with Database\&. By implementing \fBload()\fP and \fBarchive()\fP methods, you can make an entity to interact with a Database\&.
.PP
If an entity implementing the \fBISQLEntity\fP is a type of \fBEntityGroup\fP and its children also implemented the \fBISQLEntity\fP, you can realize construction and archiving chain by each child entity to do their I/O procedures by their own\&. 
.PP
 
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void load (std::shared_ptr< \fBlibrary::SQLStatement\fP > stmt)\fC [virtual]\fP"

.PP
Load data of entity from DB\&. Loads and constructs data of the entity from a SQLStatement\&. 
.PP
If an entity implementing the \fBISQLEntity\fP is a type of \fBEntityGroup\fP and its children also implemented the \fBISQLEntity\fP, you can realize construction chain by each child entity fetches data of their own by themselves\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP SQLStatement storing data of the \fBEntity\fP 
.RE
.PP

.SS "void archive (std::shared_ptr< \fBlibrary::SQLStatement\fP > stmt)\fC [virtual]\fP"

.PP
Archive data of entity to DB\&. Archives data of the entity to Database by a SQLStatement\&. 
.PP
If an entity implementing the \fBISQLEntity\fP is a type of \fBEntityGroup\fP and its children also implemented the \fBISQLEntity\fP, you can realize archiving chain by each child entity archives data of their own by themselves\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP SQLStatement would store data of the \fBEntity\fP 
.RE
.PP

.SS "auto toSQL () const \-> std::string\fC [virtual]\fP"

.PP
Get a sql-statement string represents the entity\&. ISQLEntity::toSL() is an abstract method returns a sql-statement string\&. 
.PP
However, if there's some parameter in a sql-statement string from the toString() method, it is categorized in dynamic sql\&. In that case, do not access table directly but indirect from sql-procedure\&. Indirecting procedure is good for performance and security\&. 
.PP
\fBReturns:\fP
.RS 4
SQL storing record(s) to temporary table of a Procedure 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
