.TH "IPUserPair" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
IPUserPair \- Relationship between IP address and \fBUser\fP for issuing session\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <IPUserPair\&.hpp>\fP
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBIPUserPair\fP (\fBServer\fP *\fBserver\fP, const std::string &)"
.br
.RI "\fIConstruct from \fBServer\fP and IP address\&. \fP"
.ti -1c
.RI "auto \fBgetSessionID\fP (Socket *, size_t) \-> std::string"
.br
.RI "\fIGet a session ID\&. \fP"
.ti -1c
.RI "auto \fBissueSessionID\fP (size_t) const  \-> std::string"
.br
.RI "\fIIssue a session ID\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBServer\fP * \fBserver\fP"
.br
.RI "\fIThe \fBServer\fP containing IP addresses and User(s) \fP"
.ti -1c
.RI "std::string \fBip\fP"
.br
.RI "\fIAn IP address\&. \fP"
.ti -1c
.RI "std::set< const \fBUser\fP * > \fBuserSet\fP"
.br
.RI "\fIUser(s) belongs to the IP address\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Relationship between IP address and \fBUser\fP for issuing session\&. 

\fBIPUserPair\fP is a class representing 1:N relationship between IP address and \fBUser\fP\&. 
.PP
The key role of \fBIPUserPair\fP is to issuing session ID, that is published to User(s), within a critical section of an IP address\&. 
.PP
 
.PP
\fBNote:\fP
.RS 4
.RE
.PP
Samchon Framework is for Cloud \fBServer\fP basically, so I've adopted Session ID to discriminate unique \fBUser\fP to follow standard\&. But I think there can be another good strategies something like a using MAC address instead of publishing Session-ID to discriminate uniqueness of \fBUser\fP\&. It's okay to adapt those strategies and rebuild my framework's source to be suitable for those\&. 
.PP
\fBWarning:\fP
.RS 4
.RE
.PP
When changing the strategy, you've to careful about policy of each system or libraries\&. 
.PP
Followings are something to consider when adjusting MAC address for uniqueness\&. 
.PP
.PD 0
.IP "\(bu" 2
In server side and view of socket, boost::asio or candidate network i/o libary of stl does not allow accessing otherside system's MAC address\&. But basic socket of window or linux are allowed\&. 
.IP "\(bu" 2
In client side and view of browser, IE allows to get MAC address by javascript with ActiveX, but other browsers do not allow\&.
.PP
\fBSee also:\fP
.RS 4
\fBsamchon::protocol\fP 
.PP
\fBsamchon::protocol::service\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "auto getSessionID (Socket * socket, size_t sequence) \-> std::string\fC [private]\fP"

.PP
Get a session ID\&. Asks Whether client to have a session id stored in cookie\&. 
.PP
If client has, get the session id from client, but if not, issues a new session ID and notify it(enrolled new session ID) to client\&. Additionally, if the session id was gotten from a client, inspect validate of the session ID\&. 
.PP
Those tasks will hold a critical section of a global IP address 
.PP
\fBWarning:\fP
.RS 4
The session id must be unique 
.RE
.PP
\fBReturns:\fP
.RS 4
A new session ID that can ensure uniqueness 
.RE
.PP

.SS "auto issueSessionID (size_t sequence) const \-> std::string\fC [private]\fP"

.PP
Issue a session ID\&. Issues a session ID when a target client haven't issued seesion ID yet
.PP
\fBDefault organization of the Session ID\fP
.RS 4

.PD 0

.IP "\(bu" 2
{$name}::{$port}::{$sequence}::{$linux_time}  
.PD 0

.IP "  1." 6
$name: Name of the \fBServer\fP; \fBServer::NAME()\fP  
.IP "  2." 6
$port: Port number of the \fBServer\fP; \fBServer::PORT()\fP  
.IP "  3." 6
$sequence: Sequence number of creation of \fBUser\fP in \fBServer\fP  
.IP "  4." 6
$linux_time: Linux time of current time\&.  
.PP
If the object \fBServer\fP is re-constructed, $sequence can be duplicated\&. $linux_time is to avoid the duplication so that can ensure uniqueness on session id
.PP

.PP

.PP
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
