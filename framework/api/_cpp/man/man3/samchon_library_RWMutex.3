.TH "RWMutex" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RWMutex \- rw_mutex  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <RWMutex\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRWMutex\fP ()"
.br
.RI "\fIDefault Constructor\&. \fP"
.ti -1c
.RI "void \fBreadLock\fP () const "
.br
.RI "\fILock on read\&. \fP"
.ti -1c
.RI "void \fBreadUnlock\fP () const "
.br
.RI "\fIUnlock of read\&. \fP"
.ti -1c
.RI "void \fBwriteLock\fP ()"
.br
.RI "\fILock on writing\&. \fP"
.ti -1c
.RI "void \fBwriteUnlock\fP ()"
.br
.RI "\fIUnlock on writing\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
rw_mutex 

A mutex divided into reading and writing\&. 
.PP
 
.PP
\fBNote:\fP
.RS 4
.RE
.PP
Of course, rw_mutex is already defined in linux C\&. But it is dependent on the linux OS, so that cannot be compiled in Window having the rw_mutex\&. There's not a class like rw_mutex in STL yet\&. It's the reason why \fBRWMutex\fP is provided\&. 
.PP
As that reason, if STL supports the rw_mutex in near future, the \fBRWMutex\fP can be depreciated\&. 
.PP
\fBSee also:\fP
.RS 4
\fBsamchon::library\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void readLock () const"

.PP
Lock on read\&. Increases a reading count\&. 
.PP
When write_lock is on a progress, wait until write_unlock to be called\&. 
.PP
.PD 0
.IP "\(bu" 2
Reading can be done by multiple sections\&. 
.IP "\(bu" 2
Reading can't be done when writing\&.
.PP
\fBWarning:\fP
.RS 4
You've to call read_unlock when the reading work is terminated\&. 
.RE
.PP

.SS "void readUnlock () const"

.PP
Unlock of read\&. Decreases a reading count\&. 
.PP
When write_lock had done after read_lock, it continues by read_unlock if the reading count was 1 (read_unlock makes the count to be zero)\&. 
.SS "void writeLock ()"

.PP
Lock on writing\&. Changes writing flag to true\&. 
.PP
If another write_lock or read_lock is on a progress, wait until them to be unlocked\&. 
.PP
.PD 0
.IP "\(bu" 2
Writing can be done by only a section at once\&. 
.IP "\(bu" 2
Writing can't be done when reading\&.
.PP
\fBNote:\fP
.RS 4
You've to call write_unlock when writing work was terminated\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
