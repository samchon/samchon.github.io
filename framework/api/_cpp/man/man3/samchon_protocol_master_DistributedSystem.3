.TH "DistributedSystem" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DistributedSystem \- A network driver for a distributed system\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <DistributedSystem\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDistributedSystem\fP ()"
.br
.RI "\fIDefault Constructor\&. \fP"
.ti -1c
.RI "virtual void \fBconstruct\fP (std::shared_ptr< \fBlibrary::XML\fP >) override"
.br
.RI "\fIConstruct data of the \fBEntity\fP from an XML object\&. \fP"
.ti -1c
.RI "virtual void \fBsendData\fP (std::shared_ptr< \fBInvoke\fP >) override"
.br
.RI "\fISends message to a related system\&. \fP"
.ti -1c
.RI "virtual void \fBreplyData\fP (std::shared_ptr< \fBInvoke\fP >) override"
.br
.RI "\fIHandling replied message from an external system\&. \fP"
.ti -1c
.RI "virtual auto \fBtoXML\fP () const  \-> std::shared_ptr< \fBlibrary::XML\fP > override"
.br
.RI "\fIGet an XML object represents the \fBEntityGroup\fP\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "size_t \fBinProgress\fP"
.br
.RI "\fIA number of processes running on the distributed system\&. \fP"
.ti -1c
.RI "size_t \fBprocessed\fP"
.br
.RI "\fIA number of processed have runned\&. \fP"
.ti -1c
.RI "double \fBavgElapsedTime\fP"
.br
.RI "\fIAverage of elapsed time\&. \fP"
.ti -1c
.RI "double \fBperformance\fP"
.br
.RI "\fIA performance index\&. \fP"
.ti -1c
.RI "DSRoleHistoryList * \fBroleHistoryList\fP"
.br
.RI "\fIA list of history log for role allocations\&. \fP"
.ti -1c
.RI "\fBDSInvokeHistoryList\fP * \fBinvokeHistoryList\fP"
.br
.RI "\fIA list of history log for reported \fBInvoke\fP messages\&. \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A network driver for a distributed system\&. 

\fBDistributedSystem\fP class is an \fBExternalSystem\fP having role as \fBDistributedSystemRole\fP objects with performance index and history log allocation of \fBDistributedSystemRole\fP objects and have requsted \fBInvoke\fP message to related external system\&. 
.PP
The greatest difference between \fBDistributedSystem\fP and \fBExternalSystem\fP is, unlike the \fBExternalSystem\fP class which having is \fBExternalSystemRole\fP objects exclusively, \fBDistributedSystem\fP does not monopoly a \fBDistributedSystemRole\fP\&. The \fBDistributedSystemRole\fP can allocatedto multiple \fBDistributedSystem\fP\&.
.PP
\fBDistributedSystem\fP and \fBDistributedSystemRole\fP classes have performance index and history log archiving what they've requested to the related distributed system\&. Allocating \fBDistributedSystemRole\fP objects to DistributedSyste will be determined those performance index and history log for optimize distribution of elasped time about each \fBInvoke\fP message processing\&. 
.PP
 
.PP
\fB[Inherited]\fP
.RS 4

.RE
.PP
\fBExternalSystem\fP is a boundary class interacting with an external system by network communication\&. Also, \fBExternalSystem\fP is an abstract class that a network role, which one is server and which one is client, is not determined yet\&. 
.PP
The \fBExternalSystem\fP has ExternalSystemRole(s) groupped methods, handling \fBInvoke\fP message interacting with the external system, by subject or unit of a moudle\&. The \fBExternalSystemRole\fP is categorized in a 'control'\&. 
.PP
 
.PP
\fBNote:\fP
.RS 4
.RE
.PP
The \fBExternalSystem\fP class takes a role of interaction with external system in network level\&. However, within a framework of Samchon Framework, a boundary class like the \fBExternalSystem\fP is not such important\&. You can find some evidence in a relationship between \fBExternalSystemArray\fP, \fBExternalSystem\fP and \fBExternalSystemRole\fP\&. 
.PP
Of course, the \fBExternalSystemRole\fP is belonged to an \fBExternalSystem\fP\&. However, if you access an \fBExternalSystemRole\fP from an \fBExternalSystemArray\fP directly, not passing by a belonged \fBExternalSystem\fP, and send an \fBInvoke\fP message even you're not knowing which \fBExternalSystem\fP is related in, it's called 'Proxy pattern'\&.
.PP
Like the explanation of 'Proxy pattern', you can utilize an \fBExternalSystemRole\fP as a proxy of an \fBExternalSystem\fP\&. With the pattern, you can only concentrate on \fBExternalSystemRole\fP itself, what to do with \fBInvoke\fP message, irrespective of the \fBExternalSystemRole\fP is belonged to which \fBExternalSystem\fP\&. 
.PP
\fBSee also:\fP
.RS 4
\fBsamchon::protocol\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual void construct (std::shared_ptr< \fBlibrary::XML\fP > xml)\fC [override]\fP, \fC [virtual]\fP"

.PP
Construct data of the \fBEntity\fP from an XML object\&. Constructs the \fBEntityGroup\fP's own member variables only from the input XML object\&. 
.PP
Do not consider about constructing children \fBEntity\fP objects' data in \fBEntityGroup::construct()\fP\&. Those children \fBEntity\fP objects' data will constructed by their own \fBconstruct()\fP method\&. Even insertion of XML objects representing children are done by abstract method of \fBEntityGroup::toXML()\fP\&. 
.PP
Constructs only data of \fBEntityGroup\fP's own\&. 
.PP
\fB[Inherited]\fP
.RS 4
Construct data of the \fBEntity\fP from an XML object\&. 
.RE
.PP
Overrides the \fBconstruct()\fP method and fetch data of member variables from the XML\&. 
.PP
By recommended guidance, data representing member variables are contained in properties of the put XML object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxml\fP An xml used to construct data of entity 
.RE
.PP

.PP
Reimplemented from \fBExternalSystem\fP\&.
.PP
Reimplemented in \fBDistributedServer\fP\&.
.SS "virtual void sendData (std::shared_ptr< \fBInvoke\fP >)\fC [override]\fP, \fC [virtual]\fP"

.PP
Sends message to a related system\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinvoke\fP \fBInvoke\fP message to send 
.RE
.PP

.PP
Reimplemented from \fBIClient\fP\&.
.SS "virtual void replyData (std::shared_ptr< \fBInvoke\fP >)\fC [override]\fP, \fC [virtual]\fP"

.PP
Handling replied message from an external system\&. If there's a related \fBExternalSystemRole\fP, shifts responsibility to the \fBExternalSystemRole\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIinvoke\fP Replied \fBInvoke\fP message 
.RE
.PP

.PP
Reimplemented from \fBExternalSystem\fP\&.
.SS "virtual auto toXML () const \-> std::shared_ptr<\fBlibrary::XML\fP>\fC [override]\fP, \fC [virtual]\fP"

.PP
Get an XML object represents the \fBEntityGroup\fP\&. Archives the \fBEntityGroup\fP's own member variables only to the returned XML object\&. 
.PP
Do not consider about archiving children \fBEntity\fP objects' data in \fBEntityGroup::toXML()\fP\&. Those children \fBEntity\fP objects will converted to XML object by their own \fBtoXML()\fP method\&. The insertion of XML objects representing children are done by abstract method of \fBEntityGroup::toXML()\fP\&. 
.PP
Archives only data of \fBEntityGroup\fP's own\&. 
.PP
\fB[Inherited]\fP
.RS 4
Get an XML object represents the \fBEntity\fP\&. 
.RE
.PP
Returns an XML object that can represents the \fBEntity\fP containing member variables into properties\&. 
.PP
A member variable (not object, but atomic value like number, string or date) is categorized as a property within the framework of entity side\&. Thus, when overriding a \fBtoXML()\fP method and archiving member variables to an XML object to return, puts each variable to be a property belongs to only an XML object\&. 
.PP
Don't archive the member variable of atomic value to XML::value causing enormouse creation of XML objects to number of member variables\&. An \fBEntity\fP must be represented by only an XML instance (tag)\&. 
.PP
Standard Usage  Non-standard usage abusing value   <memberList>
.br
      <member id='jhnam88' name='Jeongho+Nam' birthdate='1988-03-11' />
.br
      <member id='master' name='Administartor' birthdate='2011-07-28' />
.br
 </memberList>  <member>
.br
      <id>jhnam88</id>
.br
      <name>Jeongho+Nam</name>
.br
      <birthdate>1988-03-11</birthdate>
.br
 </member>   
.PP
\fBReturns:\fP
.RS 4
An XML object representing the \fBEntity\fP\&. 
.RE
.PP

.PP
Reimplemented from \fBExternalSystem\fP\&.
.PP
Reimplemented in \fBDistributedServer\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "size_t inProgress\fC [protected]\fP"

.PP
A number of processes running on the distributed system\&. Adds one count when \fBsendData()\fP is called and minus one count if a \fBDSInvokeHistory\fP, which means reported \fBInvoke\fP history, was reported by \fBreplyData()\fP\&. 
.PP
If an \fBDistributedSystemRole\fP is allocated to multiple \fBDistributedSystem\fP objects, which \fBDistributedSystem\fP will be used is determined by the \fIprocess size\fP and performance index of the \fBExternalSystemRole\fP\&. 
.SS "double avgElapsedTime\fC [protected]\fP"

.PP
Average of elapsed time\&. Average elapsed time of handling \fBInvoke\fP message (request) in frame work of tbe related distributed system\&. Not in frame work of distributed system's driver, DistributeDSystem\&. 
.PP
The ultimate optimization target of distributed processing system is to minimizing standard deviation of the average elapsed time of the \fBDistributedSystem\fP\&. 
.SS "double performance\fC [protected]\fP"

.PP
A performance index\&. A performance index z is calculated by normalization calculating reverse number of whole distributed system's average elapsed times and its z value between the normal distribution\&. 
.PP
.PD 0
.IP "\(bu" 2
X = (¥ì + z¥ò)
.PP
.PP
If a distributed system has no history of handling \fBInvoke\fP message, then set the performance index to 0 as default\&. The performance index will be re-calcuated whenever re-allocation of roles is done (DistributedSystem::allocateRoles())\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
