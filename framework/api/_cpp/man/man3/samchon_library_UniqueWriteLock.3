.TH "UniqueWriteLock" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
UniqueWriteLock \- Unique lock for writing\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <UniqueWriteLock\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBUniqueWriteLock\fP (\fBRWMutex\fP &, bool=true)"
.br
.RI "\fIConstruct from mutex\&. \fP"
.ti -1c
.RI "\fBUniqueWriteLock\fP (const \fBUniqueWriteLock\fP &)=delete"
.br
.RI "\fIProhibited Copy Constructor\&. \fP"
.ti -1c
.RI "\fBUniqueWriteLock\fP (\fBUniqueWriteLock\fP &&)"
.br
.RI "\fIMove Constructor\&. \fP"
.ti -1c
.RI "\fB~UniqueWriteLock\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "void \fBlock\fP ()"
.br
.RI "\fILock on writing\&. \fP"
.ti -1c
.RI "void \fBunlock\fP ()"
.br
.RI "\fIUnlock on writing\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBRWMutex\fP * \fBmtx\fP"
.br
.RI "\fIManaged mutex\&. \fP"
.ti -1c
.RI "bool \fBisLocked\fP"
.br
.RI "\fIWhether the mutex was locked by UniqueLock\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Unique lock for writing\&. 

A \fBUniqueWriteLock\fP is an object manages a \fBRWMutex\fP with unique ownership in both states\&. 
.PP
.PD 0
.IP "\(bu" 2
acquired 
.IP "\(bu" 2
released
.PP
.PP
On construction (or by move-assigning to it), the object locks a \fBRWMutex\fP object on writing side, for whose locking and unlocking operations becomes responsible\&. 
.PP
The object supports both states: locked and unlocked\&. 
.PP
This class guarantees a unlocked status on destruction (even if not called explicitly)\&. Therefore it is especially useful as an object with automatic duration, as it guarantees the \fBRWMutex\fP object is properly unlocked in case an exception is thrown\&. 
.PP
Referenced comments of std::unique_lock 
.PP
.PD 0
.IP "\(bu" 2
http://www.cplusplus.com/reference/mutex/unique_lock/
.PP
 
.PP
\fBNote:\fP
.RS 4
Though, that the \fBUniqueWriteLock\fP object does not manage the lifetime of the \fBRWMutex\fP object in any way: the duration of the \fBRWMutex\fP object shall extend at least until the destruction of the \fBUniqueWriteLock\fP that manages it\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsamchon::library\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBUniqueWriteLock\fP (\fBRWMutex\fP & mtx, bool doLock = \fCtrue\fP)"

.PP
Construct from mutex\&. 
.PP
\fBParameters:\fP
.RS 4
\fImtx\fP Mutex to manage 
.br
\fIdoLock\fP Whether to lock directly or not 
.RE
.PP

.SS "\fBUniqueWriteLock\fP (const \fBUniqueWriteLock\fP &)\fC [delete]\fP"

.PP
Prohibited Copy Constructor\&. \fBUniqueAcquire\fP can't be copied\&. Use pointer, reference instead\&. 
.PP
If what you want is UniqueAcquire(s) references each other and unlock when all related \fBUniqueAcquire\fP objects are destructed, \fBSharedAcquire\fP is the best way\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP Tried object to copy\&. 
.RE
.PP

.SS "\fBUniqueWriteLock\fP (\fBUniqueWriteLock\fP && obj)"

.PP
Move Constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIAn\fP object to move 
.RE
.PP

.SS "~\fBUniqueWriteLock\fP ()"

.PP
Destructor\&. If write lock has done by the UniqueLock, unlock it 
.SH "Member Function Documentation"
.PP 
.SS "void lock ()"

.PP
Lock on writing\&. Changes writing flag to true\&. 
.PP
If another write_lock or read_lock is on a progress, wait until them to be unlocked\&. 
.PP
.PD 0
.IP "\(bu" 2
Writing can be done by only a section at once\&. 
.IP "\(bu" 2
Writing can't be done when reading\&.
.PP
\fBNote:\fP
.RS 4
You've to call write_unlock when writing work was terminated\&. 
.RE
.PP

.SS "void unlock ()"

.PP
Unlock on writing\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
