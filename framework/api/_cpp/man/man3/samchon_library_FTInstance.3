.TH "FTInstance" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FTInstance \- An interface of file-tree\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <FTInstance\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBFTInstance\fP (\fBFTFolder\fP *)"
.br
.RI "\fIConstruct from parent folder\&. \fP"
.ti -1c
.RI "virtual auto \fBkey\fP () const  \-> std::string"
.br
.RI "\fIGet a key that can identify the Entity uniquely\&. \fP"
.ti -1c
.RI "auto \fBgetUID\fP () const  \-> int"
.br
.RI "\fIGet uid\&. \fP"
.ti -1c
.RI "auto \fBgetParent\fP () const  \-> \fBFTFolder\fP *"
.br
.RI "\fIGet parent folder\&. \fP"
.ti -1c
.RI "auto \fBgetName\fP () const  \-> std::string"
.br
.RI "\fIGet name\&. \fP"
.ti -1c
.RI "auto \fBgetComment\fP () const  \-> std::string"
.br
.RI "\fIGet comment\&. \fP"
.ti -1c
.RI "virtual auto \fBtoXML\fP () const  \-> std::shared_ptr< \fBlibrary::XML\fP >"
.br
.RI "\fIGet an \fBXML\fP object represents the Entity\&. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual auto \fBTAG\fP () const  \-> std::string"
.br
.RI "\fIA tag name when represented by \fBXML\fP\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBFTFolder\fP * \fBparent\fP"
.br
.RI "\fIParent folder containing the instance\&. \fP"
.ti -1c
.RI "int \fBuid\fP"
.br
.RI "\fIKey, an unique id of file\&. \fP"
.ti -1c
.RI "std::string \fBname\fP"
.br
.RI "\fIName of the file\&. \fP"
.ti -1c
.RI "std::string \fBcomment\fP"
.br
.RI "\fIComment of the file\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
An interface of file-tree\&. 

An abstract class for folder and file instances\&.
.PP
 
.PP
\fBSee also:\fP
.RS 4
\fBsamchon::library\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBFTInstance\fP (\fBFTFolder\fP * parent)"

.PP
Construct from parent folder\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent folder that this instance is belonged to 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "auto TAG () const \->  std::string\fC [protected]\fP, \fC [virtual]\fP"

.PP
A tag name when represented by \fBXML\fP\&. 
.PP
\fBReturns:\fP
.RS 4
A tag name 
.RE
.PP

.PP
Implements \fBEntity\fP\&.
.SS "auto key () const \-> std::string\fC [virtual]\fP"

.PP
Get a key that can identify the Entity uniquely\&. If identifier of the Entity is not atomic value, returns a string represents the composite identifier\&. If identifier of the Entity is not string, converts the identifier to string and returns the string\&. 
.PP
\fBReturns:\fP
.RS 4
An identifier 
.RE
.PP

.PP
Reimplemented from \fBEntity\fP\&.
.SS "auto toXML () const \-> std::shared_ptr<\fBlibrary::XML\fP>\fC [virtual]\fP"

.PP
Get an \fBXML\fP object represents the Entity\&. Returns an \fBXML\fP object that can represents the Entity containing member variables into properties\&. 
.PP
A member variable (not object, but atomic value like number, string or date) is categorized as a property within the framework of entity side\&. Thus, when overriding a \fBtoXML()\fP method and archiving member variables to an \fBXML\fP object to return, puts each variable to be a property belongs to only an \fBXML\fP object\&. 
.PP
Don't archive the member variable of atomic value to \fBXML::value\fP causing enormouse creation of \fBXML\fP objects to number of member variables\&. An Entity must be represented by only an \fBXML\fP instance (tag)\&. 
.PP
Standard Usage  Non-standard usage abusing value   <memberList>
.br
      <member id='jhnam88' name='Jeongho+Nam' birthdate='1988-03-11' />
.br
      <member id='master' name='Administartor' birthdate='2011-07-28' />
.br
 </memberList>  <member>
.br
      <id>jhnam88</id>
.br
      <name>Jeongho+Nam</name>
.br
      <birthdate>1988-03-11</birthdate>
.br
 </member>   
.PP
\fBReturns:\fP
.RS 4
An \fBXML\fP object representing the Entity\&. 
.RE
.PP

.PP
Reimplemented from \fBEntity\fP\&.
.PP
Reimplemented in \fBNTFile\fP, \fBFTFolder\fP, and \fBFTFile\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
