.TH "NTFile" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NTFile \- A file archiving metadata of a function\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <NTFile\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNTFile\fP (\fBNTFactory\fP *, \fBlibrary::FTFolder\fP *)"
.br
.RI "\fIConstruct from factory and parent folder\&. \fP"
.ti -1c
.RI "virtual void \fBconstruct\fP (std::shared_ptr< \fBlibrary::XML\fP >) override"
.br
.RI "\fIConstruct data of the Entity from an XML object\&. \fP"
.ti -1c
.RI "auto \fBgetParameterArray\fP () const  \-> \fBNTParameterArray\fP *"
.br
.RI "\fIGet metadata of parameters\&. \fP"
.ti -1c
.RI "auto \fBgetOtherside\fP () const  \-> \fBNTFile\fP *"
.br
.RI "\fIGet otherside file\&. \fP"
.ti -1c
.RI "auto \fBgetFunction\fP () const  \-> SideFunction"
.br
.RI "\fIGet function pointer\&. \fP"
.ti -1c
.RI "virtual auto \fBtoXML\fP () const  \-> std::shared_ptr< \fBlibrary::XML\fP > override"
.br
.RI "\fIGet an XML object represents the Entity\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBNTFactory\fP * \fBfactory\fP"
.br
.RI "\fIA factory and manager class for nam-tree\&. \fP"
.ti -1c
.RI "\fBNTParameterArray\fP * \fBparameterArray\fP"
.br
.RI "\fIMetadata of parameters\&. \fP"
.ti -1c
.RI "\fBNTFile\fP * \fBotherside\fP"
.br
.RI "\fIA file of otherside\&. \fP"
.ti -1c
.RI "SideFunction \fBfunction\fP"
.br
.RI "\fIA function pointer\&. \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A file archiving metadata of a function\&. 

 
.PP
\fBNTFile\fP class is a FTFile archiving meta of a function which is used by a \fBNTSide\fP class\&. It may better to understand what \fBNTFile\fP is, if you consider the \fBNTFile\fP as a header of a function\&. Name, metadata of parameters and function pointer is archived on the \fBNTFile\fP\&. 
.PP
 
.PP
\fBNote:\fP
.RS 4
.RE
.PP
Previous version of the Samchon Framework, \fBNTFile\fP class had a function script on the \fBNTFile\fP and Nam-Tree module compiled the script like Nam-Tree moudle of Flex standalone that is keeping the compiling method\&. 
.PP
However, modern Samchon Framework's C++ \fBNTFile\fP class doesn't have a function script and does not compile\&. I don't know a way to compile a script in lots of operating systems, so I dropped the compiling method\&. Until update, \fBNTFactory\fP has function pointers in a Dictionary and \fBNTFile\fP reference them\&. Users must put own methods into the Dictionary by their hands\&. 
.PP
I will solve the problem sooon\&. Until next generation of Samchon Framework, put your own function pointers to a Dictionary in \fBNTFactory\fP by your hand please\&. Sorry for my unripe skill on programming\&. 
.PP
\fBSee also:\fP
.RS 4
\fBsamchon::namtree\fP 
.PP
\fBnamtree::NTSide\fP 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBNTFile\fP (\fBNTFactory\fP * factory, \fBlibrary::FTFolder\fP * parent)"

.PP
Construct from factory and parent folder\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP A factory class creating nam-tree objects\&. 
.br
\fIfolder\fP A parent folder of the \fBNTFile\fP\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void construct (std::shared_ptr< \fBlibrary::XML\fP >)\fC [override]\fP, \fC [virtual]\fP"

.PP
Construct data of the Entity from an XML object\&. Overrides the \fBconstruct()\fP method and fetch data of member variables from the XML\&. 
.PP
By recommended guidance, data representing member variables are contained in properties of the put XML object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxml\fP An xml used to construct data of entity 
.RE
.PP

.PP
Reimplemented from \fBINTExplore\fP\&.
.SS "auto toXML () const \-> std::shared_ptr<\fBlibrary::XML\fP>\fC [override]\fP, \fC [virtual]\fP"

.PP
Get an XML object represents the Entity\&. Returns an XML object that can represents the Entity containing member variables into properties\&. 
.PP
A member variable (not object, but atomic value like number, string or date) is categorized as a property within the framework of entity side\&. Thus, when overriding a \fBtoXML()\fP method and archiving member variables to an XML object to return, puts each variable to be a property belongs to only an XML object\&. 
.PP
Don't archive the member variable of atomic value to XML::value causing enormouse creation of XML objects to number of member variables\&. An Entity must be represented by only an XML instance (tag)\&. 
.PP
Standard Usage  Non-standard usage abusing value   <memberList>
.br
      <member id='jhnam88' name='Jeongho+Nam' birthdate='1988-03-11' />
.br
      <member id='master' name='Administartor' birthdate='2011-07-28' />
.br
 </memberList>  <member>
.br
      <id>jhnam88</id>
.br
      <name>Jeongho+Nam</name>
.br
      <birthdate>1988-03-11</birthdate>
.br
 </member>   
.PP
\fBReturns:\fP
.RS 4
An XML object representing the Entity\&. 
.RE
.PP

.PP
Reimplemented from \fBFTFile\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBNTFactory\fP* factory\fC [protected]\fP"

.PP
A factory and manager class for nam-tree\&. \fBNTFile\fP references \fBNTFactory\fP to find otherside file and function pointer\&. 
.SS "\fBNTFile\fP* otherside\fC [protected]\fP"

.PP
A file of otherside\&. The variable otherside is a pair of file which is inserted to a criteria's opposite side\&. 
.PP
When the otherside is specified and you determine the \fBNTFile\fP to be contained in a \fBNTSide\fP, the \fBNTCriteria\fP owning the \fBNTSide\fP will determine opposite side's \fBNTSide\fP to have the otherside \fBNTFile\fP forcibly\&. 
.PP
\fBNote:\fP
.RS 4
.RE
.PP
The determination will be automatic and unchangeble\&. Consider hardly when specifying an otherside\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
