.TH "ChatRoom" 3 "Mon Oct 26 2015" "Version 1.0.0" "Samchon Framework for CPP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ChatRoom \- A chat room\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ChatRoom\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBChatRoom\fP (\fBChatRoomArray\fP *, const std::string &, \fBChatUser\fP *)"
.br
.RI "\fIConstruct from rooms, name and host\&. \fP"
.ti -1c
.RI "void \fBregisterClient\fP (\fBChatService\fP *)"
.br
.RI "\fIRegister a participant client\&. \fP"
.ti -1c
.RI "void \fBeraseClient\fP (\fBChatService\fP *)"
.br
.RI "\fIErase a participant client\&. \fP"
.ti -1c
.RI "virtual auto \fBtoXML\fP () const  \-> std::shared_ptr< \fBlibrary::XML\fP > override"
.br
.RI "\fIGet an XML object represents the Entity\&. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual auto \fBTAG\fP () const  \-> std::string"
.br
.RI "\fIA tag name when represented by XML\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBChatRoomArray\fP * \fBroomArray\fP"
.br
.RI "\fIAll rooms that the room is belonged to\&. \fP"
.ti -1c
.RI "std::string \fBname\fP"
.br
.RI "\fIName of the room\&. \fP"
.ti -1c
.RI "\fBChatUser\fP * \fBhost\fP"
.br
.RI "\fIA host, who established the room\&. \fP"
.ti -1c
.RI "\fBlibrary::CriticalSet\fP< \fBChatService\fP * > \fBparticipants\fP"
.br
.RI "\fIParticipants, ChatUser(s) in the room\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
A chat room\&. 

An entity class representing a chat room containing participants\&. The \fBChatRoom\fP class takes a responsibility of Invoke message chain between clients (participating ChatUser(s)) objects\&. 
.PP
 
.PP
\fBAuthor:\fP
.RS 4
Jeongho Nam 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBChatRoom\fP (\fBChatRoomArray\fP *, const std::string &, \fBChatUser\fP *)"

.PP
Construct from rooms, name and host\&. 
.PP
\fBParameters:\fP
.RS 4
\fIrooms\fP Rooms managing ChatRoom(s)\&. 
.br
\fIname\fP Name of the room, the identifier\&. 
.br
\fIhost\fP A host who established the room\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual auto TAG () const \->  std::string\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
A tag name when represented by XML\&. 
.PP
\fBReturns:\fP
.RS 4
A tag name 
.RE
.PP

.PP
Implements \fBEntity\fP\&.
.SS "void registerClient (\fBChatService\fP * service)"

.PP
Register a participant client\&. Registers a participant and notify the participation to another clients\&. 
.SS "void eraseClient (\fBChatService\fP * service)"

.PP
Erase a participant client\&. Erases a participant and notify others about the exiting\&. 
.SS "auto toXML () const \-> std::shared_ptr<\fBlibrary::XML\fP>\fC [override]\fP, \fC [virtual]\fP"

.PP
Get an XML object represents the Entity\&. Returns an XML object that can represents the Entity containing member variables into properties\&. 
.PP
A member variable (not object, but atomic value like number, string or date) is categorized as a property within the framework of entity side\&. Thus, when overriding a \fBtoXML()\fP method and archiving member variables to an XML object to return, puts each variable to be a property belongs to only an XML object\&. 
.PP
Don't archive the member variable of atomic value to XML::value causing enormouse creation of XML objects to number of member variables\&. An Entity must be represented by only an XML instance (tag)\&. 
.PP
Standard Usage  Non-standard usage abusing value   <memberList>
.br
      <member id='jhnam88' name='Jeongho+Nam' birthdate='1988-03-11' />
.br
      <member id='master' name='Administartor' birthdate='2011-07-28' />
.br
 </memberList>  <member>
.br
      <id>jhnam88</id>
.br
      <name>Jeongho+Nam</name>
.br
      <birthdate>1988-03-11</birthdate>
.br
 </member>   
.PP
\fBReturns:\fP
.RS 4
An XML object representing the Entity\&. 
.RE
.PP

.PP
Reimplemented from \fBEntity\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "std::string name\fC [private]\fP"

.PP
Name of the room\&. The name is the identifier of the \fBChatRoom\fP\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Samchon Framework for CPP from the source code\&.
